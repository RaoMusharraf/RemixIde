{
	"id": "851b820252315f4d560afba28efad145",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Token&NFTStaking/Contract.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: andreitoma8\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC20Stakeable is Ownable,IERC721Receiver{\n    using SafeERC20 for IERC20;\n    address public ERC721address;\n    address public owenerERC20;\n    address public ERC20Address;\n    uint public totalOwnerToken;\n    uint rate;\n    struct Staker {\n        uint256 deposited;\n        uint256 timestake;\n        bool check; \n    }\n    struct StakerNFT {\n        uint256 userRate;\n        uint256 tokenId;\n        bool check; \n    }\n    mapping (address => Staker) public Details;\n    mapping (address => uint) public Reward;\n    mapping (address => uint ) public OwnerTokens;\n    mapping (address => StakerNFT ) public UserRate;\n    /*\n    ~~~~~~~~~~~~~~~Constructor function~~~~~~~~~~~~~~~\n   1. This function is called when contract is first deployed.\n   2. It takes three parameters:\n        a. ER721 Token Address (Address of ER721 Token Contract)\n        b. Rate Percentage (Percentage value of rate i.e., Interest percentage)\n        c. ER720 Token Address (Address of ER720 Token Contract)\n    */\n    constructor(address _ERC721address, uint256 _ratePersentage, address _ERC20Address) {\n        ERC721address = _ERC721address;\n        rate = _ratePersentage;\n        ERC20Address = _ERC20Address;\n        owenerERC20 = msg.sender;\n    }\n    /*\n    ~~~~~~~~~~~~~Admin Add Token Function~~~~~~~~~~~~~~~\n    1. Owner add tokens into contract with this function\n    2. These tokens are used as rewards for staking\n    3. Only Owner can call this function\n    */\n    function AdminAddToken(uint _amount) public onlyOwner{\n        require(msg.sender==owenerERC20,\"Only Owner can transfer\");\n        OwnerTokens[msg.sender] +=_amount;\n        totalOwnerToken += _amount;\n        IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount);\n    }\n    /*\n    ~~~~~~~~~~~~~Admin WithDraw Token Function~~~~~~~~~~~~~~~\n    1. Admin withdraws his/her desired amount of token from contract.\n    2. Only Owner can call this function\n    */\n    function AdminWithDrawToken(uint amount) public onlyOwner{\n        OwnerTokens[msg.sender] -= amount;\n        totalOwnerToken -= amount;\n        IERC20(ERC20Address).safeTransfer(msg.sender, amount);\n    }\n    /*\n    ~~~~~~~~~~~~~Utilization Function~~~~~~~~~~~~~~~\n    1. Owner call this function to check remaining percentage of tokens left in this contract.\n    2. Only Owner can call this function\n    */\n    function Utilization() public view returns(uint256) {\n        uint Persentage = (OwnerTokens[owenerERC20] * 100)/totalOwnerToken;\n        return Persentage;\n    }\n    /*   ~~~~~~~~~~~~~Deposit Function~~~~~~~~~~~~~~~\n    1. This function has one parameter.\n    2. This function is used to deposit desired amount of tokens in this contract by user.\n    3. If user already deposited some tokens then he/she must has to withdraw all tokens first.\n    */\n    function Deposit(uint256 _amount) public {\n        require(!Details[msg.sender].check,\"Please First WithDraw\");\n        Details[msg.sender] = Staker(_amount,block.timestamp,true);\n        IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount);\n    }\n    /*   ~~~~~~~~~~~~~Withdraw Function~~~~~~~~~~~~~~~\n    1. This function is used to withdraw tokens.\n    2. User will call this function to withdraw all tokens from this contract.\n    */\n    function Withdraw() public {\n        require(Details[msg.sender].check,\"Please First Stake\");\n        if (UserRate[msg.sender].check){\n            uint amount = Details[msg.sender].deposited;\n            uint newval = calculateIntrest(msg.sender);\n            IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,UserRate[msg.sender].tokenId,\"\");\n            IERC20(ERC20Address).transfer(msg.sender, amount + newval);\n            OwnerTokens[owenerERC20] -= newval;\n            delete UserRate[msg.sender];\n            delete Details[msg.sender];\n        }\n        else{\n            uint amount = Details[msg.sender].deposited;\n            uint newval = calculateIntrest(msg.sender);\n            IERC20(ERC20Address).transfer(msg.sender, amount + newval);\n            OwnerTokens[owenerERC20] -= newval;\n            delete Details[msg.sender];\n        }    \n    }\n     /*   ~~~~~~~~~~~~~showReward Function~~~~~~~~~~~~~~~\n    1. This function is used to show rewards.\n    2. User will call this function to check his/her total generated rewards\n    */\n    function showReward(address _to) public view returns(uint result)\n    {\n        if (UserRate[_to].check)\n        {\n            uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60);\n            uint TotalReward = RewardEst / 100;\n            result = TotalReward + Details[_to].deposited;\n            return result/1000000000000000000;\n\n        }\n        else\n        {\n            uint RewardEst = (Details[_to].deposited * rate) * ((block.timestamp - Details[_to].timestake)/60);\n            uint TotalReward = RewardEst / 100;\n            result = TotalReward + Details[_to].deposited;\n            return result/1000000000000000000;\n        }\n        \n    }\n    /*   ~~~~~~~~~~~~~CalculateIntrest Function~~~~~~~~~~~~~~~\n    1. This function is used to calculate total reward generated.\n    2. Function will decide how much reward is generated after every minute by adding PercentageRate of deposited tokens .\n    */\n    function calculateIntrest(address _to) public view returns(uint256){\n        if (UserRate[_to].check)\n        {\n            uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60);\n            uint TotalReward = RewardEst / 100;\n            return TotalReward;\n        }\n        else\n        {\n            uint RewardEst = (Details[_to].deposited * rate) * ((block.timestamp - Details[_to].timestake)/60);\n            uint TotalReward = RewardEst / 100;\n            return TotalReward;\n        }\n    }\n    /*   ~~~~~~~~~~~~~UpdateERC721 Function~~~~~~~~~~~~~~~\n    1. This function is used update address of ERC721 token address.\n    2. Only Owner can call this function.\n    */\n    function UpdateERC721(address _ERC721address) public onlyOwner{\n        ERC721address = _ERC721address;\n    }\n    /*~~~~~~~~~~~~~UpdateERC20 Function~~~~~~~~~~~~~~~\n    1. This function is used update address of ERC20 token address.\n    2. Only Owner can call this function.\n    */\n    function UpdateERC20 ( address _ERC20Address) public onlyOwner{\n        ERC20Address = _ERC20Address;\n    }\n    /*~~~~~~~~~~~~~UpdateRatePersentage Function~~~~~~~~~~~~~~~\n    1. This function is used update Percentage Rate of rewards.\n    2. Only Owner can call this function.\n    */\n    function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{\n        rate = _ratePersentage;\n    }\n    /*~~~~~~~~~~~~~DepositNFT Function~~~~~~~~~~~~~~~\n    1. This function is used to deposit new token and boost the current percentage rate\n    2. This function takes two parameters i.e., Token Id and New Boosted Percentage Rate\n    */\n    function DepositNFT(uint256 tokenIds,uint _rate) public {\n        require(Details[msg.sender].check,\"First Deposit Tokens\");\n        require(UserRate[msg.sender].check,\"Please Unstake your deposited NFT\");\n        UserRate[msg.sender] = StakerNFT(_rate,tokenIds,true); \n        IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\");\n    }\n    /*~~~~~~~~~~~~~WithdrawNFT Function~~~~~~~~~~~~~~~\n    1. This function is used to withdraw token\n    2. This function takes one parameter\n    3. User must have one nft staked before withdrawing.\n    */\n    function withdrawNFT(uint256 tokenIds) public {\n        require(UserRate[msg.sender].check,\"Please First Stake NFTs\");\n        IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\");\n        delete UserRate[msg.sender];\n    }\n    function onERC721Received(address,address,uint256,bytes calldata) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122014f54e515cdfbb2be09ce6f2bc3be274153e14fdc461e9817589c915e4e92c1664736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014f54e515cdfbb2be09ce6f2bc3be274153e14fdc461e9817589c915e4e92c1664736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CREATE2 0x4E MLOAD 0x5C 0xDF 0xBB 0x2B 0xE0 SWAP13 0xE6 CALLCODE 0xBC EXTCODESIZE 0xE2 PUSH21 0x153E14FDC461E9817589C915E4E92C1664736F6C63 NUMBER STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014f54e515cdfbb2be09ce6f2bc3be274153e14fdc461e9817589c915e4e92c1664736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CREATE2 0x4E MLOAD 0x5C 0xDF 0xBB 0x2B 0xE0 SWAP13 0xE6 CALLCODE 0xBC EXTCODESIZE 0xE2 PUSH21 0x153E14FDC461E9817589C915E4E92C1664736F6C63 NUMBER STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122014f54e515cdfbb2be09ce6f2bc3be274153e14fdc461e9817589c915e4e92c1664736f6c634300080d0033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122046f2de202e85485c2e65c3034b1385243dd034039a6bfc27d6c496cc4db2500864736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122046f2de202e85485c2e65c3034b1385243dd034039a6bfc27d6c496cc4db2500864736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID CALLCODE 0xDE KECCAK256 0x2E DUP6 BASEFEE 0x5C 0x2E PUSH6 0xC3034B138524 RETURNDATASIZE 0xD0 CALLVALUE SUB SWAP11 PUSH12 0xFC27D6C496CC4DB250086473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "194:8964:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122046f2de202e85485c2e65c3034b1385243dd034039a6bfc27d6c496cc4db2500864736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID CALLCODE 0xDE KECCAK256 0x2E DUP6 BASEFEE 0x5C 0x2E PUSH6 0xC3034B138524 RETURNDATASIZE 0xD0 CALLVALUE SUB SWAP11 PUSH12 0xFC27D6C496CC4DB250086473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "194:8964:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122046f2de202e85485c2e65c3034b1385243dd034039a6bfc27d6c496cc4db2500864736f6c634300080d0033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Token&NFTStaking/Contract.sol": {
				"ERC20Stakeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC721address",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_ratePersentage",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_ERC20Address",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "AdminAddToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AdminWithDrawToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenIds",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_rate",
									"type": "uint256"
								}
							],
							"name": "DepositNFT",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Details",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "deposited",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestake",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "check",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ERC20Address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ERC721address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "OwnerTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Reward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC20Address",
									"type": "address"
								}
							],
							"name": "UpdateERC20",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC721address",
									"type": "address"
								}
							],
							"name": "UpdateERC721",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_ratePersentage",
									"type": "uint256"
								}
							],
							"name": "UpdateRatePersentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "UserRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "userRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "check",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "Utilization",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "Withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "calculateIntrest",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owenerERC20",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "showReward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "result",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalOwnerToken",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenIds",
									"type": "uint256"
								}
							],
							"name": "withdrawNFT",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Token&NFTStaking/Contract.sol\":348:8362  contract ERC20Stakeable is Ownable,IERC721Receiver{... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1357:1592  constructor(address _ERC721address, uint256 _ratePersentage, address _ERC20Address) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_7\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_7:\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1451:1464  ERC721address */\n  0x01\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1451:1481  ERC721address = _ERC721address */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap5\n  dup6\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1491:1495  rate */\n  0x05\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1491:1513  rate = _ratePersentage */\n  swap3\n  swap1\n  swap3\n  sstore\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1523:1535  ERC20Address */\n  0x03\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1523:1551  ERC20Address = _ERC20Address */\n  dup1\n  sload\n  swap2\n  swap1\n  swap4\n  and\n  swap1\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n  0x02\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1561:1585  owenerERC20 = msg.sender */\n  dup1\n  sload\n  swap1\n  swap2\n  and\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1575:1585  msg.sender */\n  caller\n    /* \"contracts/Token&NFTStaking/Contract.sol\":1561:1585  owenerERC20 = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/Token&NFTStaking/Contract.sol\":348:8362  contract ERC20Stakeable is Ownable,IERC721Receiver{... */\n  jump(tag_16)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:191   */\ntag_15:\n    /* \"#utility.yul\":93:106   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":135:166   */\n  dup2\n  and\n    /* \"#utility.yul\":125:167   */\n  dup2\n  eq\n    /* \"#utility.yul\":115:185   */\n  tag_18\n  jumpi\n    /* \"#utility.yul\":181:182   */\n  0x00\n    /* \"#utility.yul\":178:179   */\n  dup1\n    /* \"#utility.yul\":171:183   */\n  revert\n    /* \"#utility.yul\":115:185   */\ntag_18:\n    /* \"#utility.yul\":14:191   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":196:550   */\ntag_3:\n    /* \"#utility.yul\":284:290   */\n  0x00\n    /* \"#utility.yul\":292:298   */\n  dup1\n    /* \"#utility.yul\":300:306   */\n  0x00\n    /* \"#utility.yul\":353:355   */\n  0x60\n    /* \"#utility.yul\":341:350   */\n  dup5\n    /* \"#utility.yul\":332:339   */\n  dup7\n    /* \"#utility.yul\":328:351   */\n  sub\n    /* \"#utility.yul\":324:356   */\n  slt\n    /* \"#utility.yul\":321:373   */\n  iszero\n  tag_20\n  jumpi\n    /* \"#utility.yul\":369:370   */\n  0x00\n    /* \"#utility.yul\":366:367   */\n  dup1\n    /* \"#utility.yul\":359:371   */\n  revert\n    /* \"#utility.yul\":321:373   */\ntag_20:\n    /* \"#utility.yul\":392:432   */\n  tag_21\n    /* \"#utility.yul\":422:431   */\n  dup5\n    /* \"#utility.yul\":392:432   */\n  tag_15\n  jump\t// in\ntag_21:\n    /* \"#utility.yul\":382:432   */\n  swap3\n  pop\n    /* \"#utility.yul\":472:474   */\n  0x20\n    /* \"#utility.yul\":461:470   */\n  dup5\n    /* \"#utility.yul\":457:475   */\n  add\n    /* \"#utility.yul\":451:476   */\n  mload\n    /* \"#utility.yul\":441:476   */\n  swap2\n  pop\n    /* \"#utility.yul\":495:544   */\n  tag_22\n    /* \"#utility.yul\":540:542   */\n  0x40\n    /* \"#utility.yul\":529:538   */\n  dup6\n    /* \"#utility.yul\":525:543   */\n  add\n    /* \"#utility.yul\":495:544   */\n  tag_15\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":485:544   */\n  swap1\n  pop\n    /* \"#utility.yul\":196:550   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\t// out\ntag_16:\n    /* \"contracts/Token&NFTStaking/Contract.sol\":348:8362  contract ERC20Stakeable is Ownable,IERC721Receiver{... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Token&NFTStaking/Contract.sol\":348:8362  contract ERC20Stakeable is Ownable,IERC721Receiver{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_27\n      jumpi\n      dup1\n      0xc45af5d8\n      gt\n      tag_28\n      jumpi\n      dup1\n      0xc45af5d8\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xe4458b30\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xe88cc2be\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xee0106d2\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xf89d832f\n      eq\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x934ed772\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xa6021ace\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xa88e132f\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xb7171a2e\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xc0cd40ee\n      eq\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x4d6ce1e5\n      gt\n      tag_29\n      jumpi\n      dup1\n      0x4d6ce1e5\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x57488064\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x57ea89b6\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x7b2f247f\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x8b73e331\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      dup1\n      0x023245d7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x0ccff6e9\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x10fd4fba\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x150b7a02\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x275bd33f\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x2ffce210\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7935:8184  function withdrawNFT(uint256 tokenIds) public {... */\n    tag_3:\n      tag_30\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n    tag_30:\n      stop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":535:562  uint public totalOwnerToken */\n    tag_4:\n      tag_34\n      sload(0x04)\n      dup2\n      jump\n    tag_34:\n      mload(0x40)\n        /* \"#utility.yul\":345:370   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":333:335   */\n      0x20\n        /* \"#utility.yul\":318:336   */\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":535:562  uint public totalOwnerToken */\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Token&NFTStaking/Contract.sol\":470:496  address public owenerERC20 */\n    tag_5:\n      sload(0x02)\n      tag_38\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_38:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":545:577   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":527:578   */\n      dup2\n      mstore\n        /* \"#utility.yul\":515:517   */\n      0x20\n        /* \"#utility.yul\":500:518   */\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":470:496  address public owenerERC20 */\n      tag_36\n        /* \"#utility.yul\":381:584   */\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8189:8360  function onERC721Received(address,address,uint256,bytes calldata) external pure override returns (bytes4) {... */\n    tag_6:\n      tag_42\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      shl(0xe1, 0x0a85bd01)\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\n    tag_42:\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":1742:1775   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1724:1776   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1712:1714   */\n      0x20\n        /* \"#utility.yul\":1697:1715   */\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8189:8360  function onERC721Received(address,address,uint256,bytes calldata) external pure override returns (bytes4) {... */\n      tag_36\n        /* \"#utility.yul\":1580:1782   */\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6719:6826  function UpdateERC20 ( address _ERC20Address) public onlyOwner{... */\n    tag_7:\n      tag_30\n      tag_49\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_49:\n      tag_51\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":878:923  mapping (address => uint ) public OwnerTokens */\n    tag_8:\n      tag_34\n      tag_53\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_53:\n      mstore(0x20, 0x08)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3168:3437  function Deposit(uint256 _amount) public {... */\n    tag_9:\n      tag_30\n      tag_57\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_57:\n      tag_58\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":833:872  mapping (address => uint) public Reward */\n    tag_10:\n      tag_34\n      tag_60\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_60:\n      mstore(0x20, 0x07)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3632:4509  function Withdraw() public {... */\n    tag_11:\n      tag_30\n      tag_64\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_12:\n      tag_30\n      tag_66\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2713:2875  function Utilization() public view returns(uint256) {... */\n    tag_13:\n      tag_34\n      tag_68\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5689:6251  function calculateIntrest(address _to) public view returns(uint256){... */\n    tag_14:\n      tag_34\n      tag_71\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_71:\n      tag_72\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_15:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      jump(tag_38)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7361:7723  function DepositNFT(uint256 tokenIds,uint _rate) public {... */\n    tag_16:\n      tag_30\n      tag_78\n      calldatasize\n      0x04\n      tag_79\n      jump\t// in\n    tag_78:\n      tag_80\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":502:529  address public ERC20Address */\n    tag_17:\n      sload(0x03)\n      tag_38\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2300:2505  function AdminWithDrawToken(uint amount) public onlyOwner{... */\n    tag_18:\n      tag_30\n      tag_85\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_85:\n      tag_86\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":436:464  address public ERC721address */\n    tag_19:\n      sload(0x01)\n      tag_38\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1818:2108  function AdminAddToken(uint _amount) public onlyOwner{... */\n    tag_20:\n      tag_30\n      tag_91\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_91:\n      tag_92\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4702:5425  function showReward(address _to) public view returns(uint result)... */\n    tag_21:\n      tag_34\n      tag_94\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_94:\n      tag_95\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":929:976  mapping (address => StakerNFT ) public UserRate */\n    tag_22:\n      tag_97\n      tag_98\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_98:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      swap1\n      swap3\n      add\n      sload\n      swap1\n      swap2\n      swap1\n      0xff\n      and\n      dup4\n      jump\n    tag_97:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":2427:2452   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":2483:2485   */\n      0x20\n        /* \"#utility.yul\":2468:2486   */\n      dup5\n      add\n        /* \"#utility.yul\":2461:2495   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":2538:2552   */\n      iszero\n        /* \"#utility.yul\":2531:2553   */\n      iszero\n        /* \"#utility.yul\":2511:2529   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":2504:2554   */\n      mstore\n        /* \"#utility.yul\":2415:2417   */\n      0x60\n        /* \"#utility.yul\":2400:2418   */\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":929:976  mapping (address => StakerNFT ) public UserRate */\n      tag_36\n        /* \"#utility.yul\":2231:2560   */\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":785:827  mapping (address => Staker) public Details */\n    tag_23:\n      tag_97\n      tag_103\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_103:\n      mstore(0x20, 0x06)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      swap1\n      swap3\n      add\n      sload\n      swap1\n      swap2\n      swap1\n      0xff\n      and\n      dup4\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6433:6542  function UpdateERC721(address _ERC721address) public onlyOwner{... */\n    tag_24:\n      tag_30\n      tag_107\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_107:\n      tag_108\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_25:\n      tag_30\n      tag_110\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_110:\n      tag_111\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7008:7118  function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{... */\n    tag_26:\n      tag_30\n      tag_113\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_113:\n      tag_114\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7935:8184  function withdrawNFT(uint256 tokenIds) public {... */\n    tag_33:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8008:8018  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7999:8019  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7999:8007  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7999:8019  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7999:8025  UserRate[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7991:8052  require(UserRate[msg.sender].check,\"Please First Stake NFTs\") */\n      tag_116\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2767:2769   */\n      0x20\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7991:8052  require(UserRate[msg.sender].check,\"Please First Stake NFTs\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2749:2770   */\n      mstore\n        /* \"#utility.yul\":2806:2808   */\n      0x17\n        /* \"#utility.yul\":2786:2804   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2779:2809   */\n      mstore\n        /* \"#utility.yul\":2845:2870   */\n      0x506c65617365204669727374205374616b65204e465473000000000000000000\n        /* \"#utility.yul\":2825:2843   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2818:2871   */\n      mstore\n        /* \"#utility.yul\":2888:2906   */\n      0x64\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7991:8052  require(UserRate[msg.sender].check,\"Please First Stake NFTs\") */\n    tag_117:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_116:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8070:8083  ERC721address */\n      sload(0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8062:8140  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\") */\n      mload(0x40)\n      shl(0xe1, 0x5c46a7ef)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8070:8083  ERC721address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8062:8101  IERC721(ERC721address).safeTransferFrom */\n      0xb88d4fde\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8062:8140  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\") */\n      tag_119\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8110:8114  this */\n      address\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8117:8127  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8128:8136  tokenIds */\n      dup7\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8062:8140  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\") */\n      0x04\n      add\n      tag_120\n      jump\t// in\n    tag_119:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_121\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_121:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_123\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_123:\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8166:8176  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8157:8177  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8157:8165  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8157:8177  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":8150:8177  delete UserRate[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      0x02\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n      pop\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7935:8184  function withdrawNFT(uint256 tokenIds) public {... */\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6719:6826  function UpdateERC20 ( address _ERC20Address) public onlyOwner{... */\n    tag_51:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_126\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_127\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_126:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6791:6803  ERC20Address */\n      0x03\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6791:6819  ERC20Address = _ERC20Address */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6719:6826  function UpdateERC20 ( address _ERC20Address) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3168:3437  function Deposit(uint256 _amount) public {... */\n    tag_58:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3236:3246  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3228:3247  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3228:3235  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3228:3247  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3228:3253  Details[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3227:3253  !Details[msg.sender].check */\n      iszero\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3219:3278  require(!Details[msg.sender].check,\"Please First WithDraw\") */\n      tag_130\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3679:3681   */\n      0x20\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3219:3278  require(!Details[msg.sender].check,\"Please First WithDraw\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3661:3682   */\n      mstore\n        /* \"#utility.yul\":3718:3720   */\n      0x15\n        /* \"#utility.yul\":3698:3716   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3691:3721   */\n      mstore\n      shl(0x58, 0x506c65617365204669727374205769746844726177)\n        /* \"#utility.yul\":3737:3755   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3730:3781   */\n      mstore\n        /* \"#utility.yul\":3798:3816   */\n      0x64\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3219:3278  require(!Details[msg.sender].check,\"Please First WithDraw\") */\n      tag_117\n        /* \"#utility.yul\":3477:3822   */\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3219:3278  require(!Details[msg.sender].check,\"Please First WithDraw\") */\n    tag_130:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3310:3346  Staker(_amount,block.timestamp,true) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      dup3\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3325:3340  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3310:3346  Staker(_amount,block.timestamp,true) */\n      0x20\n      dup1\n      dup4\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3341:3345  true */\n      0x01\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3310:3346  Staker(_amount,block.timestamp,true) */\n      dup4\n      dup6\n      add\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3296:3306  msg.sender */\n      caller\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3288:3307  Details[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3288:3295  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3288:3307  Details[msg.sender] */\n      swap1\n      swap5\n      mstore\n      swap6\n      swap1\n      swap3\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3288:3346  Details[msg.sender] = Staker(_amount,block.timestamp,true) */\n      swap4\n      mload\n      dup5\n      sstore\n      swap2\n      mload\n      swap2\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      mload\n      0x02\n      swap1\n      swap2\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3363:3375  ERC20Address */\n      sload(0x03)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3356:3430  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount) */\n      tag_133\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3363:3375  ERC20Address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3414:3418  this */\n      address\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3310:3346  Staker(_amount,block.timestamp,true) */\n      dup5\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3356:3393  IERC20(ERC20Address).safeTransferFrom */\n      tag_134\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3356:3430  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount) */\n      jump\t// in\n    tag_133:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3168:3437  function Deposit(uint256 _amount) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3632:4509  function Withdraw() public {... */\n    tag_64:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3685:3695  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3677:3696  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3677:3684  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3677:3696  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3677:3702  Details[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3669:3724  require(Details[msg.sender].check,\"Please First Stake\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4029:4031   */\n      0x20\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3669:3724  require(Details[msg.sender].check,\"Please First Stake\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4011:4032   */\n      mstore\n        /* \"#utility.yul\":4068:4070   */\n      0x12\n        /* \"#utility.yul\":4048:4066   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4041:4071   */\n      mstore\n      shl(0x70, 0x506c65617365204669727374205374616b65)\n        /* \"#utility.yul\":4087:4105   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4080:4128   */\n      mstore\n        /* \"#utility.yul\":4145:4163   */\n      0x64\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3669:3724  require(Details[msg.sender].check,\"Please First Stake\") */\n      tag_117\n        /* \"#utility.yul\":3827:4169   */\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3669:3724  require(Details[msg.sender].check,\"Please First Stake\") */\n    tag_136:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3747:3757  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3738:3758  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3738:3746  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3738:3758  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3738:3764  UserRate[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3734:4499  if (UserRate[msg.sender].check){... */\n      iszero\n      tag_139\n      jumpi\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3801:3811  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3779:3790  uint amount */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3793:3812  Details[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3793:3800  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3793:3812  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3793:3822  Details[msg.sender].deposited */\n      sload\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3850:3878  calculateIntrest(msg.sender) */\n      tag_140\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3850:3866  calculateIntrest */\n      tag_72\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3850:3878  calculateIntrest(msg.sender) */\n      jump\t// in\n    tag_140:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3900:3913  ERC721address */\n      0x01\n      dup1\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3947:3957  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3900:3913  ERC721address */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3958:3978  UserRate[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3958:3966  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3958:3978  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3958:3986  UserRate[msg.sender].tokenId */\n      swap1\n      swap4\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3892:3990  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,UserRate[msg.sender].tokenId,\"\") */\n      swap3\n      mload\n      shl(0xe1, 0x5c46a7ef)\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3836:3878  uint newval = calculateIntrest(msg.sender) */\n      swap4\n      swap5\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3900:3913  ERC721address */\n      swap1\n      swap2\n      and\n      swap3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3892:3931  IERC721(ERC721address).safeTransferFrom */\n      0xb88d4fde\n      swap3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3892:3990  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,UserRate[msg.sender].tokenId,\"\") */\n      tag_141\n      swap3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3940:3944  this */\n      address\n      swap3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3947:3957  msg.sender */\n      swap1\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3958:3986  UserRate[msg.sender].tokenId */\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3892:3990  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,UserRate[msg.sender].tokenId,\"\") */\n      0x04\n      add\n      tag_120\n      jump\t// in\n    tag_141:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_142\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_142:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_144\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_144:\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4011:4023  ERC20Address */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n      swap2\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4004:4033  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap1\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4034:4044  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4046:4061  amount + newval */\n      tag_145\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4055:4061  newval */\n      dup5\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4046:4052  amount */\n      dup7\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4046:4061  amount + newval */\n      tag_146\n      jump\t// in\n    tag_145:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4004:4062  IERC20(ERC20Address).transfer(msg.sender, amount + newval) */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4631:4663   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4004:4062  IERC20(ERC20Address).transfer(msg.sender, amount + newval) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":4613:4664   */\n      mstore\n        /* \"#utility.yul\":4680:4698   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4673:4707   */\n      mstore\n        /* \"#utility.yul\":4586:4604   */\n      0x44\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4004:4062  IERC20(ERC20Address).transfer(msg.sender, amount + newval) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_150\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_150:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_151\n      swap2\n      swap1\n      tag_152\n      jump\t// in\n    tag_151:\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4088:4099  owenerERC20 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4076:4100  OwnerTokens[owenerERC20] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4076:4087  OwnerTokens */\n      0x08\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4076:4100  OwnerTokens[owenerERC20] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4076:4110  OwnerTokens[owenerERC20] -= newval */\n      dup1\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4104:4110  newval */\n      dup4\n      swap3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4076:4100  OwnerTokens[owenerERC20] */\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4076:4110  OwnerTokens[owenerERC20] -= newval */\n      tag_153\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4104:4110  newval */\n      dup5\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4076:4110  OwnerTokens[owenerERC20] -= newval */\n      tag_154\n      jump\t// in\n    tag_153:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4140:4150  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4131:4151  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4131:4139  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4131:4151  UserRate[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4124:4151  delete UserRate[msg.sender] */\n      dup4\n      dup2\n      sstore\n      0x01\n      dup1\n      dup3\n      add\n      dup6\n      swap1\n      sstore\n      0x02\n      swap2\n      dup3\n      add\n      dup1\n      sload\n      not(0xff)\n      swap1\n      dup2\n      and\n      swap1\n      swap2\n      sstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4172:4179  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4172:4191  Details[msg.sender] */\n      swap1\n      swap5\n      mstore\n      swap2\n      dup5\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4165:4191  delete Details[msg.sender] */\n      dup5\n      dup2\n      sstore\n      swap2\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      sstore\n      swap1\n      swap2\n      add\n      dup1\n      sload\n      swap1\n      swap2\n      and\n      swap1\n      sstore\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3734:4499  if (UserRate[msg.sender].check){... */\n      tag_155\n      swap1\n      pop\n      jump\n    tag_139:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4251:4261  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4229:4240  uint amount */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4243:4262  Details[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4243:4250  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4243:4262  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4243:4272  Details[msg.sender].deposited */\n      sload\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4300:4328  calculateIntrest(msg.sender) */\n      tag_156\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4300:4316  calculateIntrest */\n      tag_72\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4300:4328  calculateIntrest(msg.sender) */\n      jump\t// in\n    tag_156:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4349:4361  ERC20Address */\n      sload(0x03)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4286:4328  uint newval = calculateIntrest(msg.sender) */\n      swap1\n      swap2\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4349:4361  ERC20Address */\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4342:4371  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4372:4382  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4384:4399  amount + newval */\n      tag_157\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4286:4328  uint newval = calculateIntrest(msg.sender) */\n      dup5\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4384:4390  amount */\n      dup7\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4384:4399  amount + newval */\n      tag_146\n      jump\t// in\n    tag_157:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4342:4400  IERC20(ERC20Address).transfer(msg.sender, amount + newval) */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4631:4663   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4342:4400  IERC20(ERC20Address).transfer(msg.sender, amount + newval) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":4613:4664   */\n      mstore\n        /* \"#utility.yul\":4680:4698   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4673:4707   */\n      mstore\n        /* \"#utility.yul\":4586:4604   */\n      0x44\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4342:4400  IERC20(ERC20Address).transfer(msg.sender, amount + newval) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_160\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_160:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_161\n      swap2\n      swap1\n      tag_152\n      jump\t// in\n    tag_161:\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4426:4437  owenerERC20 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4414:4438  OwnerTokens[owenerERC20] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4414:4425  OwnerTokens */\n      0x08\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4414:4438  OwnerTokens[owenerERC20] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4414:4448  OwnerTokens[owenerERC20] -= newval */\n      dup1\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4442:4448  newval */\n      dup4\n      swap3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4414:4438  OwnerTokens[owenerERC20] */\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4414:4448  OwnerTokens[owenerERC20] -= newval */\n      tag_162\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4442:4448  newval */\n      dup5\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4414:4448  OwnerTokens[owenerERC20] -= newval */\n      tag_154\n      jump\t// in\n    tag_162:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4477:4487  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4469:4488  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4469:4476  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4469:4488  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4462:4488  delete Details[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      0x02\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3734:4499  if (UserRate[msg.sender].check){... */\n    tag_155:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":3632:4509  function Withdraw() public {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_66:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_164\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_127\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_164:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_155\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_167\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2713:2875  function Utilization() public view returns(uint256) {... */\n    tag_68:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2826:2841  totalOwnerToken */\n      sload(0x04)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2806:2817  owenerERC20 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2756:2763  uint256 */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2794:2818  OwnerTokens[owenerERC20] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2794:2805  OwnerTokens */\n      0x08\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2794:2818  OwnerTokens[owenerERC20] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2756:2763  uint256 */\n      swap1\n      swap2\n      dup3\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2794:2824  OwnerTokens[owenerERC20] * 100 */\n      tag_169\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2821:2824  100 */\n      0x64\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2794:2824  OwnerTokens[owenerERC20] * 100 */\n      tag_170\n      jump\t// in\n    tag_169:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2793:2841  (OwnerTokens[owenerERC20] * 100)/totalOwnerToken */\n      tag_171\n      swap2\n      swap1\n      tag_172\n      jump\t// in\n    tag_171:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2775:2841  uint Persentage = (OwnerTokens[owenerERC20] * 100)/totalOwnerToken */\n      swap3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2713:2875  function Utilization() public view returns(uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5689:6251  function calculateIntrest(address _to) public view returns(uint256){... */\n    tag_72:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5770:5783  UserRate[_to] */\n      dup2\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5748:5755  uint256 */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5770:5783  UserRate[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5770:5778  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5770:5783  UserRate[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5770:5789  UserRate[_to].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5766:6245  if (UserRate[_to].check)... */\n      iszero\n      tag_174\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5902:5914  Details[_to] */\n      dup3\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5813:5827  uint RewardEst */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5902:5914  Details[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5902:5909  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5902:5914  Details[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5902:5924  Details[_to].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5926:5928  60 */\n      0x3c\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5884:5924  block.timestamp - Details[_to].timestake */\n      tag_175\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5884:5899  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5884:5924  block.timestamp - Details[_to].timestake */\n      tag_154\n      jump\t// in\n    tag_175:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5883:5928  (block.timestamp - Details[_to].timestake)/60 */\n      tag_176\n      swap2\n      swap1\n      tag_172\n      jump\t// in\n    tag_176:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5856:5869  UserRate[_to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5856:5864  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5856:5869  UserRate[_to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5856:5878  UserRate[_to].userRate */\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5831:5838  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5831:5843  Details[_to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5831:5853  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5831:5878  Details[_to].deposited * UserRate[_to].userRate */\n      tag_177\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5856:5878  UserRate[_to].userRate */\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5831:5878  Details[_to].deposited * UserRate[_to].userRate */\n      tag_170\n      jump\t// in\n    tag_177:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5830:5929  (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      tag_178\n      swap2\n      swap1\n      tag_170\n      jump\t// in\n    tag_178:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5813:5929  uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      swap1\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5943:5959  uint TotalReward */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5962:5977  RewardEst / 100 */\n      tag_179\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5974:5977  100 */\n      0x64\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5813:5929  uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      dup4\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5962:5977  RewardEst / 100 */\n      tag_172\n      jump\t// in\n    tag_179:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5943:5977  uint TotalReward = RewardEst / 100 */\n      swap5\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5689:6251  function calculateIntrest(address _to) public view returns(uint256){... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5766:6245  if (UserRate[_to].check)... */\n    tag_174:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6127:6139  Details[_to] */\n      dup3\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6056:6070  uint RewardEst */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6127:6139  Details[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6127:6134  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6127:6139  Details[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6127:6149  Details[_to].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6151:6153  60 */\n      0x3c\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6109:6149  block.timestamp - Details[_to].timestake */\n      tag_181\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6109:6124  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6109:6149  block.timestamp - Details[_to].timestake */\n      tag_154\n      jump\t// in\n    tag_181:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6108:6153  (block.timestamp - Details[_to].timestake)/60 */\n      tag_182\n      swap2\n      swap1\n      tag_172\n      jump\t// in\n    tag_182:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6099:6103  rate */\n      sload(0x05)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6074:6086  Details[_to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6074:6081  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6074:6086  Details[_to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6074:6096  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6074:6103  Details[_to].deposited * rate */\n      tag_177\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6099:6103  rate */\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6074:6103  Details[_to].deposited * rate */\n      tag_170\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5766:6245  if (UserRate[_to].check)... */\n    tag_180:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5689:6251  function calculateIntrest(address _to) public view returns(uint256){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7361:7723  function DepositNFT(uint256 tokenIds,uint _rate) public {... */\n    tag_80:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7443:7453  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7435:7454  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7435:7442  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7435:7454  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7435:7460  Details[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7427:7484  require(Details[msg.sender].check,\"First Deposit Tokens\") */\n      tag_188\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5727:5729   */\n      0x20\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7427:7484  require(Details[msg.sender].check,\"First Deposit Tokens\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5709:5730   */\n      mstore\n        /* \"#utility.yul\":5766:5768   */\n      0x14\n        /* \"#utility.yul\":5746:5764   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5739:5769   */\n      mstore\n      shl(0x60, 0x4669727374204465706f73697420546f6b656e73)\n        /* \"#utility.yul\":5785:5803   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5778:5828   */\n      mstore\n        /* \"#utility.yul\":5845:5863   */\n      0x64\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7427:7484  require(Details[msg.sender].check,\"First Deposit Tokens\") */\n      tag_117\n        /* \"#utility.yul\":5525:5869   */\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7427:7484  require(Details[msg.sender].check,\"First Deposit Tokens\") */\n    tag_188:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7511:7521  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7502:7522  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7502:7510  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7502:7522  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7502:7528  UserRate[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7494:7565  require(UserRate[msg.sender].check,\"Please Unstake your deposited NFT\") */\n      tag_191\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6076:6078   */\n      0x20\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7494:7565  require(UserRate[msg.sender].check,\"Please Unstake your deposited NFT\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6058:6079   */\n      mstore\n        /* \"#utility.yul\":6115:6117   */\n      0x21\n        /* \"#utility.yul\":6095:6113   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6088:6118   */\n      mstore\n        /* \"#utility.yul\":6154:6188   */\n      0x506c6561736520556e7374616b6520796f7572206465706f7369746564204e46\n        /* \"#utility.yul\":6134:6152   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6127:6189   */\n      mstore\n      shl(0xfa, 0x15)\n        /* \"#utility.yul\":6205:6223   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6198:6229   */\n      mstore\n        /* \"#utility.yul\":6246:6265   */\n      0x84\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7494:7565  require(UserRate[msg.sender].check,\"Please Unstake your deposited NFT\") */\n      tag_117\n        /* \"#utility.yul\":5874:6271   */\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7494:7565  require(UserRate[msg.sender].check,\"Please Unstake your deposited NFT\") */\n    tag_191:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7598:7628  StakerNFT(_rate,tokenIds,true) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      dup3\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      add\n      dup6\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7623:7627  true */\n      0x01\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7598:7628  StakerNFT(_rate,tokenIds,true) */\n      dup4\n      dup6\n      add\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7584:7594  msg.sender */\n      caller\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7575:7595  UserRate[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7575:7583  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7575:7595  UserRate[msg.sender] */\n      swap1\n      swap6\n      mstore\n      swap4\n      dup7\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7575:7628  UserRate[msg.sender] = StakerNFT(_rate,tokenIds,true) */\n      swap5\n      mload\n      dup6\n      sstore\n      swap2\n      mload\n      dup5\n      dup3\n      add\n      sstore\n      swap1\n      mload\n      0x02\n      swap1\n      swap4\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap4\n      iszero\n      iszero\n      swap4\n      swap1\n      swap4\n      or\n      swap1\n      swap3\n      sstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7647:7660  ERC721address */\n      swap1\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7639:7716  IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\") */\n      swap2\n      mload\n      shl(0xe1, 0x5c46a7ef)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7647:7660  ERC721address */\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7639:7678  IERC721(ERC721address).safeTransferFrom */\n      0xb88d4fde\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7639:7716  IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\") */\n      tag_194\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7698:7702  this */\n      address\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7598:7628  StakerNFT(_rate,tokenIds,true) */\n      dup8\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7639:7716  IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\") */\n      0x04\n      add\n      tag_120\n      jump\t// in\n    tag_194:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_195\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_195:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_197\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_197:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7361:7723  function DepositNFT(uint256 tokenIds,uint _rate) public {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2300:2505  function AdminWithDrawToken(uint amount) public onlyOwner{... */\n    tag_86:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_199\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_127\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_199:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2379:2389  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2367:2390  OwnerTokens[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2367:2378  OwnerTokens */\n      0x08\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2367:2390  OwnerTokens[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2367:2400  OwnerTokens[msg.sender] -= amount */\n      dup1\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2394:2400  amount */\n      dup4\n      swap3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2367:2390  OwnerTokens[msg.sender] */\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2367:2400  OwnerTokens[msg.sender] -= amount */\n      tag_201\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2394:2400  amount */\n      dup5\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2367:2400  OwnerTokens[msg.sender] -= amount */\n      tag_154\n      jump\t// in\n    tag_201:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2429:2435  amount */\n      dup1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2410:2425  totalOwnerToken */\n      0x04\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2410:2435  totalOwnerToken -= amount */\n      dup3\n      dup3\n      sload\n      tag_202\n      swap2\n      swap1\n      tag_154\n      jump\t// in\n    tag_202:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2452:2464  ERC20Address */\n      sload(0x03)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2445:2498  IERC20(ERC20Address).safeTransfer(msg.sender, amount) */\n      tag_133\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2452:2464  ERC20Address */\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2479:2489  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2491:2497  amount */\n      dup4\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2445:2478  IERC20(ERC20Address).safeTransfer */\n      tag_204\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2445:2498  IERC20(ERC20Address).safeTransfer(msg.sender, amount) */\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1818:2108  function AdminAddToken(uint _amount) public onlyOwner{... */\n    tag_92:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_206\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_127\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_206:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1901:1912  owenerERC20 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1889:1899  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1889:1912  msg.sender==owenerERC20 */\n      eq\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1881:1939  require(msg.sender==owenerERC20,\"Only Owner can transfer\") */\n      tag_208\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6478:6480   */\n      0x20\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1881:1939  require(msg.sender==owenerERC20,\"Only Owner can transfer\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6460:6481   */\n      mstore\n        /* \"#utility.yul\":6517:6519   */\n      0x17\n        /* \"#utility.yul\":6497:6515   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6490:6520   */\n      mstore\n        /* \"#utility.yul\":6556:6581   */\n      0x4f6e6c79204f776e65722063616e207472616e73666572000000000000000000\n        /* \"#utility.yul\":6536:6554   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6529:6582   */\n      mstore\n        /* \"#utility.yul\":6599:6617   */\n      0x64\n      add\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1881:1939  require(msg.sender==owenerERC20,\"Only Owner can transfer\") */\n      tag_117\n        /* \"#utility.yul\":6276:6623   */\n      jump\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1881:1939  require(msg.sender==owenerERC20,\"Only Owner can transfer\") */\n    tag_208:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1961:1971  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1949:1972  OwnerTokens[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1949:1960  OwnerTokens */\n      0x08\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1949:1972  OwnerTokens[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1949:1982  OwnerTokens[msg.sender] +=_amount */\n      dup1\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1975:1982  _amount */\n      dup4\n      swap3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1949:1972  OwnerTokens[msg.sender] */\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1949:1982  OwnerTokens[msg.sender] +=_amount */\n      tag_211\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1975:1982  _amount */\n      dup5\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1949:1982  OwnerTokens[msg.sender] +=_amount */\n      tag_146\n      jump\t// in\n    tag_211:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2011:2018  _amount */\n      dup1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1992:2007  totalOwnerToken */\n      0x04\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":1992:2018  totalOwnerToken += _amount */\n      dup3\n      dup3\n      sload\n      tag_212\n      swap2\n      swap1\n      tag_146\n      jump\t// in\n    tag_212:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2035:2047  ERC20Address */\n      sload(0x03)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2028:2101  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount) */\n      tag_133\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2035:2047  ERC20Address */\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2066:2076  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2086:2090  this */\n      address\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2093:2100  _amount */\n      dup5\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2028:2065  IERC20(ERC20Address).safeTransferFrom */\n      tag_134\n        /* \"contracts/Token&NFTStaking/Contract.sol\":2028:2101  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount) */\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4702:5425  function showReward(address _to) public view returns(uint result)... */\n    tag_95:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4786:4799  UserRate[_to] */\n      dup2\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4755:4766  uint result */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4786:4799  UserRate[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4786:4794  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4786:4799  UserRate[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4786:4805  UserRate[_to].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4782:5410  if (UserRate[_to].check)... */\n      iszero\n      tag_215\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4918:4930  Details[_to] */\n      dup3\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4829:4843  uint RewardEst */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4918:4930  Details[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4918:4925  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4918:4930  Details[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4918:4940  Details[_to].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4942:4944  60 */\n      0x3c\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4900:4940  block.timestamp - Details[_to].timestake */\n      tag_216\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4900:4915  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4900:4940  block.timestamp - Details[_to].timestake */\n      tag_154\n      jump\t// in\n    tag_216:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4899:4944  (block.timestamp - Details[_to].timestake)/60 */\n      tag_217\n      swap2\n      swap1\n      tag_172\n      jump\t// in\n    tag_217:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4872:4885  UserRate[_to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4872:4880  UserRate */\n      0x09\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4872:4885  UserRate[_to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4872:4894  UserRate[_to].userRate */\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4847:4854  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4847:4859  Details[_to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4847:4869  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4847:4894  Details[_to].deposited * UserRate[_to].userRate */\n      tag_218\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4872:4894  UserRate[_to].userRate */\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4847:4894  Details[_to].deposited * UserRate[_to].userRate */\n      tag_170\n      jump\t// in\n    tag_218:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4846:4945  (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      tag_219\n      swap2\n      swap1\n      tag_170\n      jump\t// in\n    tag_219:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4829:4945  uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      swap1\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4959:4975  uint TotalReward */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4978:4993  RewardEst / 100 */\n      tag_220\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4990:4993  100 */\n      0x64\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4829:4945  uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      dup4\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4978:4993  RewardEst / 100 */\n      tag_172\n      jump\t// in\n    tag_220:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5030:5042  Details[_to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5030:5037  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5030:5042  Details[_to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5030:5052  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4959:4993  uint TotalReward = RewardEst / 100 */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5016:5052  TotalReward + Details[_to].deposited */\n      tag_221\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4959:4993  uint TotalReward = RewardEst / 100 */\n      dup3\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5016:5052  TotalReward + Details[_to].deposited */\n      tag_146\n      jump\t// in\n    tag_221:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5007:5052  result = TotalReward + Details[_to].deposited */\n      swap3\n      pop\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5073:5099  result/1000000000000000000 */\n      tag_179\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5080:5099  1000000000000000000 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5007:5052  result = TotalReward + Details[_to].deposited */\n      dup5\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5073:5099  result/1000000000000000000 */\n      tag_172\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":4782:5410  if (UserRate[_to].check)... */\n    tag_215:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5218:5230  Details[_to] */\n      dup3\n      and\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5147:5161  uint RewardEst */\n      0x00\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5218:5230  Details[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5218:5225  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5218:5230  Details[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5218:5240  Details[_to].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5242:5244  60 */\n      0x3c\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5200:5240  block.timestamp - Details[_to].timestake */\n      tag_224\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5200:5215  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5200:5240  block.timestamp - Details[_to].timestake */\n      tag_154\n      jump\t// in\n    tag_224:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5199:5244  (block.timestamp - Details[_to].timestake)/60 */\n      tag_225\n      swap2\n      swap1\n      tag_172\n      jump\t// in\n    tag_225:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5190:5194  rate */\n      sload(0x05)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5165:5177  Details[_to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5165:5172  Details */\n      0x06\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5165:5177  Details[_to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5165:5187  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5165:5194  Details[_to].deposited * rate */\n      tag_218\n      swap2\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5190:5194  rate */\n      swap1\n        /* \"contracts/Token&NFTStaking/Contract.sol\":5165:5194  Details[_to].deposited * rate */\n      tag_170\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6433:6542  function UpdateERC721(address _ERC721address) public onlyOwner{... */\n    tag_108:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_232\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_127\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_232:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6505:6518  ERC721address */\n      0x01\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6505:6535  ERC721address = _ERC721address */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":6433:6542  function UpdateERC721(address _ERC721address) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_111:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_235\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_127\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_235:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_237\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6830:6832   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6812:6833   */\n      mstore\n        /* \"#utility.yul\":6869:6871   */\n      0x26\n        /* \"#utility.yul\":6849:6867   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6842:6872   */\n      mstore\n        /* \"#utility.yul\":6908:6942   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":6888:6906   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6881:6943   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":6959:6977   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6952:6988   */\n      mstore\n        /* \"#utility.yul\":7005:7024   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_117\n        /* \"#utility.yul\":6628:7030   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_237:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_133\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_167\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7008:7118  function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{... */\n    tag_114:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_242\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_127\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_242:\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7089:7093  rate */\n      0x05\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7089:7111  rate = _ratePersentage */\n      sstore\n        /* \"contracts/Token&NFTStaking/Contract.sol\":7008:7118  function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_127:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_155\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7237:7239   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7219:7240   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":7256:7274   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7249:7279   */\n      mstore\n        /* \"#utility.yul\":7315:7349   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":7295:7313   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7288:7350   */\n      mstore\n        /* \"#utility.yul\":7367:7385   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":7035:7391   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n    tag_134:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7654:7669   */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":7636:7670   */\n      mstore\n        /* \"#utility.yul\":7706:7721   */\n      dup4\n      and\n        /* \"#utility.yul\":7686:7704   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7679:7722   */\n      mstore\n        /* \"#utility.yul\":7738:7756   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":7731:7765   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_252\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1132:1137  token */\n      dup6\n      swap1\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1162:1189  token.transferFrom.selector */\n      swap1\n        /* \"#utility.yul\":7571:7589   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n    tag_253:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1131  _callOptionalReturn */\n      tag_255\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_252:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_167:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n    tag_204:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4631:4663   */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4613:4664   */\n      mstore\n        /* \"#utility.yul\":4680:4698   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":4673:4707   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_258\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":895:900  token */\n      dup5\n      swap1\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":925:948  token.transfer.selector */\n      swap1\n        /* \"#utility.yul\":4586:4604   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      tag_253\n        /* \"#utility.yul\":4439:4713   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n    tag_258:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_255:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4189  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_262\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4220:4224  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4200:4205  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4219  address(token).functionCall */\n      and\n      tag_263\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_262:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4292  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4261  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4296  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n      tag_258\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4370:4380  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4359:4389  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_265\n      swap2\n      swap1\n      tag_152\n      jump\t// in\n    tag_265:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_258\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7978:7980   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7960:7981   */\n      mstore\n        /* \"#utility.yul\":8017:8019   */\n      0x2a\n        /* \"#utility.yul\":7997:8015   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7990:8020   */\n      mstore\n        /* \"#utility.yul\":8056:8090   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":8036:8054   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8029:8091   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":8107:8125   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8100:8140   */\n      mstore\n        /* \"#utility.yul\":8157:8176   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_117\n        /* \"#utility.yul\":7776:8182   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n    tag_263:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_179\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4059:4065  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4067:4071  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4073:4074  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4076:4088  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5241:5253  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5255:5278  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5288  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5293  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5301:5306  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5308:5312  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5313  target.call{value: value}(data) */\n      mload(0x40)\n      tag_276\n      swap2\n      swap1\n      tag_277\n      jump\t// in\n    tag_276:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_280\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_279)\n    tag_280:\n      0x60\n      swap2\n      pop\n    tag_279:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5240:5313  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_281\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5357:5363  target */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5365:5372  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5374:5384  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5386:5398  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5356  verifyCallResultFromTarget */\n      tag_282\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_281:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5323:5399  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_282:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7646:7658  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7674:7681  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n      iszero\n      tag_284\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7711  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7718  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7722:7723  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7723  returndata.length == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n      tag_288\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_288\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9338:9340   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9320:9341   */\n      mstore\n        /* \"#utility.yul\":9377:9379   */\n      0x1d\n        /* \"#utility.yul\":9357:9375   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9350:9380   */\n      mstore\n        /* \"#utility.yul\":9416:9447   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":9396:9414   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9389:9448   */\n      mstore\n        /* \"#utility.yul\":9465:9483   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_117\n        /* \"#utility.yul\":9136:9489   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n    tag_288:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8003:8013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7996:8013  return returndata */\n      jump(tag_179)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n    tag_284:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      tag_179\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8052:8062  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8076  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8792  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8796  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n      tag_296\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9003:9013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8997:9014  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9059:9074  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9046:9056  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9042:9044  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9038:9057  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9031:9075  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n    tag_296:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9126:9138  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9119:9139  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_117\n      swap2\n      swap1\n      tag_299\n      jump\t// in\n        /* \"#utility.yul\":14:194   */\n    tag_32:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_305\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_305:\n      pop\n        /* \"#utility.yul\":165:188   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":14:194   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":589:762   */\n    tag_300:\n        /* \"#utility.yul\":657:677   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":706:737   */\n      dup2\n      and\n        /* \"#utility.yul\":696:738   */\n      dup2\n      eq\n        /* \"#utility.yul\":686:756   */\n      tag_180\n      jumpi\n        /* \"#utility.yul\":752:753   */\n      0x00\n        /* \"#utility.yul\":749:750   */\n      dup1\n        /* \"#utility.yul\":742:754   */\n      revert\n        /* \"#utility.yul\":767:1575   */\n    tag_44:\n        /* \"#utility.yul\":864:870   */\n      0x00\n        /* \"#utility.yul\":872:878   */\n      dup1\n        /* \"#utility.yul\":880:886   */\n      0x00\n        /* \"#utility.yul\":888:894   */\n      dup1\n        /* \"#utility.yul\":896:902   */\n      0x00\n        /* \"#utility.yul\":949:952   */\n      0x80\n        /* \"#utility.yul\":937:946   */\n      dup7\n        /* \"#utility.yul\":928:935   */\n      dup9\n        /* \"#utility.yul\":924:947   */\n      sub\n        /* \"#utility.yul\":920:953   */\n      slt\n        /* \"#utility.yul\":917:970   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":966:967   */\n      0x00\n        /* \"#utility.yul\":963:964   */\n      dup1\n        /* \"#utility.yul\":956:968   */\n      revert\n        /* \"#utility.yul\":917:970   */\n    tag_311:\n        /* \"#utility.yul\":989:1018   */\n      tag_312\n        /* \"#utility.yul\":1008:1017   */\n      dup7\n        /* \"#utility.yul\":989:1018   */\n      tag_300\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":979:1018   */\n      swap5\n      pop\n        /* \"#utility.yul\":1037:1075   */\n      tag_313\n        /* \"#utility.yul\":1071:1073   */\n      0x20\n        /* \"#utility.yul\":1060:1069   */\n      dup8\n        /* \"#utility.yul\":1056:1074   */\n      add\n        /* \"#utility.yul\":1037:1075   */\n      tag_300\n      jump\t// in\n    tag_313:\n        /* \"#utility.yul\":1027:1075   */\n      swap4\n      pop\n        /* \"#utility.yul\":1122:1124   */\n      0x40\n        /* \"#utility.yul\":1111:1120   */\n      dup7\n        /* \"#utility.yul\":1107:1125   */\n      add\n        /* \"#utility.yul\":1094:1126   */\n      calldataload\n        /* \"#utility.yul\":1084:1126   */\n      swap3\n      pop\n        /* \"#utility.yul\":1177:1179   */\n      0x60\n        /* \"#utility.yul\":1166:1175   */\n      dup7\n        /* \"#utility.yul\":1162:1180   */\n      add\n        /* \"#utility.yul\":1149:1181   */\n      calldataload\n        /* \"#utility.yul\":1200:1218   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1241:1243   */\n      dup1\n        /* \"#utility.yul\":1233:1239   */\n      dup3\n        /* \"#utility.yul\":1230:1244   */\n      gt\n        /* \"#utility.yul\":1227:1261   */\n      iszero\n      tag_314\n      jumpi\n        /* \"#utility.yul\":1257:1258   */\n      0x00\n        /* \"#utility.yul\":1254:1255   */\n      dup1\n        /* \"#utility.yul\":1247:1259   */\n      revert\n        /* \"#utility.yul\":1227:1261   */\n    tag_314:\n        /* \"#utility.yul\":1295:1301   */\n      dup2\n        /* \"#utility.yul\":1284:1293   */\n      dup9\n        /* \"#utility.yul\":1280:1302   */\n      add\n        /* \"#utility.yul\":1270:1302   */\n      swap2\n      pop\n        /* \"#utility.yul\":1340:1347   */\n      dup9\n        /* \"#utility.yul\":1333:1337   */\n      0x1f\n        /* \"#utility.yul\":1329:1331   */\n      dup4\n        /* \"#utility.yul\":1325:1338   */\n      add\n        /* \"#utility.yul\":1321:1348   */\n      slt\n        /* \"#utility.yul\":1311:1366   */\n      tag_315\n      jumpi\n        /* \"#utility.yul\":1362:1363   */\n      0x00\n        /* \"#utility.yul\":1359:1360   */\n      dup1\n        /* \"#utility.yul\":1352:1364   */\n      revert\n        /* \"#utility.yul\":1311:1366   */\n    tag_315:\n        /* \"#utility.yul\":1402:1404   */\n      dup2\n        /* \"#utility.yul\":1389:1405   */\n      calldataload\n        /* \"#utility.yul\":1428:1430   */\n      dup2\n        /* \"#utility.yul\":1420:1426   */\n      dup2\n        /* \"#utility.yul\":1417:1431   */\n      gt\n        /* \"#utility.yul\":1414:1448   */\n      iszero\n      tag_316\n      jumpi\n        /* \"#utility.yul\":1444:1445   */\n      0x00\n        /* \"#utility.yul\":1441:1442   */\n      dup1\n        /* \"#utility.yul\":1434:1446   */\n      revert\n        /* \"#utility.yul\":1414:1448   */\n    tag_316:\n        /* \"#utility.yul\":1489:1496   */\n      dup10\n        /* \"#utility.yul\":1484:1486   */\n      0x20\n        /* \"#utility.yul\":1475:1481   */\n      dup3\n        /* \"#utility.yul\":1471:1473   */\n      dup6\n        /* \"#utility.yul\":1467:1482   */\n      add\n        /* \"#utility.yul\":1463:1487   */\n      add\n        /* \"#utility.yul\":1460:1497   */\n      gt\n        /* \"#utility.yul\":1457:1514   */\n      iszero\n      tag_317\n      jumpi\n        /* \"#utility.yul\":1510:1511   */\n      0x00\n        /* \"#utility.yul\":1507:1508   */\n      dup1\n        /* \"#utility.yul\":1500:1512   */\n      revert\n        /* \"#utility.yul\":1457:1514   */\n    tag_317:\n        /* \"#utility.yul\":767:1575   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      pop\n        /* \"#utility.yul\":1541:1543   */\n      0x20\n        /* \"#utility.yul\":1533:1544   */\n      add\n      swap5\n        /* \"#utility.yul\":1563:1569   */\n      swap4\n        /* \"#utility.yul\":767:1575   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1787:1973   */\n    tag_50:\n        /* \"#utility.yul\":1846:1852   */\n      0x00\n        /* \"#utility.yul\":1899:1901   */\n      0x20\n        /* \"#utility.yul\":1887:1896   */\n      dup3\n        /* \"#utility.yul\":1878:1885   */\n      dup5\n        /* \"#utility.yul\":1874:1897   */\n      sub\n        /* \"#utility.yul\":1870:1902   */\n      slt\n        /* \"#utility.yul\":1867:1919   */\n      iszero\n      tag_320\n      jumpi\n        /* \"#utility.yul\":1915:1916   */\n      0x00\n        /* \"#utility.yul\":1912:1913   */\n      dup1\n        /* \"#utility.yul\":1905:1917   */\n      revert\n        /* \"#utility.yul\":1867:1919   */\n    tag_320:\n        /* \"#utility.yul\":1938:1967   */\n      tag_321\n        /* \"#utility.yul\":1957:1966   */\n      dup3\n        /* \"#utility.yul\":1938:1967   */\n      tag_300\n      jump\t// in\n    tag_321:\n        /* \"#utility.yul\":1928:1967   */\n      swap4\n        /* \"#utility.yul\":1787:1973   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1978:2226   */\n    tag_79:\n        /* \"#utility.yul\":2046:2052   */\n      0x00\n        /* \"#utility.yul\":2054:2060   */\n      dup1\n        /* \"#utility.yul\":2107:2109   */\n      0x40\n        /* \"#utility.yul\":2095:2104   */\n      dup4\n        /* \"#utility.yul\":2086:2093   */\n      dup6\n        /* \"#utility.yul\":2082:2105   */\n      sub\n        /* \"#utility.yul\":2078:2110   */\n      slt\n        /* \"#utility.yul\":2075:2127   */\n      iszero\n      tag_323\n      jumpi\n        /* \"#utility.yul\":2123:2124   */\n      0x00\n        /* \"#utility.yul\":2120:2121   */\n      dup1\n        /* \"#utility.yul\":2113:2125   */\n      revert\n        /* \"#utility.yul\":2075:2127   */\n    tag_323:\n      pop\n      pop\n        /* \"#utility.yul\":2146:2169   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":2216:2218   */\n      0x20\n        /* \"#utility.yul\":2201:2219   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2188:2220   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1978:2226   */\n      jump\t// out\n        /* \"#utility.yul\":2917:3472   */\n    tag_120:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3240:3255   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":3222:3256   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3292:3307   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":3287:3289   */\n      0x20\n        /* \"#utility.yul\":3272:3290   */\n      dup3\n      add\n        /* \"#utility.yul\":3265:3308   */\n      mstore\n        /* \"#utility.yul\":3339:3341   */\n      0x40\n        /* \"#utility.yul\":3324:3342   */\n      dup2\n      add\n        /* \"#utility.yul\":3317:3351   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":3387:3390   */\n      0x80\n        /* \"#utility.yul\":3382:3384   */\n      0x60\n        /* \"#utility.yul\":3367:3385   */\n      dup3\n      add\n        /* \"#utility.yul\":3360:3391   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3165:3169   */\n      0x00\n        /* \"#utility.yul\":3407:3426   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3400:3430   */\n      mstore\n        /* \"#utility.yul\":3202:3205   */\n      0xa0\n        /* \"#utility.yul\":3447:3466   */\n      add\n      swap1\n        /* \"#utility.yul\":2917:3472   */\n      jump\t// out\n        /* \"#utility.yul\":4174:4301   */\n    tag_301:\n        /* \"#utility.yul\":4235:4245   */\n      0x4e487b71\n        /* \"#utility.yul\":4230:4233   */\n      0xe0\n        /* \"#utility.yul\":4226:4246   */\n      shl\n        /* \"#utility.yul\":4223:4224   */\n      0x00\n        /* \"#utility.yul\":4216:4247   */\n      mstore\n        /* \"#utility.yul\":4266:4270   */\n      0x11\n        /* \"#utility.yul\":4263:4264   */\n      0x04\n        /* \"#utility.yul\":4256:4271   */\n      mstore\n        /* \"#utility.yul\":4290:4294   */\n      0x24\n        /* \"#utility.yul\":4287:4288   */\n      0x00\n        /* \"#utility.yul\":4280:4295   */\n      revert\n        /* \"#utility.yul\":4306:4434   */\n    tag_146:\n        /* \"#utility.yul\":4346:4349   */\n      0x00\n        /* \"#utility.yul\":4377:4378   */\n      dup3\n        /* \"#utility.yul\":4373:4379   */\n      not\n        /* \"#utility.yul\":4370:4371   */\n      dup3\n        /* \"#utility.yul\":4367:4380   */\n      gt\n        /* \"#utility.yul\":4364:4403   */\n      iszero\n      tag_332\n      jumpi\n        /* \"#utility.yul\":4383:4401   */\n      tag_332\n      tag_301\n      jump\t// in\n    tag_332:\n      pop\n        /* \"#utility.yul\":4419:4428   */\n      add\n      swap1\n        /* \"#utility.yul\":4306:4434   */\n      jump\t// out\n        /* \"#utility.yul\":4718:4995   */\n    tag_152:\n        /* \"#utility.yul\":4785:4791   */\n      0x00\n        /* \"#utility.yul\":4838:4840   */\n      0x20\n        /* \"#utility.yul\":4826:4835   */\n      dup3\n        /* \"#utility.yul\":4817:4824   */\n      dup5\n        /* \"#utility.yul\":4813:4836   */\n      sub\n        /* \"#utility.yul\":4809:4841   */\n      slt\n        /* \"#utility.yul\":4806:4858   */\n      iszero\n      tag_335\n      jumpi\n        /* \"#utility.yul\":4854:4855   */\n      0x00\n        /* \"#utility.yul\":4851:4852   */\n      dup1\n        /* \"#utility.yul\":4844:4856   */\n      revert\n        /* \"#utility.yul\":4806:4858   */\n    tag_335:\n        /* \"#utility.yul\":4886:4895   */\n      dup2\n        /* \"#utility.yul\":4880:4896   */\n      mload\n        /* \"#utility.yul\":4939:4944   */\n      dup1\n        /* \"#utility.yul\":4932:4945   */\n      iszero\n        /* \"#utility.yul\":4925:4946   */\n      iszero\n        /* \"#utility.yul\":4918:4923   */\n      dup2\n        /* \"#utility.yul\":4915:4947   */\n      eq\n        /* \"#utility.yul\":4905:4965   */\n      tag_321\n      jumpi\n        /* \"#utility.yul\":4961:4962   */\n      0x00\n        /* \"#utility.yul\":4958:4959   */\n      dup1\n        /* \"#utility.yul\":4951:4963   */\n      revert\n        /* \"#utility.yul\":5000:5125   */\n    tag_154:\n        /* \"#utility.yul\":5040:5044   */\n      0x00\n        /* \"#utility.yul\":5068:5069   */\n      dup3\n        /* \"#utility.yul\":5065:5066   */\n      dup3\n        /* \"#utility.yul\":5062:5070   */\n      lt\n        /* \"#utility.yul\":5059:5093   */\n      iszero\n      tag_339\n      jumpi\n        /* \"#utility.yul\":5073:5091   */\n      tag_339\n      tag_301\n      jump\t// in\n    tag_339:\n      pop\n        /* \"#utility.yul\":5110:5119   */\n      sub\n      swap1\n        /* \"#utility.yul\":5000:5125   */\n      jump\t// out\n        /* \"#utility.yul\":5130:5298   */\n    tag_170:\n        /* \"#utility.yul\":5170:5177   */\n      0x00\n        /* \"#utility.yul\":5236:5237   */\n      dup2\n        /* \"#utility.yul\":5232:5233   */\n      0x00\n        /* \"#utility.yul\":5228:5234   */\n      not\n        /* \"#utility.yul\":5224:5238   */\n      div\n        /* \"#utility.yul\":5221:5222   */\n      dup4\n        /* \"#utility.yul\":5218:5239   */\n      gt\n        /* \"#utility.yul\":5213:5214   */\n      dup3\n        /* \"#utility.yul\":5206:5215   */\n      iszero\n        /* \"#utility.yul\":5199:5216   */\n      iszero\n        /* \"#utility.yul\":5195:5240   */\n      and\n        /* \"#utility.yul\":5192:5263   */\n      iszero\n      tag_342\n      jumpi\n        /* \"#utility.yul\":5243:5261   */\n      tag_342\n      tag_301\n      jump\t// in\n    tag_342:\n      pop\n        /* \"#utility.yul\":5283:5292   */\n      mul\n      swap1\n        /* \"#utility.yul\":5130:5298   */\n      jump\t// out\n        /* \"#utility.yul\":5303:5520   */\n    tag_172:\n        /* \"#utility.yul\":5343:5344   */\n      0x00\n        /* \"#utility.yul\":5369:5370   */\n      dup3\n        /* \"#utility.yul\":5359:5491   */\n      tag_344\n      jumpi\n        /* \"#utility.yul\":5413:5423   */\n      0x4e487b71\n        /* \"#utility.yul\":5408:5411   */\n      0xe0\n        /* \"#utility.yul\":5404:5424   */\n      shl\n        /* \"#utility.yul\":5401:5402   */\n      0x00\n        /* \"#utility.yul\":5394:5425   */\n      mstore\n        /* \"#utility.yul\":5448:5452   */\n      0x12\n        /* \"#utility.yul\":5445:5446   */\n      0x04\n        /* \"#utility.yul\":5438:5453   */\n      mstore\n        /* \"#utility.yul\":5476:5480   */\n      0x24\n        /* \"#utility.yul\":5473:5474   */\n      0x00\n        /* \"#utility.yul\":5466:5481   */\n      revert\n        /* \"#utility.yul\":5359:5491   */\n    tag_344:\n      pop\n        /* \"#utility.yul\":5505:5514   */\n      div\n      swap1\n        /* \"#utility.yul\":5303:5520   */\n      jump\t// out\n        /* \"#utility.yul\":8594:8852   */\n    tag_302:\n        /* \"#utility.yul\":8666:8667   */\n      0x00\n        /* \"#utility.yul\":8676:8789   */\n    tag_354:\n        /* \"#utility.yul\":8690:8696   */\n      dup4\n        /* \"#utility.yul\":8687:8688   */\n      dup2\n        /* \"#utility.yul\":8684:8697   */\n      lt\n        /* \"#utility.yul\":8676:8789   */\n      iszero\n      tag_356\n      jumpi\n        /* \"#utility.yul\":8766:8777   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":8760:8778   */\n      mload\n        /* \"#utility.yul\":8747:8758   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":8740:8779   */\n      mstore\n        /* \"#utility.yul\":8712:8714   */\n      0x20\n        /* \"#utility.yul\":8705:8715   */\n      add\n        /* \"#utility.yul\":8676:8789   */\n      jump(tag_354)\n    tag_356:\n        /* \"#utility.yul\":8807:8813   */\n      dup4\n        /* \"#utility.yul\":8804:8805   */\n      dup2\n        /* \"#utility.yul\":8801:8814   */\n      gt\n        /* \"#utility.yul\":8798:8846   */\n      iszero\n      tag_252\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":8842:8843   */\n      0x00\n        /* \"#utility.yul\":8824:8840   */\n      swap2\n      add\n        /* \"#utility.yul\":8817:8844   */\n      mstore\n        /* \"#utility.yul\":8594:8852   */\n      jump\t// out\n        /* \"#utility.yul\":8857:9131   */\n    tag_277:\n        /* \"#utility.yul\":8986:8989   */\n      0x00\n        /* \"#utility.yul\":9024:9030   */\n      dup3\n        /* \"#utility.yul\":9018:9031   */\n      mload\n        /* \"#utility.yul\":9040:9093   */\n      tag_359\n        /* \"#utility.yul\":9086:9092   */\n      dup2\n        /* \"#utility.yul\":9081:9084   */\n      dup5\n        /* \"#utility.yul\":9074:9078   */\n      0x20\n        /* \"#utility.yul\":9066:9072   */\n      dup8\n        /* \"#utility.yul\":9062:9079   */\n      add\n        /* \"#utility.yul\":9040:9093   */\n      tag_302\n      jump\t// in\n    tag_359:\n        /* \"#utility.yul\":9109:9125   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":8857:9131   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9494:9877   */\n    tag_299:\n        /* \"#utility.yul\":9643:9645   */\n      0x20\n        /* \"#utility.yul\":9632:9641   */\n      dup2\n        /* \"#utility.yul\":9625:9646   */\n      mstore\n        /* \"#utility.yul\":9606:9610   */\n      0x00\n        /* \"#utility.yul\":9675:9681   */\n      dup3\n        /* \"#utility.yul\":9669:9682   */\n      mload\n        /* \"#utility.yul\":9718:9724   */\n      dup1\n        /* \"#utility.yul\":9713:9715   */\n      0x20\n        /* \"#utility.yul\":9702:9711   */\n      dup5\n        /* \"#utility.yul\":9698:9716   */\n      add\n        /* \"#utility.yul\":9691:9725   */\n      mstore\n        /* \"#utility.yul\":9734:9800   */\n      tag_362\n        /* \"#utility.yul\":9793:9799   */\n      dup2\n        /* \"#utility.yul\":9788:9790   */\n      0x40\n        /* \"#utility.yul\":9777:9786   */\n      dup6\n        /* \"#utility.yul\":9773:9791   */\n      add\n        /* \"#utility.yul\":9768:9770   */\n      0x20\n        /* \"#utility.yul\":9760:9766   */\n      dup8\n        /* \"#utility.yul\":9756:9771   */\n      add\n        /* \"#utility.yul\":9734:9800   */\n      tag_302\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":9861:9863   */\n      0x1f\n        /* \"#utility.yul\":9840:9855   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":9836:9865   */\n      and\n        /* \"#utility.yul\":9821:9866   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":9868:9870   */\n      0x40\n        /* \"#utility.yul\":9817:9871   */\n      add\n      swap3\n        /* \"#utility.yul\":9494:9877   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d922bfa8be0079fc66cec85ae0658e582aa31e35b5a16532f5666b0f8c60393564736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1119": {
									"entryPoint": null,
									"id": 1119,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_1014": {
									"entryPoint": null,
									"id": 1014,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 132,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address_fromMemory": {
									"entryPoint": 212,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_address_fromMemory": {
									"entryPoint": 241,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:552:11",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "74:117:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "84:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "99:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "93:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "93:13:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "84:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "169:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "178:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "181:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "171:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "171:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "171:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "128:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "139:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "154:3:11",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "159:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "150:3:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "150:11:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "163:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "146:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "146:19:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "135:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "135:31:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "125:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "125:42:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "118:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "118:50:11"
															},
															"nodeType": "YulIf",
															"src": "115:70:11"
														}
													]
												},
												"name": "abi_decode_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "53:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "64:5:11",
														"type": ""
													}
												],
												"src": "14:177:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "311:239:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "357:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "366:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "369:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "359:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "359:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "359:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "332:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "341:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "328:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "328:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "353:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "324:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "324:32:11"
															},
															"nodeType": "YulIf",
															"src": "321:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "382:50:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "422:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "392:29:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "392:40:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "382:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "441:35:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "461:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "472:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "457:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "457:18:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "451:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "451:25:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "441:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "485:59:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "529:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "540:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "525:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "525:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "495:29:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "495:49:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "485:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "261:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "272:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "284:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "292:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "300:6:11",
														"type": ""
													}
												],
												"src": "196:354:11"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200159e3803806200159e8339810160408190526200003491620000f1565b6200003f3362000084565b600180546001600160a01b039485166001600160a01b031991821617909155600592909255600380549190931690821617909155600280549091163317905562000132565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000ec57600080fd5b919050565b6000806000606084860312156200010757600080fd5b6200011284620000d4565b9250602084015191506200012960408501620000d4565b90509250925092565b61145c80620001426000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063c45af5d81161007c578063c45af5d8146102f2578063e4458b3014610305578063e88cc2be14610354578063ee0106d214610386578063f2fde38b14610399578063f89d832f146103ac57600080fd5b80638da5cb5b14610282578063934ed77214610293578063a6021ace146102a6578063a88e132f146102b9578063b7171a2e146102cc578063c0cd40ee146102df57600080fd5b80634d6ce1e5116101155780634d6ce1e514610224578063574880641461023757806357ea89b614610257578063715018a61461025f5780637b2f247f146102675780638b73e3311461026f57600080fd5b8063023245d71461015d5780630ccff6e91461017257806310fd4fba1461018e578063150b7a02146101b9578063275bd33f146101f15780632ffce21014610204575b600080fd5b61017061016b3660046111c1565b6103bf565b005b61017b60045481565b6040519081526020015b60405180910390f35b6002546101a1906001600160a01b031681565b6040516001600160a01b039091168152602001610185565b6101d86101c73660046111f1565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610185565b6101706101ff36600461128c565b6104b4565b61017b61021236600461128c565b60086020526000908152604090205481565b6101706102323660046111c1565b6104de565b61017b61024536600461128c565b60076020526000908152604090205481565b6101706105a5565b6101706108be565b61017b6108d0565b61017b61027d36600461128c565b61090d565b6000546001600160a01b03166101a1565b6101706102a13660046112ae565b610a12565b6003546101a1906001600160a01b031681565b6101706102c73660046111c1565b610b8a565b6001546101a1906001600160a01b031681565b6101706102ed3660046111c1565b610be6565b61017b61030036600461128c565b610c9d565b61033761031336600461128c565b60096020526000908152604090208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610185565b61033761036236600461128c565b60066020526000908152604090208054600182015460029092015490919060ff1683565b61017061039436600461128c565b610dcf565b6101706103a736600461128c565b610df9565b6101706103ba3660046111c1565b610e6f565b3360009081526009602052604090206002015460ff166104265760405162461bcd60e51b815260206004820152601760248201527f506c65617365204669727374205374616b65204e46547300000000000000000060448201526064015b60405180910390fd5b600154604051635c46a7ef60e11b81526001600160a01b039091169063b88d4fde9061045a903090339086906004016112d0565b600060405180830381600087803b15801561047457600080fd5b505af1158015610488573d6000803e3d6000fd5b50503360009081526009602052604081208181556001810191909155600201805460ff19169055505050565b6104bc610e7c565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526006602052604090206002015460ff16156105395760405162461bcd60e51b8152602060048201526015602482015274506c6561736520466972737420576974684472617760581b604482015260640161041d565b60408051606081018252828152426020808301918252600183850181815233600081815260069094529590922093518455915191830191909155516002909101805460ff19169115159190911790556003546105a2916001600160a01b03909116903084610ed6565b50565b3360009081526006602052604090206002015460ff166105fc5760405162461bcd60e51b8152602060048201526012602482015271506c65617365204669727374205374616b6560701b604482015260640161041d565b3360009081526009602052604090206002015460ff16156107bc5733600081815260066020526040812054916106319061090d565b600180543360008181526009602052604090819020909301549251635c46a7ef60e11b81529394506001600160a01b039091169263b88d4fde9261067c9230929091906004016112d0565b600060405180830381600087803b15801561069657600080fd5b505af11580156106aa573d6000803e3d6000fd5b50506003546001600160a01b0316915063a9059cbb9050336106cc8486611319565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b9190611331565b506002546001600160a01b031660009081526008602052604081208054839290610766908490611353565b909155505033600090815260096020908152604080832083815560018082018590556002918201805460ff1990811690915560069094529184208481559182019390935590910180549091169055506108bc9050565b33600081815260066020526040812054916107d69061090d565b6003549091506001600160a01b031663a9059cbb336107f58486611319565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108649190611331565b506002546001600160a01b03166000908152600860205260408120805483929061088f908490611353565b90915550503360009081526006602052604081208181556001810191909155600201805460ff1916905550505b565b6108c6610e7c565b6108bc6000610f47565b6004546002546001600160a01b0316600090815260086020526040812054909182916108fd90606461136a565b6109079190611389565b92915050565b6001600160a01b03811660009081526009602052604081206002015460ff16156109b4576001600160a01b038216600090815260066020526040812060010154603c9061095a9042611353565b6109649190611389565b6001600160a01b038416600090815260096020908152604080832054600690925290912054610993919061136a565b61099d919061136a565b905060006109ac606483611389565b949350505050565b6001600160a01b038216600090815260066020526040812060010154603c906109dd9042611353565b6109e79190611389565b6005546001600160a01b038516600090815260066020526040902054610993919061136a565b919050565b3360009081526006602052604090206002015460ff16610a6b5760405162461bcd60e51b81526020600482015260146024820152734669727374204465706f73697420546f6b656e7360601b604482015260640161041d565b3360009081526009602052604090206002015460ff16610ad75760405162461bcd60e51b815260206004820152602160248201527f506c6561736520556e7374616b6520796f7572206465706f7369746564204e466044820152601560fa1b606482015260840161041d565b60408051606081018252828152602080820185815260018385018181523360008181526009909552938690209451855591518482015590516002909301805460ff19169315159390931790925590549151635c46a7ef60e11b81526001600160a01b039092169163b88d4fde91610b5491309087906004016112d0565b600060405180830381600087803b158015610b6e57600080fd5b505af1158015610b82573d6000803e3d6000fd5b505050505050565b610b92610e7c565b3360009081526008602052604081208054839290610bb1908490611353565b925050819055508060046000828254610bca9190611353565b90915550506003546105a2906001600160a01b03163383610f97565b610bee610e7c565b6002546001600160a01b03163314610c485760405162461bcd60e51b815260206004820152601760248201527f4f6e6c79204f776e65722063616e207472616e73666572000000000000000000604482015260640161041d565b3360009081526008602052604081208054839290610c67908490611319565b925050819055508060046000828254610c809190611319565b90915550506003546105a2906001600160a01b0316333084610ed6565b6001600160a01b03811660009081526009602052604081206002015460ff1615610d76576001600160a01b038216600090815260066020526040812060010154603c90610cea9042611353565b610cf49190611389565b6001600160a01b038416600090815260096020908152604080832054600690925290912054610d23919061136a565b610d2d919061136a565b90506000610d3c606483611389565b6001600160a01b038516600090815260066020526040902054909150610d629082611319565b92506109ac670de0b6b3a764000084611389565b6001600160a01b038216600090815260066020526040812060010154603c90610d9f9042611353565b610da99190611389565b6005546001600160a01b038516600090815260066020526040902054610d23919061136a565b610dd7610e7c565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610e01610e7c565b6001600160a01b038116610e665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161041d565b6105a281610f47565b610e77610e7c565b600555565b6000546001600160a01b031633146108bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041d565b6040516001600160a01b0380851660248301528316604482015260648101829052610f419085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610fcc565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038316602482015260448101829052610fc790849063a9059cbb60e01b90606401610f0a565b505050565b6000611021826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661109e9092919063ffffffff16565b805190915015610fc7578080602001905181019061103f9190611331565b610fc75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161041d565b60606109ac848460008585600080866001600160a01b031685876040516110c591906113d7565b60006040518083038185875af1925050503d8060008114611102576040519150601f19603f3d011682016040523d82523d6000602084013e611107565b606091505b509150915061111887838387611123565b979650505050505050565b6060831561119257825160000361118b576001600160a01b0385163b61118b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161041d565b50816109ac565b6109ac83838151156111a75781518083602001fd5b8060405162461bcd60e51b815260040161041d91906113f3565b6000602082840312156111d357600080fd5b5035919050565b80356001600160a01b0381168114610a0d57600080fd5b60008060008060006080868803121561120957600080fd5b611212866111da565b9450611220602087016111da565b935060408601359250606086013567ffffffffffffffff8082111561124457600080fd5b818801915088601f83011261125857600080fd5b81358181111561126757600080fd5b89602082850101111561127957600080fd5b9699959850939650602001949392505050565b60006020828403121561129e57600080fd5b6112a7826111da565b9392505050565b600080604083850312156112c157600080fd5b50508035926020909101359150565b6001600160a01b039384168152919092166020820152604081019190915260806060820181905260009082015260a00190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561132c5761132c611303565b500190565b60006020828403121561134357600080fd5b815180151581146112a757600080fd5b60008282101561136557611365611303565b500390565b600081600019048311821515161561138457611384611303565b500290565b6000826113a657634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156113c65781810151838201526020016113ae565b83811115610f415750506000910152565b600082516113e98184602087016113ab565b9190910192915050565b60208152600082518060208401526114128160408501602087016113ab565b601f01601f1916919091016040019291505056fea2646970667358221220d922bfa8be0079fc66cec85ae0658e582aa31e35b5a16532f5666b0f8c60393564736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x159E CODESIZE SUB DUP1 PUSH3 0x159E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0xF1 JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0x84 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP1 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE PUSH3 0x132 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x112 DUP5 PUSH3 0xD4 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH3 0x129 PUSH1 0x40 DUP6 ADD PUSH3 0xD4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x145C DUP1 PUSH3 0x142 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xC45AF5D8 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC45AF5D8 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xE4458B30 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0xEE0106D2 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0xF89D832F EQ PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x934ED772 EQ PUSH2 0x293 JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0xA88E132F EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xB7171A2E EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4D6CE1E5 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x4D6CE1E5 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0x57488064 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0x57EA89B6 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x7B2F247F EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0x8B73E331 EQ PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23245D7 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xCCFF6E9 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x10FD4FBA EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x275BD33F EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x2FFCE210 EQ PUSH2 0x204 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x170 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0x3BF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17B PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x1D8 PUSH2 0x1C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F1 JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0x4B4 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x212 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0x4DE JUMP JUMPDEST PUSH2 0x17B PUSH2 0x245 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x5A5 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x8BE JUMP JUMPDEST PUSH2 0x17B PUSH2 0x8D0 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x27D CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2ED CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x300 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0xC9D JUMP JUMPDEST PUSH2 0x337 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x337 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x394 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0xDCF JUMP JUMPDEST PUSH2 0x170 PUSH2 0x3A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0xDF9 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x3BA CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0xE6F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65617365204669727374205374616B65204E465473000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH2 0x45A SWAP1 ADDRESS SWAP1 CALLER SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x488 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x4BC PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x506C65617365204669727374205769746844726177 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x3 SLOAD PUSH2 0x5A2 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP5 PUSH2 0xED6 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x5FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x506C65617365204669727374205374616B65 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7BC JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 PUSH2 0x631 SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 SWAP4 ADD SLOAD SWAP3 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE SWAP4 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0xB88D4FDE SWAP3 PUSH2 0x67C SWAP3 ADDRESS SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH4 0xA9059CBB SWAP1 POP CALLER PUSH2 0x6CC DUP5 DUP7 PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x717 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73B SWAP2 SWAP1 PUSH2 0x1331 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x766 SWAP1 DUP5 SWAP1 PUSH2 0x1353 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP6 SWAP1 SSTORE PUSH1 0x2 SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x6 SWAP1 SWAP5 MSTORE SWAP2 DUP5 KECCAK256 DUP5 DUP2 SSTORE SWAP2 DUP3 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SWAP2 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE POP PUSH2 0x8BC SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 PUSH2 0x7D6 SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB CALLER PUSH2 0x7F5 DUP5 DUP7 PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x840 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x864 SWAP2 SWAP1 PUSH2 0x1331 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x88F SWAP1 DUP5 SWAP1 PUSH2 0x1353 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP JUMPDEST JUMP JUMPDEST PUSH2 0x8C6 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x8BC PUSH1 0x0 PUSH2 0xF47 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH2 0x8FD SWAP1 PUSH1 0x64 PUSH2 0x136A JUMP JUMPDEST PUSH2 0x907 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0x95A SWAP1 TIMESTAMP PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x964 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x993 SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST PUSH2 0x99D SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9AC PUSH1 0x64 DUP4 PUSH2 0x1389 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0x9DD SWAP1 TIMESTAMP PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x9E7 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x993 SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0xA6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x4669727374204465706F73697420546F6B656E73 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0xAD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C6561736520556E7374616B6520796F7572206465706F7369746564204E46 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP6 MSTORE SWAP4 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD DUP5 DUP3 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 SLOAD SWAP2 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xB88D4FDE SWAP2 PUSH2 0xB54 SWAP2 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB82 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB92 PUSH2 0xE7C JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xBB1 SWAP1 DUP5 SWAP1 PUSH2 0x1353 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xBCA SWAP2 SWAP1 PUSH2 0x1353 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH2 0x5A2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP4 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0xBEE PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79204F776E65722063616E207472616E73666572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xC67 SWAP1 DUP5 SWAP1 PUSH2 0x1319 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xC80 SWAP2 SWAP1 PUSH2 0x1319 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH2 0x5A2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0xED6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD76 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xCEA SWAP1 TIMESTAMP PUSH2 0x1353 JUMP JUMPDEST PUSH2 0xCF4 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST PUSH2 0xD2D SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD3C PUSH1 0x64 DUP4 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xD62 SWAP1 DUP3 PUSH2 0x1319 JUMP JUMPDEST SWAP3 POP PUSH2 0x9AC PUSH8 0xDE0B6B3A7640000 DUP5 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xD9F SWAP1 TIMESTAMP PUSH2 0x1353 JUMP JUMPDEST PUSH2 0xDA9 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST PUSH2 0xDD7 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE01 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE66 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41D JUMP JUMPDEST PUSH2 0x5A2 DUP2 PUSH2 0xF47 JUMP JUMPDEST PUSH2 0xE77 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xF41 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xFCC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xFC7 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0xF0A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1021 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x109E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xFC7 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x103F SWAP2 SWAP1 PUSH2 0x1331 JUMP JUMPDEST PUSH2 0xFC7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9AC DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x10C5 SWAP2 SWAP1 PUSH2 0x13D7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1102 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1107 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1118 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1123 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1192 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x118B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x118B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST POP DUP2 PUSH2 0x9AC JUMP JUMPDEST PUSH2 0x9AC DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x11A7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x13F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1212 DUP7 PUSH2 0x11DA JUMP JUMPDEST SWAP5 POP PUSH2 0x1220 PUSH1 0x20 DUP8 ADD PUSH2 0x11DA JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x129E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A7 DUP3 PUSH2 0x11DA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x132C JUMPI PUSH2 0x132C PUSH2 0x1303 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x12A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1365 JUMPI PUSH2 0x1365 PUSH2 0x1303 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1384 JUMPI PUSH2 0x1384 PUSH2 0x1303 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x13A6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13C6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x13AE JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF41 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x13E9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x13AB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1412 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x13AB JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0x22 0xBF 0xA8 0xBE STOP PUSH26 0xFC66CEC85AE0658E582AA31E35B5A16532F5666B0F8C60393564 PUSH20 0x6F6C634300080D00330000000000000000000000 ",
							"sourceMap": "348:8014:10:-:0;;;1357:235;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:8;936:18:0;:32::i;:::-;1451:13:10;:30;;-1:-1:-1;;;;;1451:30:10;;;-1:-1:-1;;;;;;1451:30:10;;;;;;;1491:4;:22;;;;1523:12;:28;;;;;;;;;;;;;-1:-1:-1;1561:24:10;;;;;1575:10;1561:24;;;348:8014;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;14:177:11:-;93:13;;-1:-1:-1;;;;;135:31:11;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:354::-;284:6;292;300;353:2;341:9;332:7;328:23;324:32;321:52;;;369:1;366;359:12;321:52;392:40;422:9;392:40;:::i;:::-;382:50;;472:2;461:9;457:18;451:25;441:35;;495:49;540:2;529:9;525:18;495:49;:::i;:::-;485:59;;196:354;;;;;:::o;:::-;348:8014:10;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@AdminAddToken_1159": {
									"entryPoint": 3046,
									"id": 1159,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@AdminWithDrawToken_1187": {
									"entryPoint": 2954,
									"id": 1187,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@DepositNFT_1633": {
									"entryPoint": 2578,
									"id": 1633,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@Deposit_1247": {
									"entryPoint": 1246,
									"id": 1247,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@Details_1079": {
									"entryPoint": null,
									"id": 1079,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ERC20Address_1056": {
									"entryPoint": null,
									"id": 1056,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ERC721address_1052": {
									"entryPoint": null,
									"id": 1052,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@OwnerTokens_1087": {
									"entryPoint": null,
									"id": 1087,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Reward_1083": {
									"entryPoint": null,
									"id": 1083,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@UpdateERC20_1570": {
									"entryPoint": 1204,
									"id": 1570,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@UpdateERC721_1558": {
									"entryPoint": 3535,
									"id": 1558,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@UpdateRatePersentage_1582": {
									"entryPoint": 3695,
									"id": 1582,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@UserRate_1092": {
									"entryPoint": null,
									"id": 1092,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Utilization_1206": {
									"entryPoint": 2256,
									"id": 1206,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@Withdraw_1368": {
									"entryPoint": 1445,
									"id": 1368,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_callOptionalReturn_506": {
									"entryPoint": 4044,
									"id": 506,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 3708,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_1014": {
									"entryPoint": null,
									"id": 1014,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_1001": {
									"entryPoint": null,
									"id": 1001,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_111": {
									"entryPoint": 3911,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@calculateIntrest_1546": {
									"entryPoint": 2317,
									"id": 1546,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@functionCallWithValue_826": {
									"entryPoint": null,
									"id": 826,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_762": {
									"entryPoint": 4254,
									"id": 762,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@isContract_690": {
									"entryPoint": null,
									"id": 690,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@onERC721Received_1687": {
									"entryPoint": null,
									"id": 1687,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"@owenerERC20_1054": {
									"entryPoint": null,
									"id": 1054,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 2238,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_284": {
									"entryPoint": 3798,
									"id": 284,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_258": {
									"entryPoint": 3991,
									"id": 258,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@showReward_1468": {
									"entryPoint": 3229,
									"id": 1468,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalOwnerToken_1058": {
									"entryPoint": null,
									"id": 1058,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 3577,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_957": {
									"entryPoint": 4387,
									"id": 957,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@withdrawNFT_1668": {
									"entryPoint": 959,
									"id": 1668,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 4570,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4748,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr": {
									"entryPoint": 4593,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 5
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 4913,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 4545,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 4782,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 5079,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 4816,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5107,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4889,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 5001,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 4970,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 4947,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 5035,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 4867,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:9879:11",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:110:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:11"
															},
															"nodeType": "YulIf",
															"src": "94:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "155:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "178:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "165:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "165:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:11",
														"type": ""
													}
												],
												"src": "14:180:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:76:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "310:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "322:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "333:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "318:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "318:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "310:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "352:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "363:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "345:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "345:25:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "269:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "280:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "291:4:11",
														"type": ""
													}
												],
												"src": "199:177:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "482:102:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "492:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "504:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "515:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "500:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "500:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "492:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "534:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "549:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "565:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "570:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "561:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "561:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "574:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "557:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "557:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "545:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "545:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "527:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "527:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "527:51:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "451:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "462:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "473:4:11",
														"type": ""
													}
												],
												"src": "381:203:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "638:124:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "648:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "670:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "657:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "657:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "648:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "740:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "749:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "752:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "742:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "742:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "742:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "699:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "710:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "725:3:11",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "730:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "721:3:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "721:11:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "734:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "717:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "717:19:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "706:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "706:31:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "696:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "696:42:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "689:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "689:50:11"
															},
															"nodeType": "YulIf",
															"src": "686:70:11"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "617:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "628:5:11",
														"type": ""
													}
												],
												"src": "589:173:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "907:668:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "954:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "963:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "966:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "928:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "937:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "924:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "924:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "949:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "920:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "920:33:11"
															},
															"nodeType": "YulIf",
															"src": "917:53:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "979:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1008:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "989:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "989:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "979:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1027:48:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1060:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1071:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1056:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1056:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1037:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1037:38:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1027:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1084:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1111:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1122:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1107:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1107:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1094:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1094:32:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1084:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1135:46:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1166:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1177:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1162:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1162:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1149:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1149:32:11"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1139:6:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1190:28:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1200:18:11",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1194:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1245:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1254:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1257:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1247:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1247:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1247:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1233:6:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1241:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1230:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1230:14:11"
															},
															"nodeType": "YulIf",
															"src": "1227:34:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1270:32:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1284:9:11"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1295:6:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1280:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1280:22:11"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "1274:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1350:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1359:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1362:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1352:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1352:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1352:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "1329:2:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1333:4:11",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1325:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1325:13:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1340:7:11"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "1321:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1321:27:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1314:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1314:35:11"
															},
															"nodeType": "YulIf",
															"src": "1311:55:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1375:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1402:2:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1389:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1389:16:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1379:6:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1432:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1441:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1444:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1434:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1434:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1434:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1420:6:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1428:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1417:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1417:14:11"
															},
															"nodeType": "YulIf",
															"src": "1414:34:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1498:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1507:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1510:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1500:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1500:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1500:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "1471:2:11"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "1475:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1467:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1467:15:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1484:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1463:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1463:24:11"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1489:7:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1460:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1460:37:11"
															},
															"nodeType": "YulIf",
															"src": "1457:57:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1523:21:11",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1537:2:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1541:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1533:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1533:11:11"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1523:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1553:16:11",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "1563:6:11"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "1553:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "841:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "852:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "864:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "872:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "880:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "888:6:11",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "896:6:11",
														"type": ""
													}
												],
												"src": "767:808:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1679:103:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1689:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1701:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1712:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1697:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1697:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1689:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1731:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1746:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1758:3:11",
																						"type": "",
																						"value": "224"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1763:10:11",
																						"type": "",
																						"value": "0xffffffff"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "1754:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1754:20:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1742:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1742:33:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1724:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1724:52:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1724:52:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1648:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1659:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1670:4:11",
														"type": ""
													}
												],
												"src": "1580:202:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:116:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1903:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1912:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1915:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1905:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1905:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1905:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1878:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1887:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1874:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1874:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1899:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1870:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1870:32:11"
															},
															"nodeType": "YulIf",
															"src": "1867:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1928:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1957:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1938:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1938:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1928:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1823:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1834:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1846:6:11",
														"type": ""
													}
												],
												"src": "1787:186:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2065:161:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2111:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2120:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2123:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2113:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2113:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2113:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2086:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2095:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2082:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2082:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2107:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2078:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2078:32:11"
															},
															"nodeType": "YulIf",
															"src": "2075:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2136:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2159:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2146:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2146:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2136:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2178:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2205:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2216:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2201:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2201:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2188:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2188:32:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2178:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2023:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2034:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2046:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2054:6:11",
														"type": ""
													}
												],
												"src": "1978:248:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2382:178:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2392:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2404:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2415:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2400:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2400:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2392:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2434:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2445:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2427:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2427:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2427:25:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2472:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2483:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2468:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2468:18:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2488:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2461:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2461:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2461:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2515:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2526:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2511:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2511:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value2",
																						"nodeType": "YulIdentifier",
																						"src": "2545:6:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2538:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2538:14:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2531:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2531:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2504:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2504:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2504:50:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2335:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2346:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2354:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2362:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2373:4:11",
														"type": ""
													}
												],
												"src": "2231:329:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2739:173:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2756:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2767:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2749:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2749:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2749:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2790:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2801:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2786:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2786:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2806:2:11",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2779:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2779:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2779:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2829:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2840:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2825:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2825:18:11"
																	},
																	{
																		"hexValue": "506c65617365204669727374205374616b65204e465473",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2845:25:11",
																		"type": "",
																		"value": "Please First Stake NFTs"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2818:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2818:53:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2818:53:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2880:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2892:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2903:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2888:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2888:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2880:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2716:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2730:4:11",
														"type": ""
													}
												],
												"src": "2565:347:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3174:298:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3184:29:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3202:3:11",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3207:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3198:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3198:11:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3211:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3194:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3194:19:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3188:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3229:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3244:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3252:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3240:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3240:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3222:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3222:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3222:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3276:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3287:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3272:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3272:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "3296:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3304:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3292:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3292:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3265:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3265:43:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3265:43:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3328:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3339:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3324:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3324:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "3344:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3317:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3317:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3317:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3371:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3382:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3367:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3367:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3387:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3360:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3360:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3360:31:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3411:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3422:3:11",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3407:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3407:19:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3428:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3400:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3400:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3400:30:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3439:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3451:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3462:3:11",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3447:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3447:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3439:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3127:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3138:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3146:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3154:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3165:4:11",
														"type": ""
													}
												],
												"src": "2917:555:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3651:171:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3668:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3679:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3661:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3661:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3661:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3702:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3713:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3698:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3698:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3718:2:11",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3691:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3691:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3691:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3741:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3752:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3737:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3737:18:11"
																	},
																	{
																		"hexValue": "506c65617365204669727374205769746844726177",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3757:23:11",
																		"type": "",
																		"value": "Please First WithDraw"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3730:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3730:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3730:51:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3790:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3802:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3813:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3798:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3798:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3790:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3628:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3642:4:11",
														"type": ""
													}
												],
												"src": "3477:345:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4001:168:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4018:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4029:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4011:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4011:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4011:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4052:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4063:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4048:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4048:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4068:2:11",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4041:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4041:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4041:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4091:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4102:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4087:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4087:18:11"
																	},
																	{
																		"hexValue": "506c65617365204669727374205374616b65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4107:20:11",
																		"type": "",
																		"value": "Please First Stake"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4080:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4080:48:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4080:48:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4137:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4149:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4160:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4145:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4145:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4137:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3978:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3992:4:11",
														"type": ""
													}
												],
												"src": "3827:342:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4206:95:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4223:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4230:3:11",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4235:10:11",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4226:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4226:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4216:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4216:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4216:31:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4263:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4266:4:11",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4256:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4256:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4256:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4287:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4290:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4280:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4280:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4280:15:11"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "4174:127:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4354:80:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4381:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4383:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4383:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4383:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4370:1:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4377:1:11"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "4373:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4373:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4367:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4367:13:11"
															},
															"nodeType": "YulIf",
															"src": "4364:39:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4412:16:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4423:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4426:1:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4419:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4419:9:11"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "4412:3:11"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4337:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4340:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "4346:3:11",
														"type": ""
													}
												],
												"src": "4306:128:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4568:145:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4578:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4590:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4601:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4586:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4586:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4578:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4620:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4635:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4651:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4656:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4647:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4647:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4660:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4643:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4643:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4631:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4631:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4613:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4613:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4613:51:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4684:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4695:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4680:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4680:18:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4700:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4673:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4673:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4673:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4529:9:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4540:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4548:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4559:4:11",
														"type": ""
													}
												],
												"src": "4439:274:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4796:199:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4842:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4851:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4854:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4844:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4844:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4844:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4817:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4826:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4813:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4813:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4838:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4809:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4809:32:11"
															},
															"nodeType": "YulIf",
															"src": "4806:52:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4867:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4886:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4880:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4880:16:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "4871:5:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4949:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4958:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4961:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4951:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4951:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4951:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4918:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "4939:5:11"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "4932:6:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4932:13:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4925:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4925:21:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4915:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4915:32:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4908:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4908:40:11"
															},
															"nodeType": "YulIf",
															"src": "4905:60:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4974:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4984:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4974:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4762:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4773:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4785:6:11",
														"type": ""
													}
												],
												"src": "4718:277:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5049:76:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5071:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5073:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5073:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5073:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5065:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5068:1:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5062:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5062:8:11"
															},
															"nodeType": "YulIf",
															"src": "5059:34:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5102:17:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5114:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5117:1:11"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "5110:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5110:9:11"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "5102:4:11"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5031:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5034:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "5040:4:11",
														"type": ""
													}
												],
												"src": "5000:125:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5182:116:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5241:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5243:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5243:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5243:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "5213:1:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5206:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5206:9:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5199:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5199:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5221:1:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5232:1:11",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "5228:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5228:6:11"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "5236:1:11"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "5224:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5224:14:11"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5218:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5218:21:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5195:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5195:45:11"
															},
															"nodeType": "YulIf",
															"src": "5192:71:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5272:20:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5287:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5290:1:11"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "5283:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5283:9:11"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "5272:7:11"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5161:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5164:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "5170:7:11",
														"type": ""
													}
												],
												"src": "5130:168:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5349:171:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5380:111:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5401:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5408:3:11",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5413:10:11",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5404:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5404:20:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5394:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5394:31:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5394:31:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5445:1:11",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5448:4:11",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5438:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5438:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5438:15:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5473:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5476:4:11",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5466:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5466:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5466:15:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5369:1:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5362:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5362:9:11"
															},
															"nodeType": "YulIf",
															"src": "5359:132:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5500:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5509:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5512:1:11"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "5505:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5505:9:11"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5500:1:11"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5334:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5337:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "5343:1:11",
														"type": ""
													}
												],
												"src": "5303:217:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5699:170:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5716:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5727:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5709:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5709:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5709:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5750:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5761:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5746:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5746:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5766:2:11",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5739:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5739:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5739:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5789:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5800:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5785:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5785:18:11"
																	},
																	{
																		"hexValue": "4669727374204465706f73697420546f6b656e73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5805:22:11",
																		"type": "",
																		"value": "First Deposit Tokens"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5778:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5778:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5778:50:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5837:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5849:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5860:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5845:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5845:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5837:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5676:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5690:4:11",
														"type": ""
													}
												],
												"src": "5525:344:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6048:223:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6065:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6076:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6058:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6058:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6058:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6099:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6110:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6095:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6095:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6115:2:11",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6088:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6088:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6088:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6138:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6149:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6134:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6134:18:11"
																	},
																	{
																		"hexValue": "506c6561736520556e7374616b6520796f7572206465706f7369746564204e46",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6154:34:11",
																		"type": "",
																		"value": "Please Unstake your deposited NF"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6127:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6127:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6127:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6209:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6220:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6205:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6205:18:11"
																	},
																	{
																		"hexValue": "54",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6225:3:11",
																		"type": "",
																		"value": "T"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6198:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6198:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6198:31:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6238:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6250:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6261:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6246:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6246:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6238:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6025:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6039:4:11",
														"type": ""
													}
												],
												"src": "5874:397:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6450:173:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6467:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6478:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6460:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6460:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6460:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6501:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6512:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6497:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6497:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6517:2:11",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6490:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6490:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6490:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6540:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6551:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6536:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6536:18:11"
																	},
																	{
																		"hexValue": "4f6e6c79204f776e65722063616e207472616e73666572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6556:25:11",
																		"type": "",
																		"value": "Only Owner can transfer"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6529:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6529:53:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6529:53:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6591:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6603:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6614:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6599:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6599:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6591:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6427:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6441:4:11",
														"type": ""
													}
												],
												"src": "6276:347:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6802:228:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6819:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6830:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6812:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6812:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6812:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6853:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6864:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6849:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6849:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6869:2:11",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6842:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6842:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6842:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6892:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6903:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6888:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6888:18:11"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6908:34:11",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6881:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6881:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6881:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6963:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6974:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6959:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6959:18:11"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6979:8:11",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6952:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6952:36:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6952:36:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6997:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7009:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7020:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7005:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7005:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6997:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6779:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6793:4:11",
														"type": ""
													}
												],
												"src": "6628:402:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7209:182:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7226:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7237:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7219:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7219:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7219:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7260:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7271:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7256:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7256:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7276:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7249:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7249:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7249:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7299:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7310:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7295:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7295:18:11"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7315:34:11",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7288:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7288:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7288:62:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7359:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7371:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7382:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7367:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7367:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7359:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7186:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7200:4:11",
														"type": ""
													}
												],
												"src": "7035:356:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7553:218:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7563:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7575:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7586:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7571:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7571:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7563:4:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7598:29:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7616:3:11",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7621:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7612:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7612:11:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7625:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7608:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7608:19:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7602:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7643:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7658:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7666:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7654:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7654:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7636:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7636:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7636:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7690:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7701:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7686:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7686:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "7710:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7718:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7706:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7706:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7679:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7679:43:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7679:43:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7742:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7753:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7738:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7738:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7758:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7731:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7731:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7731:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7506:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7517:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7525:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7533:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7544:4:11",
														"type": ""
													}
												],
												"src": "7396:375:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7950:232:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7967:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7978:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7960:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7960:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7960:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8001:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8012:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7997:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7997:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8017:2:11",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7990:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7990:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7990:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8040:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8051:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8036:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8036:18:11"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8056:34:11",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8029:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8029:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8029:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8111:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8122:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8107:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8107:18:11"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8127:12:11",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8100:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8100:40:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8100:40:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8149:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8161:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8172:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8157:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8157:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8149:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7927:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7941:4:11",
														"type": ""
													}
												],
												"src": "7776:406:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8361:228:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8378:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8389:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8371:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8371:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8371:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8412:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8423:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8408:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8408:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8428:2:11",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8401:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8401:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8401:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8451:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8462:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8447:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8447:18:11"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8467:34:11",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8440:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8440:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8440:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8522:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8533:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8518:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8518:18:11"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8538:8:11",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8511:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8511:36:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8511:36:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8556:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8568:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8579:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8564:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8564:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8556:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8338:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8352:4:11",
														"type": ""
													}
												],
												"src": "8187:402:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8647:205:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8657:10:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8666:1:11",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "8661:1:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8726:63:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "8751:3:11"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "8756:1:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8747:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8747:11:11"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "8770:3:11"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "8775:1:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "8766:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8766:11:11"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "8760:5:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8760:18:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8740:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8740:39:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8740:39:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8687:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8690:6:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "8684:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8684:13:11"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "8698:19:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8700:15:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "8709:1:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8712:2:11",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8705:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8705:10:11"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "8700:1:11"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "8680:3:11",
																"statements": []
															},
															"src": "8676:113:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8815:31:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "8828:3:11"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "8833:6:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8824:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8824:16:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8842:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8817:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8817:27:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8817:27:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8804:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8807:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8801:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8801:13:11"
															},
															"nodeType": "YulIf",
															"src": "8798:48:11"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8625:3:11",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "8630:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8635:6:11",
														"type": ""
													}
												],
												"src": "8594:258:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8994:137:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9004:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9024:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9018:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9018:13:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9008:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9066:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9074:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9062:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9062:17:11"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9081:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9086:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "9040:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9040:53:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9040:53:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9102:23:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9113:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9118:6:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9109:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9109:16:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9102:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8970:3:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8975:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8986:3:11",
														"type": ""
													}
												],
												"src": "8857:274:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9310:179:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9327:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9338:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9320:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9320:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9320:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9361:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9372:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9357:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9357:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9377:2:11",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9350:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9350:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9350:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9400:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9411:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9396:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9396:18:11"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9416:31:11",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9389:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9389:59:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9389:59:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9457:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9469:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9480:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9465:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9465:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9457:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9287:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9301:4:11",
														"type": ""
													}
												],
												"src": "9136:353:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9615:262:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9632:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9643:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9625:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9625:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9625:21:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9655:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9675:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9669:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9669:13:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9659:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9702:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9713:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9698:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9698:18:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9718:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9691:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9691:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9691:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9760:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9768:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9756:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9756:15:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9777:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9788:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9773:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9773:18:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9793:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "9734:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9734:66:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9734:66:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9809:62:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9825:9:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "9844:6:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9852:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "9840:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9840:15:11"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9861:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "9857:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9857:7:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "9836:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9836:29:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9821:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9821:45:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9868:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9817:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9817:54:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9809:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9584:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9595:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9606:4:11",
														"type": ""
													}
												],
												"src": "9494:383:11"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_encode_tuple_t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Please First Stake NFTs\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Please First WithDraw\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Please First Stake\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"First Deposit Tokens\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Please Unstake your deposited NF\")\n        mstore(add(headStart, 96), \"T\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Only Owner can transfer\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063c45af5d81161007c578063c45af5d8146102f2578063e4458b3014610305578063e88cc2be14610354578063ee0106d214610386578063f2fde38b14610399578063f89d832f146103ac57600080fd5b80638da5cb5b14610282578063934ed77214610293578063a6021ace146102a6578063a88e132f146102b9578063b7171a2e146102cc578063c0cd40ee146102df57600080fd5b80634d6ce1e5116101155780634d6ce1e514610224578063574880641461023757806357ea89b614610257578063715018a61461025f5780637b2f247f146102675780638b73e3311461026f57600080fd5b8063023245d71461015d5780630ccff6e91461017257806310fd4fba1461018e578063150b7a02146101b9578063275bd33f146101f15780632ffce21014610204575b600080fd5b61017061016b3660046111c1565b6103bf565b005b61017b60045481565b6040519081526020015b60405180910390f35b6002546101a1906001600160a01b031681565b6040516001600160a01b039091168152602001610185565b6101d86101c73660046111f1565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610185565b6101706101ff36600461128c565b6104b4565b61017b61021236600461128c565b60086020526000908152604090205481565b6101706102323660046111c1565b6104de565b61017b61024536600461128c565b60076020526000908152604090205481565b6101706105a5565b6101706108be565b61017b6108d0565b61017b61027d36600461128c565b61090d565b6000546001600160a01b03166101a1565b6101706102a13660046112ae565b610a12565b6003546101a1906001600160a01b031681565b6101706102c73660046111c1565b610b8a565b6001546101a1906001600160a01b031681565b6101706102ed3660046111c1565b610be6565b61017b61030036600461128c565b610c9d565b61033761031336600461128c565b60096020526000908152604090208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610185565b61033761036236600461128c565b60066020526000908152604090208054600182015460029092015490919060ff1683565b61017061039436600461128c565b610dcf565b6101706103a736600461128c565b610df9565b6101706103ba3660046111c1565b610e6f565b3360009081526009602052604090206002015460ff166104265760405162461bcd60e51b815260206004820152601760248201527f506c65617365204669727374205374616b65204e46547300000000000000000060448201526064015b60405180910390fd5b600154604051635c46a7ef60e11b81526001600160a01b039091169063b88d4fde9061045a903090339086906004016112d0565b600060405180830381600087803b15801561047457600080fd5b505af1158015610488573d6000803e3d6000fd5b50503360009081526009602052604081208181556001810191909155600201805460ff19169055505050565b6104bc610e7c565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526006602052604090206002015460ff16156105395760405162461bcd60e51b8152602060048201526015602482015274506c6561736520466972737420576974684472617760581b604482015260640161041d565b60408051606081018252828152426020808301918252600183850181815233600081815260069094529590922093518455915191830191909155516002909101805460ff19169115159190911790556003546105a2916001600160a01b03909116903084610ed6565b50565b3360009081526006602052604090206002015460ff166105fc5760405162461bcd60e51b8152602060048201526012602482015271506c65617365204669727374205374616b6560701b604482015260640161041d565b3360009081526009602052604090206002015460ff16156107bc5733600081815260066020526040812054916106319061090d565b600180543360008181526009602052604090819020909301549251635c46a7ef60e11b81529394506001600160a01b039091169263b88d4fde9261067c9230929091906004016112d0565b600060405180830381600087803b15801561069657600080fd5b505af11580156106aa573d6000803e3d6000fd5b50506003546001600160a01b0316915063a9059cbb9050336106cc8486611319565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b9190611331565b506002546001600160a01b031660009081526008602052604081208054839290610766908490611353565b909155505033600090815260096020908152604080832083815560018082018590556002918201805460ff1990811690915560069094529184208481559182019390935590910180549091169055506108bc9050565b33600081815260066020526040812054916107d69061090d565b6003549091506001600160a01b031663a9059cbb336107f58486611319565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108649190611331565b506002546001600160a01b03166000908152600860205260408120805483929061088f908490611353565b90915550503360009081526006602052604081208181556001810191909155600201805460ff1916905550505b565b6108c6610e7c565b6108bc6000610f47565b6004546002546001600160a01b0316600090815260086020526040812054909182916108fd90606461136a565b6109079190611389565b92915050565b6001600160a01b03811660009081526009602052604081206002015460ff16156109b4576001600160a01b038216600090815260066020526040812060010154603c9061095a9042611353565b6109649190611389565b6001600160a01b038416600090815260096020908152604080832054600690925290912054610993919061136a565b61099d919061136a565b905060006109ac606483611389565b949350505050565b6001600160a01b038216600090815260066020526040812060010154603c906109dd9042611353565b6109e79190611389565b6005546001600160a01b038516600090815260066020526040902054610993919061136a565b919050565b3360009081526006602052604090206002015460ff16610a6b5760405162461bcd60e51b81526020600482015260146024820152734669727374204465706f73697420546f6b656e7360601b604482015260640161041d565b3360009081526009602052604090206002015460ff16610ad75760405162461bcd60e51b815260206004820152602160248201527f506c6561736520556e7374616b6520796f7572206465706f7369746564204e466044820152601560fa1b606482015260840161041d565b60408051606081018252828152602080820185815260018385018181523360008181526009909552938690209451855591518482015590516002909301805460ff19169315159390931790925590549151635c46a7ef60e11b81526001600160a01b039092169163b88d4fde91610b5491309087906004016112d0565b600060405180830381600087803b158015610b6e57600080fd5b505af1158015610b82573d6000803e3d6000fd5b505050505050565b610b92610e7c565b3360009081526008602052604081208054839290610bb1908490611353565b925050819055508060046000828254610bca9190611353565b90915550506003546105a2906001600160a01b03163383610f97565b610bee610e7c565b6002546001600160a01b03163314610c485760405162461bcd60e51b815260206004820152601760248201527f4f6e6c79204f776e65722063616e207472616e73666572000000000000000000604482015260640161041d565b3360009081526008602052604081208054839290610c67908490611319565b925050819055508060046000828254610c809190611319565b90915550506003546105a2906001600160a01b0316333084610ed6565b6001600160a01b03811660009081526009602052604081206002015460ff1615610d76576001600160a01b038216600090815260066020526040812060010154603c90610cea9042611353565b610cf49190611389565b6001600160a01b038416600090815260096020908152604080832054600690925290912054610d23919061136a565b610d2d919061136a565b90506000610d3c606483611389565b6001600160a01b038516600090815260066020526040902054909150610d629082611319565b92506109ac670de0b6b3a764000084611389565b6001600160a01b038216600090815260066020526040812060010154603c90610d9f9042611353565b610da99190611389565b6005546001600160a01b038516600090815260066020526040902054610d23919061136a565b610dd7610e7c565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610e01610e7c565b6001600160a01b038116610e665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161041d565b6105a281610f47565b610e77610e7c565b600555565b6000546001600160a01b031633146108bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041d565b6040516001600160a01b0380851660248301528316604482015260648101829052610f419085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610fcc565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038316602482015260448101829052610fc790849063a9059cbb60e01b90606401610f0a565b505050565b6000611021826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661109e9092919063ffffffff16565b805190915015610fc7578080602001905181019061103f9190611331565b610fc75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161041d565b60606109ac848460008585600080866001600160a01b031685876040516110c591906113d7565b60006040518083038185875af1925050503d8060008114611102576040519150601f19603f3d011682016040523d82523d6000602084013e611107565b606091505b509150915061111887838387611123565b979650505050505050565b6060831561119257825160000361118b576001600160a01b0385163b61118b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161041d565b50816109ac565b6109ac83838151156111a75781518083602001fd5b8060405162461bcd60e51b815260040161041d91906113f3565b6000602082840312156111d357600080fd5b5035919050565b80356001600160a01b0381168114610a0d57600080fd5b60008060008060006080868803121561120957600080fd5b611212866111da565b9450611220602087016111da565b935060408601359250606086013567ffffffffffffffff8082111561124457600080fd5b818801915088601f83011261125857600080fd5b81358181111561126757600080fd5b89602082850101111561127957600080fd5b9699959850939650602001949392505050565b60006020828403121561129e57600080fd5b6112a7826111da565b9392505050565b600080604083850312156112c157600080fd5b50508035926020909101359150565b6001600160a01b039384168152919092166020820152604081019190915260806060820181905260009082015260a00190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561132c5761132c611303565b500190565b60006020828403121561134357600080fd5b815180151581146112a757600080fd5b60008282101561136557611365611303565b500390565b600081600019048311821515161561138457611384611303565b500290565b6000826113a657634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156113c65781810151838201526020016113ae565b83811115610f415750506000910152565b600082516113e98184602087016113ab565b9190910192915050565b60208152600082518060208401526114128160408501602087016113ab565b601f01601f1916919091016040019291505056fea2646970667358221220d922bfa8be0079fc66cec85ae0658e582aa31e35b5a16532f5666b0f8c60393564736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xC45AF5D8 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC45AF5D8 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xE4458B30 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0xEE0106D2 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0xF89D832F EQ PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x934ED772 EQ PUSH2 0x293 JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0xA88E132F EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xB7171A2E EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4D6CE1E5 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x4D6CE1E5 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0x57488064 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0x57EA89B6 EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x7B2F247F EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0x8B73E331 EQ PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23245D7 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xCCFF6E9 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x10FD4FBA EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x275BD33F EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x2FFCE210 EQ PUSH2 0x204 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x170 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0x3BF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17B PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x1D8 PUSH2 0x1C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11F1 JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0x4B4 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x212 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0x4DE JUMP JUMPDEST PUSH2 0x17B PUSH2 0x245 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x5A5 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x8BE JUMP JUMPDEST PUSH2 0x17B PUSH2 0x8D0 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x27D CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2ED CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x300 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0xC9D JUMP JUMPDEST PUSH2 0x337 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x337 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x394 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0xDCF JUMP JUMPDEST PUSH2 0x170 PUSH2 0x3A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x128C JUMP JUMPDEST PUSH2 0xDF9 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x3BA CALLDATASIZE PUSH1 0x4 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0xE6F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65617365204669727374205374616B65204E465473000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH2 0x45A SWAP1 ADDRESS SWAP1 CALLER SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x488 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x4BC PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x506C65617365204669727374205769746844726177 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x3 SLOAD PUSH2 0x5A2 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP5 PUSH2 0xED6 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x5FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x506C65617365204669727374205374616B65 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7BC JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 PUSH2 0x631 SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 SWAP4 ADD SLOAD SWAP3 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE SWAP4 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0xB88D4FDE SWAP3 PUSH2 0x67C SWAP3 ADDRESS SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH4 0xA9059CBB SWAP1 POP CALLER PUSH2 0x6CC DUP5 DUP7 PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x717 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73B SWAP2 SWAP1 PUSH2 0x1331 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x766 SWAP1 DUP5 SWAP1 PUSH2 0x1353 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP6 SWAP1 SSTORE PUSH1 0x2 SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x6 SWAP1 SWAP5 MSTORE SWAP2 DUP5 KECCAK256 DUP5 DUP2 SSTORE SWAP2 DUP3 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SWAP2 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE POP PUSH2 0x8BC SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 PUSH2 0x7D6 SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB CALLER PUSH2 0x7F5 DUP5 DUP7 PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x840 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x864 SWAP2 SWAP1 PUSH2 0x1331 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x88F SWAP1 DUP5 SWAP1 PUSH2 0x1353 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP JUMPDEST JUMP JUMPDEST PUSH2 0x8C6 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x8BC PUSH1 0x0 PUSH2 0xF47 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH2 0x8FD SWAP1 PUSH1 0x64 PUSH2 0x136A JUMP JUMPDEST PUSH2 0x907 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0x95A SWAP1 TIMESTAMP PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x964 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x993 SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST PUSH2 0x99D SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9AC PUSH1 0x64 DUP4 PUSH2 0x1389 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0x9DD SWAP1 TIMESTAMP PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x9E7 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x993 SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0xA6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x4669727374204465706F73697420546F6B656E73 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0xAD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C6561736520556E7374616B6520796F7572206465706F7369746564204E46 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP6 MSTORE SWAP4 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD DUP5 DUP3 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 SLOAD SWAP2 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xB88D4FDE SWAP2 PUSH2 0xB54 SWAP2 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB82 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB92 PUSH2 0xE7C JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xBB1 SWAP1 DUP5 SWAP1 PUSH2 0x1353 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xBCA SWAP2 SWAP1 PUSH2 0x1353 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH2 0x5A2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP4 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0xBEE PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79204F776E65722063616E207472616E73666572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xC67 SWAP1 DUP5 SWAP1 PUSH2 0x1319 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xC80 SWAP2 SWAP1 PUSH2 0x1319 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH2 0x5A2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0xED6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD76 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xCEA SWAP1 TIMESTAMP PUSH2 0x1353 JUMP JUMPDEST PUSH2 0xCF4 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x6 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST PUSH2 0xD2D SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD3C PUSH1 0x64 DUP4 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xD62 SWAP1 DUP3 PUSH2 0x1319 JUMP JUMPDEST SWAP3 POP PUSH2 0x9AC PUSH8 0xDE0B6B3A7640000 DUP5 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xD9F SWAP1 TIMESTAMP PUSH2 0x1353 JUMP JUMPDEST PUSH2 0xDA9 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x136A JUMP JUMPDEST PUSH2 0xDD7 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE01 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE66 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41D JUMP JUMPDEST PUSH2 0x5A2 DUP2 PUSH2 0xF47 JUMP JUMPDEST PUSH2 0xE77 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xF41 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xFCC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xFC7 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0xF0A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1021 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x109E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xFC7 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x103F SWAP2 SWAP1 PUSH2 0x1331 JUMP JUMPDEST PUSH2 0xFC7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9AC DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x10C5 SWAP2 SWAP1 PUSH2 0x13D7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1102 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1107 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1118 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1123 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1192 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x118B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x118B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x41D JUMP JUMPDEST POP DUP2 PUSH2 0x9AC JUMP JUMPDEST PUSH2 0x9AC DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x11A7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41D SWAP2 SWAP1 PUSH2 0x13F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1212 DUP7 PUSH2 0x11DA JUMP JUMPDEST SWAP5 POP PUSH2 0x1220 PUSH1 0x20 DUP8 ADD PUSH2 0x11DA JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x129E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A7 DUP3 PUSH2 0x11DA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x132C JUMPI PUSH2 0x132C PUSH2 0x1303 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x12A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1365 JUMPI PUSH2 0x1365 PUSH2 0x1303 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1384 JUMPI PUSH2 0x1384 PUSH2 0x1303 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x13A6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13C6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x13AE JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF41 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x13E9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x13AB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1412 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x13AB JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0x22 0xBF 0xA8 0xBE STOP PUSH26 0xFC66CEC85AE0658E582AA31E35B5A16532F5666B0F8C60393564 PUSH20 0x6F6C634300080D00330000000000000000000000 ",
							"sourceMap": "348:8014:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7935:249;;;;;;:::i;:::-;;:::i;:::-;;535:27;;;;;;;;;345:25:11;;;333:2;318:18;535:27:10;;;;;;;;470:26;;;;;-1:-1:-1;;;;;470:26:10;;;;;;-1:-1:-1;;;;;545:32:11;;;527:51;;515:2;500:18;470:26:10;381:203:11;8189:171:10;;;;;;:::i;:::-;-1:-1:-1;;;8189:171:10;;;;;;;;;;;-1:-1:-1;;;;;;1742:33:11;;;1724:52;;1712:2;1697:18;8189:171:10;1580:202:11;6719:107:10;;;;;;:::i;:::-;;:::i;878:45::-;;;;;;:::i;:::-;;;;;;;;;;;;;;3168:269;;;;;;:::i;:::-;;:::i;833:39::-;;;;;;:::i;:::-;;;;;;;;;;;;;;3632:877;;;:::i;1831:101:0:-;;;:::i;2713:162:10:-;;;:::i;5689:562::-;;;;;;:::i;:::-;;:::i;1201:85:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;7361:362:10;;;;;;:::i;:::-;;:::i;502:27::-;;;;;-1:-1:-1;;;;;502:27:10;;;2300:205;;;;;;:::i;:::-;;:::i;436:28::-;;;;;-1:-1:-1;;;;;436:28:10;;;1818:290;;;;;;:::i;:::-;;:::i;4702:723::-;;;;;;:::i;:::-;;:::i;929:47::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2427:25:11;;;2483:2;2468:18;;2461:34;;;;2538:14;2531:22;2511:18;;;2504:50;2415:2;2400:18;929:47:10;2231:329:11;785:42:10;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6433:109;;;;;;:::i;:::-;;:::i;2081:198:0:-;;;;;;:::i;:::-;;:::i;7008:110:10:-;;;;;;:::i;:::-;;:::i;7935:249::-;8008:10;7999:20;;;;:8;:20;;;;;:26;;;;;7991:61;;;;-1:-1:-1;;;7991:61:10;;2767:2:11;7991:61:10;;;2749:21:11;2806:2;2786:18;;;2779:30;2845:25;2825:18;;;2818:53;2888:18;;7991:61:10;;;;;;;;;8070:13;;8062:78;;-1:-1:-1;;;8062:78:10;;-1:-1:-1;;;;;8070:13:10;;;;8062:39;;:78;;8110:4;;8117:10;;8128:8;;8062:78;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8166:10:10;8157:20;;;;:8;:20;;;;;8150:27;;;;;;;;;;;;;;-1:-1:-1;;8150:27:10;;;-1:-1:-1;;;7935:249:10:o;6719:107::-;1094:13:0;:11;:13::i;:::-;6791:12:10::1;:28:::0;;-1:-1:-1;;;;;;6791:28:10::1;-1:-1:-1::0;;;;;6791:28:10;;;::::1;::::0;;;::::1;::::0;;6719:107::o;3168:269::-;3236:10;3228:19;;;;:7;:19;;;;;:25;;;;;3227:26;3219:59;;;;-1:-1:-1;;;3219:59:10;;3679:2:11;3219:59:10;;;3661:21:11;3718:2;3698:18;;;3691:30;-1:-1:-1;;;3737:18:11;;;3730:51;3798:18;;3219:59:10;3477:345:11;3219:59:10;3310:36;;;;;;;;;;;3325:15;3310:36;;;;;;;3341:4;3310:36;;;;;;3296:10;-1:-1:-1;3288:19:10;;;:7;:19;;;;;;;:58;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3288:58:10;;;;;;;;;;3363:12;;3356:74;;-1:-1:-1;;;;;3363:12:10;;;;3414:4;3310:36;3356:37;:74::i;:::-;3168:269;:::o;3632:877::-;3685:10;3677:19;;;;:7;:19;;;;;:25;;;;;3669:55;;;;-1:-1:-1;;;3669:55:10;;4029:2:11;3669:55:10;;;4011:21:11;4068:2;4048:18;;;4041:30;-1:-1:-1;;;4087:18:11;;;4080:48;4145:18;;3669:55:10;3827:342:11;3669:55:10;3747:10;3738:20;;;;:8;:20;;;;;:26;;;;;3734:765;;;3801:10;3779:11;3793:19;;;:7;:19;;;;;:29;;3850:28;;:16;:28::i;:::-;3900:13;;;3947:10;3900:13;3958:20;;;:8;:20;;;;;;;:28;;;;3892:98;;-1:-1:-1;;;3892:98:10;;3836:42;;-1:-1:-1;;;;;;3900:13:10;;;;3892:39;;:98;;3940:4;;3947:10;;3958:28;3892:98;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4011:12:10;;-1:-1:-1;;;;;4011:12:10;;-1:-1:-1;4004:29:10;;-1:-1:-1;4034:10:10;4046:15;4055:6;4046;:15;:::i;:::-;4004:58;;-1:-1:-1;;;;;;4004:58:10;;;;;;;-1:-1:-1;;;;;4631:32:11;;;4004:58:10;;;4613:51:11;4680:18;;;4673:34;4586:18;;4004:58:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4088:11:10;;-1:-1:-1;;;;;4088:11:10;4076:24;;;;:11;:24;;;;;:34;;4104:6;;4076:24;:34;;4104:6;;4076:34;:::i;:::-;;;;-1:-1:-1;;4140:10:10;4131:20;;;;:8;:20;;;;;;;;4124:27;;;;;;;;;;;;;;;;-1:-1:-1;;4124:27:10;;;;;;4172:7;:19;;;;;;4165:26;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3734:765:10;;-1:-1:-1;3734:765:10;;4251:10;4229:11;4243:19;;;:7;:19;;;;;:29;;4300:28;;:16;:28::i;:::-;4349:12;;4286:42;;-1:-1:-1;;;;;;4349:12:10;4342:29;4372:10;4384:15;4286:42;4384:6;:15;:::i;:::-;4342:58;;-1:-1:-1;;;;;;4342:58:10;;;;;;;-1:-1:-1;;;;;4631:32:11;;;4342:58:10;;;4613:51:11;4680:18;;;4673:34;4586:18;;4342:58:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4426:11:10;;-1:-1:-1;;;;;4426:11:10;4414:24;;;;:11;:24;;;;;:34;;4442:6;;4414:24;:34;;4442:6;;4414:34;:::i;:::-;;;;-1:-1:-1;;4477:10:10;4469:19;;;;:7;:19;;;;;4462:26;;;;;;;;;;;;;;-1:-1:-1;;4462:26:10;;;-1:-1:-1;;3734:765:10;3632:877::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;2713:162:10:-:0;2826:15;;2806:11;;-1:-1:-1;;;;;2806:11:10;2756:7;2794:24;;;:11;:24;;;;;;2756:7;;;;2794:30;;2821:3;2794:30;:::i;:::-;2793:48;;;;:::i;:::-;2775:66;2713:162;-1:-1:-1;;2713:162:10:o;5689:562::-;-1:-1:-1;;;;;5770:13:10;;5748:7;5770:13;;;:8;:13;;;;;:19;;;;;5766:479;;;-1:-1:-1;;;;;5902:12:10;;5813:14;5902:12;;;:7;:12;;;;;:22;;;5926:2;;5884:40;;:15;:40;:::i;:::-;5883:45;;;;:::i;:::-;-1:-1:-1;;;;;5856:13:10;;;;;;:8;:13;;;;;;;;:22;5831:7;:12;;;;;;:22;:47;;5856:22;5831:47;:::i;:::-;5830:99;;;;:::i;:::-;5813:116;-1:-1:-1;5943:16:10;5962:15;5974:3;5813:116;5962:15;:::i;:::-;5943:34;5689:562;-1:-1:-1;;;;5689:562:10:o;5766:479::-;-1:-1:-1;;;;;6127:12:10;;6056:14;6127:12;;;:7;:12;;;;;:22;;;6151:2;;6109:40;;:15;:40;:::i;:::-;6108:45;;;;:::i;:::-;6099:4;;-1:-1:-1;;;;;6074:12:10;;;;;;:7;:12;;;;;:22;:29;;6099:4;6074:29;:::i;5766:479::-;5689:562;;;:::o;7361:362::-;7443:10;7435:19;;;;:7;:19;;;;;:25;;;;;7427:57;;;;-1:-1:-1;;;7427:57:10;;5727:2:11;7427:57:10;;;5709:21:11;5766:2;5746:18;;;5739:30;-1:-1:-1;;;5785:18:11;;;5778:50;5845:18;;7427:57:10;5525:344:11;7427:57:10;7511:10;7502:20;;;;:8;:20;;;;;:26;;;;;7494:71;;;;-1:-1:-1;;;7494:71:10;;6076:2:11;7494:71:10;;;6058:21:11;6115:2;6095:18;;;6088:30;6154:34;6134:18;;;6127:62;-1:-1:-1;;;6205:18:11;;;6198:31;6246:19;;7494:71:10;5874:397:11;7494:71:10;7598:30;;;;;;;;;;;;;;;;;;7623:4;7598:30;;;;;;7584:10;-1:-1:-1;7575:20:10;;;:8;:20;;;;;;;:53;;;;;;;;;;;;;;;;;;-1:-1:-1;;7575:53:10;;;;;;;;;;;7647:13;;7639:77;;-1:-1:-1;;;7639:77:10;;-1:-1:-1;;;;;7647:13:10;;;;7639:39;;:77;;7698:4;;7598:30;;7639:77;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7361:362;;:::o;2300:205::-;1094:13:0;:11;:13::i;:::-;2379:10:10::1;2367:23;::::0;;;:11:::1;:23;::::0;;;;:33;;2394:6;;2367:23;:33:::1;::::0;2394:6;;2367:33:::1;:::i;:::-;;;;;;;;2429:6;2410:15;;:25;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;2452:12:10::1;::::0;2445:53:::1;::::0;-1:-1:-1;;;;;2452:12:10::1;2479:10;2491:6:::0;2445:33:::1;:53::i;1818:290::-:0;1094:13:0;:11;:13::i;:::-;1901:11:10::1;::::0;-1:-1:-1;;;;;1901:11:10::1;1889:10;:23;1881:58;;;::::0;-1:-1:-1;;;1881:58:10;;6478:2:11;1881:58:10::1;::::0;::::1;6460:21:11::0;6517:2;6497:18;;;6490:30;6556:25;6536:18;;;6529:53;6599:18;;1881:58:10::1;6276:347:11::0;1881:58:10::1;1961:10;1949:23;::::0;;;:11:::1;:23;::::0;;;;:33;;1975:7;;1949:23;:33:::1;::::0;1975:7;;1949:33:::1;:::i;:::-;;;;;;;;2011:7;1992:15;;:26;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;2035:12:10::1;::::0;2028:73:::1;::::0;-1:-1:-1;;;;;2035:12:10::1;2066:10;2086:4;2093:7:::0;2028:37:::1;:73::i;4702:723::-:0;-1:-1:-1;;;;;4786:13:10;;4755:11;4786:13;;;:8;:13;;;;;:19;;;;;4782:628;;;-1:-1:-1;;;;;4918:12:10;;4829:14;4918:12;;;:7;:12;;;;;:22;;;4942:2;;4900:40;;:15;:40;:::i;:::-;4899:45;;;;:::i;:::-;-1:-1:-1;;;;;4872:13:10;;;;;;:8;:13;;;;;;;;:22;4847:7;:12;;;;;;:22;:47;;4872:22;4847:47;:::i;:::-;4846:99;;;;:::i;:::-;4829:116;-1:-1:-1;4959:16:10;4978:15;4990:3;4829:116;4978:15;:::i;:::-;-1:-1:-1;;;;;5030:12:10;;;;;;:7;:12;;;;;:22;4959:34;;-1:-1:-1;5016:36:10;;4959:34;5016:36;:::i;:::-;5007:45;-1:-1:-1;5073:26:10;5080:19;5007:45;5073:26;:::i;4782:628::-;-1:-1:-1;;;;;5218:12:10;;5147:14;5218:12;;;:7;:12;;;;;:22;;;5242:2;;5200:40;;:15;:40;:::i;:::-;5199:45;;;;:::i;:::-;5190:4;;-1:-1:-1;;;;;5165:12:10;;;;;;:7;:12;;;;;:22;:29;;5190:4;5165:29;:::i;6433:109::-;1094:13:0;:11;:13::i;:::-;6505::10::1;:30:::0;;-1:-1:-1;;;;;;6505:30:10::1;-1:-1:-1::0;;;;;6505:30:10;;;::::1;::::0;;;::::1;::::0;;6433:109::o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;6830:2:11;2161:73:0::1;::::0;::::1;6812:21:11::0;6869:2;6849:18;;;6842:30;6908:34;6888:18;;;6881:62;-1:-1:-1;;;6959:18:11;;;6952:36;7005:19;;2161:73:0::1;6628:402:11::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;7008:110:10:-:0;1094:13:0;:11;:13::i;:::-;7089:4:10::1;:22:::0;7008:110::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;7237:2:11;1414:68:0;;;7219:21:11;;;7256:18;;;7249:30;7315:34;7295:18;;;7288:62;7367:18;;1414:68:0;7035:356:11;974:241:3;1139:68;;-1:-1:-1;;;;;7654:15:11;;;1139:68:3;;;7636:34:11;7706:15;;7686:18;;;7679:43;7738:18;;;7731:34;;;1112:96:3;;1132:5;;-1:-1:-1;;;1162:27:3;7571:18:11;;1139:68:3;;;;-1:-1:-1;;1139:68:3;;;;;;;;;;;;;;-1:-1:-1;;;;;1139:68:3;-1:-1:-1;;;;;;1139:68:3;;;;;;;;;;1112:19;:96::i;:::-;974:241;;;;:::o;2433:187:0:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;763:205:3:-;902:58;;-1:-1:-1;;;;;4631:32:11;;902:58:3;;;4613:51:11;4680:18;;;4673:34;;;875:86:3;;895:5;;-1:-1:-1;;;925:23:3;4586:18:11;;902:58:3;4439:274:11;875:86:3;763:205;;;:::o;3747:706::-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:3;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:3;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:3;;7978:2:11;4351:85:3;;;7960:21:11;8017:2;7997:18;;;7990:30;8056:34;8036:18;;;8029:62;-1:-1:-1;;;8107:18:11;;;8100:40;8157:19;;4351:85:3;7776:406:11;3873:223:7;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4006;5241;5255:23;5282:6;-1:-1:-1;;;;;5282:11:7;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:7:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:7;;;7908:60;;;;-1:-1:-1;;;7908:60:7;;9338:2:11;7908:60:7;;;9320:21:11;9377:2;9357:18;;;9350:30;9416:31;9396:18;;;9389:59;9465:18;;7908:60:7;9136:353:11;7908:60:7;-1:-1:-1;8003:10:7;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:7;;;;;;;;:::i;14:180:11:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:11;;14:180;-1:-1:-1;14:180:11:o;589:173::-;657:20;;-1:-1:-1;;;;;706:31:11;;696:42;;686:70;;752:1;749;742:12;767:808;864:6;872;880;888;896;949:3;937:9;928:7;924:23;920:33;917:53;;;966:1;963;956:12;917:53;989:29;1008:9;989:29;:::i;:::-;979:39;;1037:38;1071:2;1060:9;1056:18;1037:38;:::i;:::-;1027:48;;1122:2;1111:9;1107:18;1094:32;1084:42;;1177:2;1166:9;1162:18;1149:32;1200:18;1241:2;1233:6;1230:14;1227:34;;;1257:1;1254;1247:12;1227:34;1295:6;1284:9;1280:22;1270:32;;1340:7;1333:4;1329:2;1325:13;1321:27;1311:55;;1362:1;1359;1352:12;1311:55;1402:2;1389:16;1428:2;1420:6;1417:14;1414:34;;;1444:1;1441;1434:12;1414:34;1489:7;1484:2;1475:6;1471:2;1467:15;1463:24;1460:37;1457:57;;;1510:1;1507;1500:12;1457:57;767:808;;;;-1:-1:-1;767:808:11;;-1:-1:-1;1541:2:11;1533:11;;1563:6;767:808;-1:-1:-1;;;767:808:11:o;1787:186::-;1846:6;1899:2;1887:9;1878:7;1874:23;1870:32;1867:52;;;1915:1;1912;1905:12;1867:52;1938:29;1957:9;1938:29;:::i;:::-;1928:39;1787:186;-1:-1:-1;;;1787:186:11:o;1978:248::-;2046:6;2054;2107:2;2095:9;2086:7;2082:23;2078:32;2075:52;;;2123:1;2120;2113:12;2075:52;-1:-1:-1;;2146:23:11;;;2216:2;2201:18;;;2188:32;;-1:-1:-1;1978:248:11:o;2917:555::-;-1:-1:-1;;;;;3240:15:11;;;3222:34;;3292:15;;;;3287:2;3272:18;;3265:43;3339:2;3324:18;;3317:34;;;;3387:3;3382:2;3367:18;;3360:31;;;3165:4;3407:19;;;3400:30;3202:3;3447:19;;2917:555::o;4174:127::-;4235:10;4230:3;4226:20;4223:1;4216:31;4266:4;4263:1;4256:15;4290:4;4287:1;4280:15;4306:128;4346:3;4377:1;4373:6;4370:1;4367:13;4364:39;;;4383:18;;:::i;:::-;-1:-1:-1;4419:9:11;;4306:128::o;4718:277::-;4785:6;4838:2;4826:9;4817:7;4813:23;4809:32;4806:52;;;4854:1;4851;4844:12;4806:52;4886:9;4880:16;4939:5;4932:13;4925:21;4918:5;4915:32;4905:60;;4961:1;4958;4951:12;5000:125;5040:4;5068:1;5065;5062:8;5059:34;;;5073:18;;:::i;:::-;-1:-1:-1;5110:9:11;;5000:125::o;5130:168::-;5170:7;5236:1;5232;5228:6;5224:14;5221:1;5218:21;5213:1;5206:9;5199:17;5195:45;5192:71;;;5243:18;;:::i;:::-;-1:-1:-1;5283:9:11;;5130:168::o;5303:217::-;5343:1;5369;5359:132;;5413:10;5408:3;5404:20;5401:1;5394:31;5448:4;5445:1;5438:15;5476:4;5473:1;5466:15;5359:132;-1:-1:-1;5505:9:11;;5303:217::o;8594:258::-;8666:1;8676:113;8690:6;8687:1;8684:13;8676:113;;;8766:11;;;8760:18;8747:11;;;8740:39;8712:2;8705:10;8676:113;;;8807:6;8804:1;8801:13;8798:48;;;-1:-1:-1;;8842:1:11;8824:16;;8817:27;8594:258::o;8857:274::-;8986:3;9024:6;9018:13;9040:53;9086:6;9081:3;9074:4;9066:6;9062:17;9040:53;:::i;:::-;9109:16;;;;;8857:274;-1:-1:-1;;8857:274:11:o;9494:383::-;9643:2;9632:9;9625:21;9606:4;9675:6;9669:13;9718:6;9713:2;9702:9;9698:18;9691:34;9734:66;9793:6;9788:2;9777:9;9773:18;9768:2;9760:6;9756:15;9734:66;:::i;:::-;9861:2;9840:15;-1:-1:-1;;9836:29:11;9821:45;;;;9868:2;9817:54;;9494:383;-1:-1:-1;;9494:383:11:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1042400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"AdminAddToken(uint256)": "infinite",
								"AdminWithDrawToken(uint256)": "infinite",
								"Deposit(uint256)": "infinite",
								"DepositNFT(uint256,uint256)": "infinite",
								"Details(address)": "6872",
								"ERC20Address()": "2404",
								"ERC721address()": "2448",
								"OwnerTokens(address)": "2642",
								"Reward(address)": "2553",
								"UpdateERC20(address)": "26847",
								"UpdateERC721(address)": "26823",
								"UpdateRatePersentage(uint256)": "24620",
								"UserRate(address)": "6850",
								"Utilization()": "6868",
								"Withdraw()": "infinite",
								"calculateIntrest(address)": "infinite",
								"onERC721Received(address,address,uint256,bytes)": "infinite",
								"owenerERC20()": "2405",
								"owner()": "2354",
								"renounceOwnership()": "infinite",
								"showReward(address)": "infinite",
								"totalOwnerToken()": "2330",
								"transferOwnership(address)": "28443",
								"withdrawNFT(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 348,
									"end": 8362,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "CODESIZE",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "tag",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 1357,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1451,
									"end": 1464,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "AND",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1451,
									"end": 1481,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1491,
									"end": 1495,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 1491,
									"end": 1513,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1491,
									"end": 1513,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1491,
									"end": 1513,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1491,
									"end": 1513,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1535,
									"name": "PUSH",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1551,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2"
								},
								{
									"begin": 1561,
									"end": 1585,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1561,
									"end": 1585,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 1561,
									"end": 1585,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1561,
									"end": 1585,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1561,
									"end": 1585,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1575,
									"end": 1585,
									"name": "CALLER",
									"source": 10
								},
								{
									"begin": 1561,
									"end": 1585,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1561,
									"end": 1585,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1561,
									"end": 1585,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "16"
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "tag",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 93,
									"end": 106,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 93,
									"end": 106,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 135,
									"end": 166,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 135,
									"end": 166,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 125,
									"end": 167,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 125,
									"end": 167,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 115,
									"end": 185,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 181,
									"end": 182,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 178,
									"end": 179,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 171,
									"end": 183,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 115,
									"end": 185,
									"name": "tag",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 14,
									"end": 191,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "tag",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 284,
									"end": 290,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 292,
									"end": 298,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 300,
									"end": 306,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 353,
									"end": 355,
									"name": "PUSH",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 341,
									"end": 350,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 332,
									"end": 339,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 328,
									"end": 351,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 324,
									"end": 356,
									"name": "SLT",
									"source": 11
								},
								{
									"begin": 321,
									"end": 373,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 321,
									"end": 373,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 321,
									"end": 373,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 369,
									"end": 370,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 366,
									"end": 367,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 359,
									"end": 371,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 321,
									"end": 373,
									"name": "tag",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 321,
									"end": 373,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 392,
									"end": 432,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 422,
									"end": 431,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 392,
									"end": 432,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "tag",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 382,
									"end": 432,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 382,
									"end": 432,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 472,
									"end": 474,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 461,
									"end": 470,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 457,
									"end": 475,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 451,
									"end": 476,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 441,
									"end": 476,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 441,
									"end": 476,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 495,
									"end": 544,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 540,
									"end": 542,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 529,
									"end": 538,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 525,
									"end": 543,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 495,
									"end": 544,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 495,
									"end": 544,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 495,
									"end": 544,
									"name": "tag",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 495,
									"end": 544,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 485,
									"end": 544,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 485,
									"end": 544,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "tag",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 348,
									"end": 8362,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d922bfa8be0079fc66cec85ae0658e582aa31e35b5a16532f5666b0f8c60393564736f6c634300080d0033",
									".code": [
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "8DA5CB5B"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "C45AF5D8"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "C45AF5D8"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "E4458B30"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "E88CC2BE"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "EE0106D2"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "F2FDE38B"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "F89D832F"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "tag",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "8DA5CB5B"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "934ED772"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "A6021ACE"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "A88E132F"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "B7171A2E"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "C0CD40EE"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "tag",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "4D6CE1E5"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "29"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "4D6CE1E5"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "57488064"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "57EA89B6"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "715018A6"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "7B2F247F"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "8B73E331"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "tag",
											"source": 10,
											"value": "29"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "23245D7"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "CCFF6E9"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "10FD4FBA"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "150B7A02"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "275BD33F"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "2FFCE210"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8362,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "tag",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "tag",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "tag",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 535,
											"end": 562,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 535,
											"end": 562,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 535,
											"end": 562,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "tag",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 535,
											"end": 562,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 535,
											"end": 562,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 345,
											"end": 370,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 345,
											"end": 370,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 345,
											"end": 370,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 333,
											"end": 335,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 318,
											"end": 336,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 535,
											"end": 562,
											"name": "tag",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 535,
											"end": 562,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 535,
											"end": 562,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 535,
											"end": 562,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 470,
											"end": 496,
											"name": "tag",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 470,
											"end": 496,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 470,
											"end": 496,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 470,
											"end": 496,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 470,
											"end": 496,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 470,
											"end": 496,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 470,
											"end": 496,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 470,
											"end": 496,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 470,
											"end": 496,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 470,
											"end": 496,
											"name": "tag",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 470,
											"end": 496,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 470,
											"end": 496,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 470,
											"end": 496,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 545,
											"end": 577,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 577,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 577,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 527,
											"end": 578,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 527,
											"end": 578,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 515,
											"end": 517,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 500,
											"end": 518,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 470,
											"end": 496,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 381,
											"end": 584,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "tag",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1742,
											"end": 1775,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1742,
											"end": 1775,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1742,
											"end": 1775,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 1776,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 1776,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1712,
											"end": 1714,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1697,
											"end": 1715,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8189,
											"end": 8360,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 1580,
											"end": 1782,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "tag",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "tag",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 878,
											"end": 923,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 878,
											"end": 923,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "tag",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "tag",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "tag",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 833,
											"end": 872,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 833,
											"end": 872,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3632,
											"end": 4509,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 3632,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3632,
											"end": 4509,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 3632,
											"end": 4509,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3632,
											"end": 4509,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2713,
											"end": 2875,
											"name": "tag",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 2713,
											"end": 2875,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2713,
											"end": 2875,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 2713,
											"end": 2875,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 2713,
											"end": 2875,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "tag",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "tag",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "tag",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 502,
											"end": 529,
											"name": "tag",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 502,
											"end": 529,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 502,
											"end": 529,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 502,
											"end": 529,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 502,
											"end": 529,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 502,
											"end": 529,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 502,
											"end": 529,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 502,
											"end": 529,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 502,
											"end": 529,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "tag",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 436,
											"end": 464,
											"name": "tag",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 436,
											"end": 464,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 436,
											"end": 464,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 436,
											"end": 464,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 436,
											"end": 464,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 436,
											"end": 464,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 436,
											"end": 464,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 436,
											"end": 464,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 436,
											"end": 464,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "tag",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "tag",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "tag",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "tag",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "tag",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 929,
											"end": 976,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 929,
											"end": 976,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2427,
											"end": 2452,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 2427,
											"end": 2452,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2427,
											"end": 2452,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2483,
											"end": 2485,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2468,
											"end": 2486,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2468,
											"end": 2486,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2461,
											"end": 2495,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2461,
											"end": 2495,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2461,
											"end": 2495,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2461,
											"end": 2495,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2538,
											"end": 2552,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2531,
											"end": 2553,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2511,
											"end": 2529,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2511,
											"end": 2529,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2511,
											"end": 2529,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2554,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2415,
											"end": 2417,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 2400,
											"end": 2418,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 929,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 2231,
											"end": 2560,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 785,
											"end": 827,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "tag",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 785,
											"end": 827,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "tag",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "tag",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "tag",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8008,
											"end": 8018,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7999,
											"end": 8019,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7999,
											"end": 8019,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7999,
											"end": 8019,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7999,
											"end": 8019,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7999,
											"end": 8007,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 7999,
											"end": 8019,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7999,
											"end": 8019,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7999,
											"end": 8019,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7999,
											"end": 8019,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7999,
											"end": 8019,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7999,
											"end": 8025,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7999,
											"end": 8025,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7999,
											"end": 8025,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7999,
											"end": 8025,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 7999,
											"end": 8025,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2767,
											"end": 2769,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2749,
											"end": 2770,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2806,
											"end": 2808,
											"name": "PUSH",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 2786,
											"end": 2804,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 2786,
											"end": 2804,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2786,
											"end": 2804,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2779,
											"end": 2809,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2845,
											"end": 2870,
											"name": "PUSH",
											"source": 11,
											"value": "506C65617365204669727374205374616B65204E465473000000000000000000"
										},
										{
											"begin": 2825,
											"end": 2843,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 2825,
											"end": 2843,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2825,
											"end": 2843,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2818,
											"end": 2871,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2888,
											"end": 2906,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 2888,
											"end": 2906,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "tag",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "tag",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 7991,
											"end": 8052,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8070,
											"end": 8083,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8070,
											"end": 8083,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C46A7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8070,
											"end": 8083,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8070,
											"end": 8083,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8070,
											"end": 8083,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8070,
											"end": 8083,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8101,
											"name": "PUSH",
											"source": 10,
											"value": "B88D4FDE"
										},
										{
											"begin": 8062,
											"end": 8101,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8110,
											"end": 8114,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 8110,
											"end": 8114,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8117,
											"end": 8127,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8117,
											"end": 8127,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8128,
											"end": 8136,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8128,
											"end": 8136,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "tag",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "tag",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "tag",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 8062,
											"end": 8140,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8166,
											"end": 8176,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8157,
											"end": 8165,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8177,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7935,
											"end": 8184,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "tag",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6791,
											"end": 6803,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6791,
											"end": 6819,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 6719,
											"end": 6826,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "tag",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3236,
											"end": 3246,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3247,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3228,
											"end": 3247,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3247,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3247,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3235,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 3228,
											"end": 3247,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3228,
											"end": 3247,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3247,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3228,
											"end": 3247,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3247,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3253,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3228,
											"end": 3253,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3253,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3253,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3228,
											"end": 3253,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3227,
											"end": 3253,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3679,
											"end": 3681,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3661,
											"end": 3682,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3718,
											"end": 3720,
											"name": "PUSH",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 3698,
											"end": 3716,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 3698,
											"end": 3716,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3698,
											"end": 3716,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 3721,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "506C65617365204669727374205769746844726177"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3737,
											"end": 3755,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 3737,
											"end": 3755,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3737,
											"end": 3755,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3730,
											"end": 3781,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3798,
											"end": 3816,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 3798,
											"end": 3816,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 3477,
											"end": 3822,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "tag",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 3219,
											"end": 3278,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3325,
											"end": 3340,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3341,
											"end": 3345,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3296,
											"end": 3306,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3295,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3307,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3288,
											"end": 3346,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 3375,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 3363,
											"end": 3375,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3356,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 3356,
											"end": 3430,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3363,
											"end": 3375,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 3375,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 3375,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 3375,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3414,
											"end": 3418,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 3310,
											"end": 3346,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3356,
											"end": 3393,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 3356,
											"end": 3430,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3356,
											"end": 3430,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 3356,
											"end": 3430,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3168,
											"end": 3437,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3632,
											"end": 4509,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3632,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3685,
											"end": 3695,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 3696,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3677,
											"end": 3696,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 3696,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 3696,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 3684,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 3677,
											"end": 3696,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3677,
											"end": 3696,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 3696,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3677,
											"end": 3696,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 3696,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 3702,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3677,
											"end": 3702,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 3702,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 3702,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3677,
											"end": 3702,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "136"
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4029,
											"end": 4031,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4011,
											"end": 4032,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4068,
											"end": 4070,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 4048,
											"end": 4066,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4048,
											"end": 4066,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4048,
											"end": 4066,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4041,
											"end": 4071,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "506C65617365204669727374205374616B65"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4087,
											"end": 4105,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4087,
											"end": 4105,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4087,
											"end": 4105,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4080,
											"end": 4128,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4145,
											"end": 4163,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 4145,
											"end": 4163,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 3827,
											"end": 4169,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "tag",
											"source": 10,
											"value": "136"
										},
										{
											"begin": 3669,
											"end": 3724,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3747,
											"end": 3757,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3738,
											"end": 3758,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3738,
											"end": 3758,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3738,
											"end": 3758,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3738,
											"end": 3758,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3738,
											"end": 3746,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 3738,
											"end": 3758,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3738,
											"end": 3758,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3738,
											"end": 3758,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3738,
											"end": 3758,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3738,
											"end": 3758,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3738,
											"end": 3764,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3738,
											"end": 3764,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3738,
											"end": 3764,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3738,
											"end": 3764,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3738,
											"end": 3764,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3801,
											"end": 3811,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3779,
											"end": 3790,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3793,
											"end": 3812,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3793,
											"end": 3812,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3793,
											"end": 3812,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3793,
											"end": 3800,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 3793,
											"end": 3812,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3793,
											"end": 3812,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3793,
											"end": 3812,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3793,
											"end": 3812,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3793,
											"end": 3812,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3793,
											"end": 3822,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3793,
											"end": 3822,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3850,
											"end": 3878,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 3850,
											"end": 3878,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3850,
											"end": 3866,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 3850,
											"end": 3878,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3850,
											"end": 3878,
											"name": "tag",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 3850,
											"end": 3878,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3900,
											"end": 3913,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3900,
											"end": 3913,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3900,
											"end": 3913,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3947,
											"end": 3957,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3900,
											"end": 3913,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3966,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3978,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3986,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3986,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3986,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3986,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C46A7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3836,
											"end": 3878,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3836,
											"end": 3878,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3900,
											"end": 3913,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3900,
											"end": 3913,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3900,
											"end": 3913,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3900,
											"end": 3913,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3931,
											"name": "PUSH",
											"source": 10,
											"value": "B88D4FDE"
										},
										{
											"begin": 3892,
											"end": 3931,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3940,
											"end": 3944,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 3940,
											"end": 3944,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3947,
											"end": 3957,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3947,
											"end": 3957,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3958,
											"end": 3986,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "tag",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "tag",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "tag",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 3892,
											"end": 3990,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4011,
											"end": 4023,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 4011,
											"end": 4023,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4011,
											"end": 4023,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4011,
											"end": 4023,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4004,
											"end": 4033,
											"name": "PUSH",
											"source": 10,
											"value": "A9059CBB"
										},
										{
											"begin": 4004,
											"end": 4033,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4034,
											"end": 4044,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4046,
											"end": 4061,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 4055,
											"end": 4061,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4046,
											"end": 4052,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4046,
											"end": 4061,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 4046,
											"end": 4061,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4046,
											"end": 4061,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 4046,
											"end": 4061,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4631,
											"end": 4663,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4631,
											"end": 4663,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4631,
											"end": 4663,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4613,
											"end": 4664,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4698,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4680,
											"end": 4698,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4698,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4673,
											"end": 4707,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4586,
											"end": 4604,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4586,
											"end": 4604,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "tag",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 4004,
											"end": 4062,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4088,
											"end": 4099,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4088,
											"end": 4099,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4088,
											"end": 4099,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4087,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4104,
											"end": 4110,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4104,
											"end": 4110,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4100,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4104,
											"end": 4110,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4104,
											"end": 4110,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4140,
											"end": 4150,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4139,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4131,
											"end": 4151,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4124,
											"end": 4151,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4172,
											"end": 4179,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4172,
											"end": 4191,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4172,
											"end": 4191,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 4172,
											"end": 4191,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4172,
											"end": 4191,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4172,
											"end": 4191,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4172,
											"end": 4191,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4191,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "tag",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4251,
											"end": 4261,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4240,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4243,
											"end": 4262,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4243,
											"end": 4262,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4243,
											"end": 4262,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4243,
											"end": 4250,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4243,
											"end": 4262,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4243,
											"end": 4262,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4243,
											"end": 4262,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4243,
											"end": 4262,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4243,
											"end": 4262,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4243,
											"end": 4272,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4243,
											"end": 4272,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4328,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 4300,
											"end": 4328,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4316,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 4300,
											"end": 4328,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4300,
											"end": 4328,
											"name": "tag",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 4300,
											"end": 4328,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4349,
											"end": 4361,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 4349,
											"end": 4361,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4286,
											"end": 4328,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4286,
											"end": 4328,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4349,
											"end": 4361,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4371,
											"name": "PUSH",
											"source": 10,
											"value": "A9059CBB"
										},
										{
											"begin": 4372,
											"end": 4382,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4384,
											"end": 4399,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 4286,
											"end": 4328,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4384,
											"end": 4390,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4384,
											"end": 4399,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 4384,
											"end": 4399,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4384,
											"end": 4399,
											"name": "tag",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 4384,
											"end": 4399,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4631,
											"end": 4663,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4631,
											"end": 4663,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4631,
											"end": 4663,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4613,
											"end": 4664,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4698,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4680,
											"end": 4698,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4698,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4673,
											"end": 4707,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4586,
											"end": 4604,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4586,
											"end": 4604,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "tag",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 4342,
											"end": 4400,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4426,
											"end": 4437,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4426,
											"end": 4437,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4426,
											"end": 4437,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4425,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4438,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4442,
											"end": 4448,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4414,
											"end": 4448,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4477,
											"end": 4487,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4469,
											"end": 4476,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4469,
											"end": 4488,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4462,
											"end": 4488,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "tag",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 3734,
											"end": 4499,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3632,
											"end": 4509,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2713,
											"end": 2875,
											"name": "tag",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 2713,
											"end": 2875,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2826,
											"end": 2841,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2826,
											"end": 2841,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2806,
											"end": 2817,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 2806,
											"end": 2817,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2806,
											"end": 2817,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2756,
											"end": 2763,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2794,
											"end": 2818,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2794,
											"end": 2818,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2794,
											"end": 2818,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2794,
											"end": 2805,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 2794,
											"end": 2818,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2818,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2794,
											"end": 2818,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2818,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2794,
											"end": 2818,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 2794,
											"end": 2818,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2756,
											"end": 2763,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2756,
											"end": 2763,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2756,
											"end": 2763,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2756,
											"end": 2763,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2794,
											"end": 2824,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "169"
										},
										{
											"begin": 2794,
											"end": 2824,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2821,
											"end": 2824,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2794,
											"end": 2824,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 2794,
											"end": 2824,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2794,
											"end": 2824,
											"name": "tag",
											"source": 10,
											"value": "169"
										},
										{
											"begin": 2794,
											"end": 2824,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2793,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 2793,
											"end": 2841,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2793,
											"end": 2841,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2793,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 2793,
											"end": 2841,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2793,
											"end": 2841,
											"name": "tag",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 2793,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2775,
											"end": 2841,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2713,
											"end": 2875,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2713,
											"end": 2875,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5748,
											"end": 5755,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5778,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5783,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5789,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 5770,
											"end": 5789,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5789,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5770,
											"end": 5789,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 5770,
											"end": 5789,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5766,
											"end": 6245,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5766,
											"end": 6245,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 5766,
											"end": 6245,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5813,
											"end": 5827,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5902,
											"end": 5909,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5902,
											"end": 5914,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5902,
											"end": 5924,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5902,
											"end": 5924,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5902,
											"end": 5924,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5926,
											"end": 5928,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 5926,
											"end": 5928,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5884,
											"end": 5924,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 5884,
											"end": 5924,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5884,
											"end": 5899,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 5884,
											"end": 5924,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 5884,
											"end": 5924,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5884,
											"end": 5924,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 5884,
											"end": 5924,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "tag",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5883,
											"end": 5928,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5864,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5869,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5878,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5831,
											"end": 5838,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 5831,
											"end": 5843,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5831,
											"end": 5843,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5831,
											"end": 5843,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5831,
											"end": 5843,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5831,
											"end": 5843,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5831,
											"end": 5843,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5831,
											"end": 5853,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5831,
											"end": 5878,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 5831,
											"end": 5878,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5856,
											"end": 5878,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5831,
											"end": 5878,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 5831,
											"end": 5878,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5831,
											"end": 5878,
											"name": "tag",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 5831,
											"end": 5878,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5830,
											"end": 5929,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 5830,
											"end": 5929,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5830,
											"end": 5929,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5830,
											"end": 5929,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 5830,
											"end": 5929,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5830,
											"end": 5929,
											"name": "tag",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 5830,
											"end": 5929,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5813,
											"end": 5929,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5943,
											"end": 5959,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5962,
											"end": 5977,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 5974,
											"end": 5977,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5813,
											"end": 5929,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5962,
											"end": 5977,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 5962,
											"end": 5977,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5962,
											"end": 5977,
											"name": "tag",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 5962,
											"end": 5977,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5943,
											"end": 5977,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5766,
											"end": 6245,
											"name": "tag",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 5766,
											"end": 6245,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6056,
											"end": 6070,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6127,
											"end": 6134,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6127,
											"end": 6139,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6127,
											"end": 6149,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6127,
											"end": 6149,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6127,
											"end": 6149,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6151,
											"end": 6153,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 6151,
											"end": 6153,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6109,
											"end": 6149,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 6109,
											"end": 6149,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6109,
											"end": 6124,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 6109,
											"end": 6149,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 6109,
											"end": 6149,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6109,
											"end": 6149,
											"name": "tag",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 6109,
											"end": 6149,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6108,
											"end": 6153,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 6108,
											"end": 6153,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6108,
											"end": 6153,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6108,
											"end": 6153,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 6108,
											"end": 6153,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6108,
											"end": 6153,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 6108,
											"end": 6153,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6099,
											"end": 6103,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 6099,
											"end": 6103,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6081,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6086,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6096,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6099,
											"end": 6103,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 6074,
											"end": 6103,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5766,
											"end": 6245,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 5766,
											"end": 6245,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5689,
											"end": 6251,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "tag",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7443,
											"end": 7453,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7454,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7435,
											"end": 7454,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7454,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7454,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7442,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 7435,
											"end": 7454,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7435,
											"end": 7454,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7454,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7435,
											"end": 7454,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7454,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7460,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7435,
											"end": 7460,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7460,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7435,
											"end": 7460,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 7435,
											"end": 7460,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5727,
											"end": 5729,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5709,
											"end": 5730,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5766,
											"end": 5768,
											"name": "PUSH",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 5746,
											"end": 5764,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5746,
											"end": 5764,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5746,
											"end": 5764,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5739,
											"end": 5769,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4669727374204465706F73697420546F6B656E73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5785,
											"end": 5803,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 5785,
											"end": 5803,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5785,
											"end": 5803,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5778,
											"end": 5828,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5845,
											"end": 5863,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 5845,
											"end": 5863,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 5525,
											"end": 5869,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 7427,
											"end": 7484,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7511,
											"end": 7521,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7502,
											"end": 7522,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7502,
											"end": 7522,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7502,
											"end": 7522,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7502,
											"end": 7522,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7502,
											"end": 7510,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 7502,
											"end": 7522,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7502,
											"end": 7522,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7502,
											"end": 7522,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7502,
											"end": 7522,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7502,
											"end": 7522,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7502,
											"end": 7528,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7502,
											"end": 7528,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7502,
											"end": 7528,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7502,
											"end": 7528,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 7502,
											"end": 7528,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6076,
											"end": 6078,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6058,
											"end": 6079,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6115,
											"end": 6117,
											"name": "PUSH",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 6095,
											"end": 6113,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 6095,
											"end": 6113,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6095,
											"end": 6113,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6088,
											"end": 6118,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6154,
											"end": 6188,
											"name": "PUSH",
											"source": 11,
											"value": "506C6561736520556E7374616B6520796F7572206465706F7369746564204E46"
										},
										{
											"begin": 6134,
											"end": 6152,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 6134,
											"end": 6152,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6134,
											"end": 6152,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6127,
											"end": 6189,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "15"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6205,
											"end": 6223,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 6205,
											"end": 6223,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6205,
											"end": 6223,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6198,
											"end": 6229,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6246,
											"end": 6265,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 6246,
											"end": 6265,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 5874,
											"end": 6271,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "tag",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 7494,
											"end": 7565,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7623,
											"end": 7627,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7584,
											"end": 7594,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7583,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7595,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7628,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 7647,
											"end": 7660,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7647,
											"end": 7660,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C46A7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7647,
											"end": 7660,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7647,
											"end": 7660,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7647,
											"end": 7660,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7647,
											"end": 7660,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7678,
											"name": "PUSH",
											"source": 10,
											"value": "B88D4FDE"
										},
										{
											"begin": 7639,
											"end": 7678,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7702,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7702,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7598,
											"end": 7628,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "tag",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "tag",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "tag",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7639,
											"end": 7716,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7361,
											"end": 7723,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "tag",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 2300,
											"end": 2505,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "199"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "199"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2379,
											"end": 2389,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2378,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2394,
											"end": 2400,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2394,
											"end": 2400,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2390,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2394,
											"end": 2400,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2394,
											"end": 2400,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "tag",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2429,
											"end": 2435,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2425,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2410,
											"end": 2425,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "tag",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2410,
											"end": 2435,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2452,
											"end": 2464,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 2452,
											"end": 2464,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2445,
											"end": 2498,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 2445,
											"end": 2498,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2452,
											"end": 2464,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2479,
											"end": 2489,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 2491,
											"end": 2497,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2445,
											"end": 2478,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 2445,
											"end": 2498,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "tag",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 1818,
											"end": 2108,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1912,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 1901,
											"end": 1912,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1912,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1889,
											"end": 1899,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1889,
											"end": 1912,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6478,
											"end": 6480,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6460,
											"end": 6481,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6517,
											"end": 6519,
											"name": "PUSH",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 6497,
											"end": 6515,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 6497,
											"end": 6515,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6497,
											"end": 6515,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6490,
											"end": 6520,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6556,
											"end": 6581,
											"name": "PUSH",
											"source": 11,
											"value": "4F6E6C79204F776E65722063616E207472616E73666572000000000000000000"
										},
										{
											"begin": 6536,
											"end": 6554,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 6536,
											"end": 6554,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6536,
											"end": 6554,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6529,
											"end": 6582,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6599,
											"end": 6617,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 6599,
											"end": 6617,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "117"
										},
										{
											"begin": 6276,
											"end": 6623,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "tag",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 1881,
											"end": 1939,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1961,
											"end": 1971,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1960,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1975,
											"end": 1982,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1975,
											"end": 1982,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1975,
											"end": 1982,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1975,
											"end": 1982,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "tag",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 1982,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2011,
											"end": 2018,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 2007,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1992,
											"end": 2007,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "tag",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1992,
											"end": 2018,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2035,
											"end": 2047,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 2035,
											"end": 2047,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2028,
											"end": 2101,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 2028,
											"end": 2101,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2035,
											"end": 2047,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2066,
											"end": 2076,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 2086,
											"end": 2090,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 2093,
											"end": 2100,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2028,
											"end": 2065,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 2028,
											"end": 2101,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 4702,
											"end": 5425,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4755,
											"end": 4766,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4786,
											"end": 4794,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4786,
											"end": 4799,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4786,
											"end": 4805,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4786,
											"end": 4805,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4786,
											"end": 4805,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4786,
											"end": 4805,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 4786,
											"end": 4805,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4782,
											"end": 5410,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4782,
											"end": 5410,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 4782,
											"end": 5410,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4829,
											"end": 4843,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4925,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4940,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4918,
											"end": 4940,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4940,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4942,
											"end": 4944,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 4942,
											"end": 4944,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4900,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 4900,
											"end": 4940,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4900,
											"end": 4915,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 4900,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 4900,
											"end": 4940,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4900,
											"end": 4940,
											"name": "tag",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 4900,
											"end": 4940,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4899,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 4899,
											"end": 4944,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4899,
											"end": 4944,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4899,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 4899,
											"end": 4944,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4899,
											"end": 4944,
											"name": "tag",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 4899,
											"end": 4944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4880,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4894,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4854,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4847,
											"end": 4859,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4859,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4859,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4859,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4859,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4859,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4869,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4894,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 4847,
											"end": 4894,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4872,
											"end": 4894,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4894,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 4847,
											"end": 4894,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4847,
											"end": 4894,
											"name": "tag",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 4847,
											"end": 4894,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4846,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 4846,
											"end": 4945,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4846,
											"end": 4945,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4846,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 4846,
											"end": 4945,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4846,
											"end": 4945,
											"name": "tag",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 4846,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4829,
											"end": 4945,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4959,
											"end": 4975,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4978,
											"end": 4993,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 4990,
											"end": 4993,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4829,
											"end": 4945,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4978,
											"end": 4993,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 4978,
											"end": 4993,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4978,
											"end": 4993,
											"name": "tag",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 4978,
											"end": 4993,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5030,
											"end": 5037,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5030,
											"end": 5042,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5030,
											"end": 5052,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4959,
											"end": 4993,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4959,
											"end": 4993,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5016,
											"end": 5052,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 5016,
											"end": 5052,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4959,
											"end": 4993,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5016,
											"end": 5052,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 5016,
											"end": 5052,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5016,
											"end": 5052,
											"name": "tag",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 5016,
											"end": 5052,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5007,
											"end": 5052,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5073,
											"end": 5099,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 5080,
											"end": 5099,
											"name": "PUSH",
											"source": 10,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 5007,
											"end": 5052,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5073,
											"end": 5099,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 5073,
											"end": 5099,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4782,
											"end": 5410,
											"name": "tag",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 4782,
											"end": 5410,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5147,
											"end": 5161,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5218,
											"end": 5225,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5218,
											"end": 5230,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5218,
											"end": 5240,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5218,
											"end": 5240,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5218,
											"end": 5240,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5242,
											"end": 5244,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 5242,
											"end": 5244,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5200,
											"end": 5240,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 5200,
											"end": 5240,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5200,
											"end": 5215,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 5200,
											"end": 5240,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 5200,
											"end": 5240,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5200,
											"end": 5240,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 5200,
											"end": 5240,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5199,
											"end": 5244,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 5199,
											"end": 5244,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5199,
											"end": 5244,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5199,
											"end": 5244,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 5199,
											"end": 5244,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5199,
											"end": 5244,
											"name": "tag",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 5199,
											"end": 5244,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5190,
											"end": 5194,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 5190,
											"end": 5194,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5172,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5177,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5187,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5194,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 5165,
											"end": 5194,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5190,
											"end": 5194,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5165,
											"end": 5194,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 5165,
											"end": 5194,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "tag",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6505,
											"end": 6518,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6505,
											"end": 6535,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 6433,
											"end": 6542,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6830,
											"end": 6832,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6812,
											"end": 6833,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6869,
											"end": 6871,
											"name": "PUSH",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 6849,
											"end": 6867,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 6849,
											"end": 6867,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6849,
											"end": 6867,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6842,
											"end": 6872,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6908,
											"end": 6942,
											"name": "PUSH",
											"source": 11,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 6888,
											"end": 6906,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 6888,
											"end": 6906,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6888,
											"end": 6906,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6881,
											"end": 6943,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6959,
											"end": 6977,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 6959,
											"end": 6977,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6959,
											"end": 6977,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6952,
											"end": 6988,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7005,
											"end": 7024,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 7005,
											"end": 7024,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 6628,
											"end": 7030,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "tag",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7089,
											"end": 7093,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 7089,
											"end": 7111,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 7008,
											"end": 7118,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7237,
											"end": 7239,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7219,
											"end": 7240,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7219,
											"end": 7240,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7219,
											"end": 7240,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7256,
											"end": 7274,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7256,
											"end": 7274,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7256,
											"end": 7274,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7249,
											"end": 7279,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7315,
											"end": 7349,
											"name": "PUSH",
											"source": 11,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 7295,
											"end": 7313,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 7295,
											"end": 7313,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7295,
											"end": 7313,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7288,
											"end": 7350,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7367,
											"end": 7385,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 7367,
											"end": 7385,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 7035,
											"end": 7391,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "tag",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7654,
											"end": 7669,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7654,
											"end": 7669,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7654,
											"end": 7669,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7636,
											"end": 7670,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7706,
											"end": 7721,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7706,
											"end": 7721,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7686,
											"end": 7704,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 7686,
											"end": 7704,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7686,
											"end": 7704,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7679,
											"end": 7722,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7738,
											"end": 7756,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 7738,
											"end": 7756,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7738,
											"end": 7756,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7731,
											"end": 7765,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7731,
											"end": 7765,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7731,
											"end": 7765,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "252"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7571,
											"end": 7589,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 7571,
											"end": 7589,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "tag",
											"source": 3,
											"value": "253"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "255"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "tag",
											"source": 3,
											"value": "252"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "tag",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4631,
											"end": 4663,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4631,
											"end": 4663,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4613,
											"end": 4664,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4698,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4680,
											"end": 4698,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4698,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4673,
											"end": 4707,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4673,
											"end": 4707,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4673,
											"end": 4707,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 875,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "258"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 895,
											"end": 900,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 895,
											"end": 900,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 925,
											"end": 948,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4586,
											"end": 4604,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 4586,
											"end": 4604,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "253"
										},
										{
											"begin": 4439,
											"end": 4713,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 875,
											"end": 961,
											"name": "tag",
											"source": 3,
											"value": "258"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "tag",
											"source": 3,
											"value": "255"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4189,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "262"
										},
										{
											"begin": 4220,
											"end": 4224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "263"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "tag",
											"source": 3,
											"value": "262"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4275,
											"end": 4296,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "258"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4370,
											"end": 4380,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "265"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "tag",
											"source": 3,
											"value": "265"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "258"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7978,
											"end": 7980,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7960,
											"end": 7981,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8017,
											"end": 8019,
											"name": "PUSH",
											"source": 11,
											"value": "2A"
										},
										{
											"begin": 7997,
											"end": 8015,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7997,
											"end": 8015,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7997,
											"end": 8015,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7990,
											"end": 8020,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8056,
											"end": 8090,
											"name": "PUSH",
											"source": 11,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 8036,
											"end": 8054,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 8036,
											"end": 8054,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8036,
											"end": 8054,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8029,
											"end": 8091,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8107,
											"end": 8125,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 8107,
											"end": 8125,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8107,
											"end": 8125,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8100,
											"end": 8140,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8157,
											"end": 8176,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 8157,
											"end": 8176,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 7776,
											"end": 8182,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "tag",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 4059,
											"end": 4065,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4067,
											"end": 4071,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4088,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5253,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5255,
											"end": 5278,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5288,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5301,
											"end": 5306,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5308,
											"end": 5312,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "276"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "277"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 7,
											"value": "276"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "3F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 5357,
											"end": 5363,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5374,
											"end": 5384,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5386,
											"end": 5398,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5330,
											"end": 5356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "tag",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "SWAP8",
											"source": 7
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7646,
											"end": 7658,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 7674,
											"end": 7681,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7701,
											"end": 7711,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7722,
											"end": 7723,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7701,
											"end": 7723,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9338,
											"end": 9340,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9320,
											"end": 9341,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9377,
											"end": 9379,
											"name": "PUSH",
											"source": 11,
											"value": "1D"
										},
										{
											"begin": 9357,
											"end": 9375,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 9357,
											"end": 9375,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9357,
											"end": 9375,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9350,
											"end": 9380,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9416,
											"end": 9447,
											"name": "PUSH",
											"source": 11,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 9396,
											"end": 9414,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 9396,
											"end": 9414,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9396,
											"end": 9414,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9389,
											"end": 9448,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9465,
											"end": 9483,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 9465,
											"end": 9483,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 9136,
											"end": 9489,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "tag",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 8052,
											"end": 8062,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8064,
											"end": 8076,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8775,
											"end": 8796,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "296"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 9003,
											"end": 9013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8997,
											"end": 9014,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9059,
											"end": 9074,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9046,
											"end": 9056,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9042,
											"end": 9044,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9038,
											"end": 9057,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9031,
											"end": 9075,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "tag",
											"source": 7,
											"value": "296"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9126,
											"end": 9138,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "299"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "tag",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "305"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 11,
											"value": "305"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 165,
											"end": 188,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 165,
											"end": 188,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14,
											"end": 194,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 589,
											"end": 762,
											"name": "tag",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 589,
											"end": 762,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 657,
											"end": 677,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 657,
											"end": 677,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 706,
											"end": 737,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 706,
											"end": 737,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 696,
											"end": 738,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 696,
											"end": 738,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 686,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "180"
										},
										{
											"begin": 686,
											"end": 756,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 752,
											"end": 753,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 749,
											"end": 750,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 742,
											"end": 754,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "tag",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 864,
											"end": 870,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 872,
											"end": 878,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 880,
											"end": 886,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 888,
											"end": 894,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 896,
											"end": 902,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 949,
											"end": 952,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 937,
											"end": 946,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 928,
											"end": 935,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 924,
											"end": 947,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 920,
											"end": 953,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 917,
											"end": 970,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 917,
											"end": 970,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 917,
											"end": 970,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 966,
											"end": 967,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 963,
											"end": 964,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 956,
											"end": 968,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 917,
											"end": 970,
											"name": "tag",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 917,
											"end": 970,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 989,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 1008,
											"end": 1017,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 989,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 989,
											"end": 1018,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 989,
											"end": 1018,
											"name": "tag",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 989,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 979,
											"end": 1018,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 979,
											"end": 1018,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1037,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 1071,
											"end": 1073,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1060,
											"end": 1069,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 1056,
											"end": 1074,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1037,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 1037,
											"end": 1075,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1037,
											"end": 1075,
											"name": "tag",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 1037,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1027,
											"end": 1075,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1027,
											"end": 1075,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1122,
											"end": 1124,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1111,
											"end": 1120,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1107,
											"end": 1125,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1094,
											"end": 1126,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1084,
											"end": 1126,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1084,
											"end": 1126,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1177,
											"end": 1179,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 1166,
											"end": 1175,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1162,
											"end": 1180,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1149,
											"end": 1181,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1200,
											"end": 1218,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1241,
											"end": 1243,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1233,
											"end": 1239,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1230,
											"end": 1244,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1227,
											"end": 1261,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1227,
											"end": 1261,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "314"
										},
										{
											"begin": 1227,
											"end": 1261,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1257,
											"end": 1258,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1254,
											"end": 1255,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1247,
											"end": 1259,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1227,
											"end": 1261,
											"name": "tag",
											"source": 11,
											"value": "314"
										},
										{
											"begin": 1227,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1295,
											"end": 1301,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1284,
											"end": 1293,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 1280,
											"end": 1302,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1270,
											"end": 1302,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1270,
											"end": 1302,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1340,
											"end": 1347,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 1333,
											"end": 1337,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 1329,
											"end": 1331,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1325,
											"end": 1338,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1348,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1311,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "315"
										},
										{
											"begin": 1311,
											"end": 1366,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1362,
											"end": 1363,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1359,
											"end": 1360,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1352,
											"end": 1364,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1311,
											"end": 1366,
											"name": "tag",
											"source": 11,
											"value": "315"
										},
										{
											"begin": 1311,
											"end": 1366,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1402,
											"end": 1404,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1389,
											"end": 1405,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1428,
											"end": 1430,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1420,
											"end": 1426,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1417,
											"end": 1431,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1414,
											"end": 1448,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1414,
											"end": 1448,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "316"
										},
										{
											"begin": 1414,
											"end": 1448,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1444,
											"end": 1445,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1441,
											"end": 1442,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1434,
											"end": 1446,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1414,
											"end": 1448,
											"name": "tag",
											"source": 11,
											"value": "316"
										},
										{
											"begin": 1414,
											"end": 1448,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1489,
											"end": 1496,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 1484,
											"end": 1486,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1475,
											"end": 1481,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1471,
											"end": 1473,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1467,
											"end": 1482,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1463,
											"end": 1487,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1460,
											"end": 1497,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1457,
											"end": 1514,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1457,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "317"
										},
										{
											"begin": 1457,
											"end": 1514,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1510,
											"end": 1511,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1507,
											"end": 1508,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1500,
											"end": 1512,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1457,
											"end": 1514,
											"name": "tag",
											"source": 11,
											"value": "317"
										},
										{
											"begin": 1457,
											"end": 1514,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "SWAP10",
											"source": 11
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "SWAP9",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1541,
											"end": 1543,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1533,
											"end": 1544,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1533,
											"end": 1544,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 1563,
											"end": 1569,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 767,
											"end": 1575,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1787,
											"end": 1973,
											"name": "tag",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 1787,
											"end": 1973,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1846,
											"end": 1852,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1899,
											"end": 1901,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1887,
											"end": 1896,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1878,
											"end": 1885,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1874,
											"end": 1897,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1870,
											"end": 1902,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1867,
											"end": 1919,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1867,
											"end": 1919,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 1867,
											"end": 1919,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1915,
											"end": 1916,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1912,
											"end": 1913,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1905,
											"end": 1917,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1867,
											"end": 1919,
											"name": "tag",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 1867,
											"end": 1919,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1938,
											"end": 1967,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 1957,
											"end": 1966,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1938,
											"end": 1967,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 1938,
											"end": 1967,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1938,
											"end": 1967,
											"name": "tag",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 1938,
											"end": 1967,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1928,
											"end": 1967,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1787,
											"end": 1973,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1787,
											"end": 1973,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1978,
											"end": 2226,
											"name": "tag",
											"source": 11,
											"value": "79"
										},
										{
											"begin": 1978,
											"end": 2226,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2046,
											"end": 2052,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2054,
											"end": 2060,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2107,
											"end": 2109,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2095,
											"end": 2104,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2086,
											"end": 2093,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2082,
											"end": 2105,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2078,
											"end": 2110,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 2075,
											"end": 2127,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2075,
											"end": 2127,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "323"
										},
										{
											"begin": 2075,
											"end": 2127,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2123,
											"end": 2124,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2120,
											"end": 2121,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2113,
											"end": 2125,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2075,
											"end": 2127,
											"name": "tag",
											"source": 11,
											"value": "323"
										},
										{
											"begin": 2075,
											"end": 2127,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2146,
											"end": 2169,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2146,
											"end": 2169,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2146,
											"end": 2169,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2216,
											"end": 2218,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2201,
											"end": 2219,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2201,
											"end": 2219,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2201,
											"end": 2219,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2220,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2220,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1978,
											"end": 2226,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2917,
											"end": 3472,
											"name": "tag",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 2917,
											"end": 3472,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3240,
											"end": 3255,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3240,
											"end": 3255,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3240,
											"end": 3255,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3222,
											"end": 3256,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3222,
											"end": 3256,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3292,
											"end": 3307,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3292,
											"end": 3307,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3292,
											"end": 3307,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3292,
											"end": 3307,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3287,
											"end": 3289,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3272,
											"end": 3290,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3272,
											"end": 3290,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3265,
											"end": 3308,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3339,
											"end": 3341,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3324,
											"end": 3342,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3324,
											"end": 3342,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3317,
											"end": 3351,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3317,
											"end": 3351,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3317,
											"end": 3351,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3317,
											"end": 3351,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3387,
											"end": 3390,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 3382,
											"end": 3384,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 3367,
											"end": 3385,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3367,
											"end": 3385,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3360,
											"end": 3391,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3360,
											"end": 3391,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3360,
											"end": 3391,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3165,
											"end": 3169,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3407,
											"end": 3426,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3407,
											"end": 3426,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3407,
											"end": 3426,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3202,
											"end": 3205,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 3447,
											"end": 3466,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3447,
											"end": 3466,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2917,
											"end": 3472,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4174,
											"end": 4301,
											"name": "tag",
											"source": 11,
											"value": "301"
										},
										{
											"begin": 4174,
											"end": 4301,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4235,
											"end": 4245,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 4230,
											"end": 4233,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 4226,
											"end": 4246,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 4223,
											"end": 4224,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4216,
											"end": 4247,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4266,
											"end": 4270,
											"name": "PUSH",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 4263,
											"end": 4264,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4256,
											"end": 4271,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4290,
											"end": 4294,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4287,
											"end": 4288,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4280,
											"end": 4295,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4306,
											"end": 4434,
											"name": "tag",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 4306,
											"end": 4434,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4346,
											"end": 4349,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4377,
											"end": 4378,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4373,
											"end": 4379,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 4370,
											"end": 4371,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4367,
											"end": 4380,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 4364,
											"end": 4403,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4364,
											"end": 4403,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "332"
										},
										{
											"begin": 4364,
											"end": 4403,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "332"
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "301"
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "tag",
											"source": 11,
											"value": "332"
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4419,
											"end": 4428,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4419,
											"end": 4428,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4306,
											"end": 4434,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4718,
											"end": 4995,
											"name": "tag",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 4718,
											"end": 4995,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4785,
											"end": 4791,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4838,
											"end": 4840,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4826,
											"end": 4835,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4817,
											"end": 4824,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4813,
											"end": 4836,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4809,
											"end": 4841,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 4858,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 4858,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 4806,
											"end": 4858,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4854,
											"end": 4855,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4851,
											"end": 4852,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4844,
											"end": 4856,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 4858,
											"name": "tag",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 4806,
											"end": 4858,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4886,
											"end": 4895,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4880,
											"end": 4896,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4939,
											"end": 4944,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4932,
											"end": 4945,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4946,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4923,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4915,
											"end": 4947,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 4905,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 4905,
											"end": 4965,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4961,
											"end": 4962,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4958,
											"end": 4959,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5000,
											"end": 5125,
											"name": "tag",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 5000,
											"end": 5125,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5040,
											"end": 5044,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5068,
											"end": 5069,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5066,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5062,
											"end": 5070,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 5059,
											"end": 5093,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5059,
											"end": 5093,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "339"
										},
										{
											"begin": 5059,
											"end": 5093,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5073,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "339"
										},
										{
											"begin": 5073,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "301"
										},
										{
											"begin": 5073,
											"end": 5091,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 5073,
											"end": 5091,
											"name": "tag",
											"source": 11,
											"value": "339"
										},
										{
											"begin": 5073,
											"end": 5091,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5110,
											"end": 5119,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5110,
											"end": 5119,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5000,
											"end": 5125,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5130,
											"end": 5298,
											"name": "tag",
											"source": 11,
											"value": "170"
										},
										{
											"begin": 5130,
											"end": 5298,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5170,
											"end": 5177,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5236,
											"end": 5237,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5232,
											"end": 5233,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5228,
											"end": 5234,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 5224,
											"end": 5238,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 5221,
											"end": 5222,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5218,
											"end": 5239,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 5213,
											"end": 5214,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5206,
											"end": 5215,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5199,
											"end": 5216,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5195,
											"end": 5240,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5192,
											"end": 5263,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5192,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "342"
										},
										{
											"begin": 5192,
											"end": 5263,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5243,
											"end": 5261,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "342"
										},
										{
											"begin": 5243,
											"end": 5261,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "301"
										},
										{
											"begin": 5243,
											"end": 5261,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 5243,
											"end": 5261,
											"name": "tag",
											"source": 11,
											"value": "342"
										},
										{
											"begin": 5243,
											"end": 5261,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5283,
											"end": 5292,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 5283,
											"end": 5292,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5130,
											"end": 5298,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5303,
											"end": 5520,
											"name": "tag",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 5303,
											"end": 5520,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5343,
											"end": 5344,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5369,
											"end": 5370,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5359,
											"end": 5491,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "344"
										},
										{
											"begin": 5359,
											"end": 5491,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5413,
											"end": 5423,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 5408,
											"end": 5411,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 5404,
											"end": 5424,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 5401,
											"end": 5402,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5394,
											"end": 5425,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5448,
											"end": 5452,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 5445,
											"end": 5446,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5438,
											"end": 5453,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5476,
											"end": 5480,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5466,
											"end": 5481,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5359,
											"end": 5491,
											"name": "tag",
											"source": 11,
											"value": "344"
										},
										{
											"begin": 5359,
											"end": 5491,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5505,
											"end": 5514,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 5505,
											"end": 5514,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5303,
											"end": 5520,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8594,
											"end": 8852,
											"name": "tag",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 8594,
											"end": 8852,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8666,
											"end": 8667,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8676,
											"end": 8789,
											"name": "tag",
											"source": 11,
											"value": "354"
										},
										{
											"begin": 8676,
											"end": 8789,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8690,
											"end": 8696,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8687,
											"end": 8688,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8684,
											"end": 8697,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 8676,
											"end": 8789,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8676,
											"end": 8789,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "356"
										},
										{
											"begin": 8676,
											"end": 8789,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8766,
											"end": 8777,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8766,
											"end": 8777,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8766,
											"end": 8777,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8760,
											"end": 8778,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 8747,
											"end": 8758,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8747,
											"end": 8758,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8747,
											"end": 8758,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8740,
											"end": 8779,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8712,
											"end": 8714,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8705,
											"end": 8715,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8676,
											"end": 8789,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "354"
										},
										{
											"begin": 8676,
											"end": 8789,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8676,
											"end": 8789,
											"name": "tag",
											"source": 11,
											"value": "356"
										},
										{
											"begin": 8676,
											"end": 8789,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8807,
											"end": 8813,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8804,
											"end": 8805,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8801,
											"end": 8814,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 8798,
											"end": 8846,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8798,
											"end": 8846,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 8798,
											"end": 8846,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8842,
											"end": 8843,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8824,
											"end": 8840,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8824,
											"end": 8840,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8817,
											"end": 8844,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8594,
											"end": 8852,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8857,
											"end": 9131,
											"name": "tag",
											"source": 11,
											"value": "277"
										},
										{
											"begin": 8857,
											"end": 9131,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8986,
											"end": 8989,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9024,
											"end": 9030,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9018,
											"end": 9031,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9040,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "359"
										},
										{
											"begin": 9086,
											"end": 9092,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9081,
											"end": 9084,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 9074,
											"end": 9078,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9066,
											"end": 9072,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 9062,
											"end": 9079,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9040,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 9040,
											"end": 9093,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9040,
											"end": 9093,
											"name": "tag",
											"source": 11,
											"value": "359"
										},
										{
											"begin": 9040,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9109,
											"end": 9125,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9109,
											"end": 9125,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9109,
											"end": 9125,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9109,
											"end": 9125,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9109,
											"end": 9125,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8857,
											"end": 9131,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8857,
											"end": 9131,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9494,
											"end": 9877,
											"name": "tag",
											"source": 11,
											"value": "299"
										},
										{
											"begin": 9494,
											"end": 9877,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9643,
											"end": 9645,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9632,
											"end": 9641,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9625,
											"end": 9646,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9606,
											"end": 9610,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9675,
											"end": 9681,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9669,
											"end": 9682,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9718,
											"end": 9724,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9713,
											"end": 9715,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9702,
											"end": 9711,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 9698,
											"end": 9716,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9691,
											"end": 9725,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9734,
											"end": 9800,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "362"
										},
										{
											"begin": 9793,
											"end": 9799,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9788,
											"end": 9790,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9777,
											"end": 9786,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 9773,
											"end": 9791,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9768,
											"end": 9770,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9760,
											"end": 9766,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 9756,
											"end": 9771,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9734,
											"end": 9800,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 9734,
											"end": 9800,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9734,
											"end": 9800,
											"name": "tag",
											"source": 11,
											"value": "362"
										},
										{
											"begin": 9734,
											"end": 9800,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9861,
											"end": 9863,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 9840,
											"end": 9855,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9836,
											"end": 9865,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9821,
											"end": 9866,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9821,
											"end": 9866,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9821,
											"end": 9866,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9821,
											"end": 9866,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9868,
											"end": 9870,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9817,
											"end": 9871,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9817,
											"end": 9871,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 9494,
											"end": 9877,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9494,
											"end": 9877,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"AdminAddToken(uint256)": "c0cd40ee",
							"AdminWithDrawToken(uint256)": "a88e132f",
							"Deposit(uint256)": "4d6ce1e5",
							"DepositNFT(uint256,uint256)": "934ed772",
							"Details(address)": "e88cc2be",
							"ERC20Address()": "a6021ace",
							"ERC721address()": "b7171a2e",
							"OwnerTokens(address)": "2ffce210",
							"Reward(address)": "57488064",
							"UpdateERC20(address)": "275bd33f",
							"UpdateERC721(address)": "ee0106d2",
							"UpdateRatePersentage(uint256)": "f89d832f",
							"UserRate(address)": "e4458b30",
							"Utilization()": "7b2f247f",
							"Withdraw()": "57ea89b6",
							"calculateIntrest(address)": "8b73e331",
							"onERC721Received(address,address,uint256,bytes)": "150b7a02",
							"owenerERC20()": "10fd4fba",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"showReward(address)": "c45af5d8",
							"totalOwnerToken()": "0ccff6e9",
							"transferOwnership(address)": "f2fde38b",
							"withdrawNFT(uint256)": "023245d7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ratePersentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AdminAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnerTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"name\":\"UpdateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721address\",\"type\":\"address\"}],\"name\":\"UpdateERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratePersentage\",\"type\":\"uint256\"}],\"name\":\"UpdateRatePersentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Utilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"calculateIntrest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owenerERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"showReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOwnerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Token&NFTStaking/Contract.sol\":\"ERC20Stakeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/Token&NFTStaking/Contract.sol\":{\"keccak256\":\"0x1f6919af41e9134bab0288f4c638cf15ab73a0901af6226fe7516732a2ad4a2c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d296a204ecba8e9c663500649089cc824f9bee05a23cc2fcd4764651eed27f86\",\"dweb:/ipfs/QmVFpv4t74mzUsgkfEGHaSQj4VbVvytScrhvJGYmdx3MXE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 1052,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "ERC721address",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 1054,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "owenerERC20",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 1056,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "ERC20Address",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 1058,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "totalOwnerToken",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 1060,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "rate",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 1079,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "Details",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_struct(Staker)1067_storage)"
							},
							{
								"astId": 1083,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "Reward",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1087,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "OwnerTokens",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1092,
								"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
								"label": "UserRate",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_struct(StakerNFT)1074_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Staker)1067_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct ERC20Stakeable.Staker)",
								"numberOfBytes": "32",
								"value": "t_struct(Staker)1067_storage"
							},
							"t_mapping(t_address,t_struct(StakerNFT)1074_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct ERC20Stakeable.StakerNFT)",
								"numberOfBytes": "32",
								"value": "t_struct(StakerNFT)1074_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Staker)1067_storage": {
								"encoding": "inplace",
								"label": "struct ERC20Stakeable.Staker",
								"members": [
									{
										"astId": 1062,
										"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
										"label": "deposited",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1064,
										"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
										"label": "timestake",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1066,
										"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
										"label": "check",
										"offset": 0,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_struct(StakerNFT)1074_storage": {
								"encoding": "inplace",
								"label": "struct ERC20Stakeable.StakerNFT",
								"members": [
									{
										"astId": 1069,
										"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
										"label": "userRate",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1071,
										"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
										"label": "tokenId",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1073,
										"contract": "contracts/Token&NFTStaking/Contract.sol:ERC20Stakeable",
										"label": "check",
										"offset": 0,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1024
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 1025,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1024,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								1024
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1014,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1014,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							190
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "IERC20",
							"nameLocation": "212:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 124,
									"name": "Transfer",
									"nameLocation": "394:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "403:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "425:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "445:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:1"
									},
									"src": "388:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 133,
									"name": "Approval",
									"nameLocation": "625:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "634:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "657:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "682:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:1"
									},
									"src": "619:78:1"
								},
								{
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "820:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:1"
									},
									"scope": 190,
									"src": "774:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "931:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "971:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:1"
									},
									"scope": 190,
									"src": "912:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1211:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1223:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:1"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1257:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 154,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:1"
									},
									"scope": 190,
									"src": "1193:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1557:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1572:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1612:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:1"
									},
									"scope": 190,
									"src": "1538:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2291:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2308:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2342:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 174,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:1"
									},
									"scope": 190,
									"src": "2274:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2677:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2699:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2719:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2758:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 186,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:1"
									},
									"scope": 190,
									"src": "2646:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "202:2564:1",
							"usedErrors": []
						}
					],
					"src": "106:2661:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							226
						]
					},
					"id": 227,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 192,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 193,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:2",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 226,
							"linearizedBaseContracts": [
								226
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:2",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1471:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1494:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1519:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1542:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1568:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 203,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1585:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 205,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1604:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 207,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:2"
									},
									"scope": 226,
									"src": "1446:183:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:2",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1950:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1988:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:2"
									},
									"scope": 226,
									"src": "1934:63:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:2",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:2"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2240:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 222,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:2"
									},
									"scope": 226,
									"src": "2189:60:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 227,
							"src": "620:1631:2",
							"usedErrors": []
						}
					],
					"src": "114:2138:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							1002
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"SafeERC20": [
							507
						]
					},
					"id": 508,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 228,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 229,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 191,
							"src": "140:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 230,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 227,
							"src": "164:46:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 231,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 1003,
							"src": "211:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 232,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 507,
							"linearizedBaseContracts": [
								507
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 235,
									"libraryName": {
										"id": 233,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1002,
										"src": "737:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:3",
									"typeName": {
										"id": 234,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 257,
										"nodeType": "Block",
										"src": "865:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 246,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 238,
															"src": "895:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 249,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 238,
																			"src": "925:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "925:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 252,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 240,
																	"src": "950:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 253,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "954:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 247,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 245,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "875:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "875:86:3"
											}
										]
									},
									"id": 258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "794:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 237,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 236,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "794:6:3"
													},
													"referencedDeclaration": 190,
													"src": "794:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "816:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "836:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:3"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:3"
									},
									"scope": 507,
									"src": "763:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "1102:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "1132:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 274,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 261,
																			"src": "1162:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 189,
																		"src": "1162:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 277,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 263,
																	"src": "1191:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 278,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "1197:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 279,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "1201:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 272,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 270,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1112:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 282,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:3"
											}
										]
									},
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1009:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 260,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 259,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1009:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1009:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1031:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1053:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1073:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:3"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:3"
									},
									"scope": 507,
									"src": "974:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "1581:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 296,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 292,
																			"src": "1830:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 299,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 309,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 304,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 303,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 302,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 305,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 306,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 290,
																					"src": "1877:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 300,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 288,
																					"src": "1846:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 301,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 167,
																				"src": "1846:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 307,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 310,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 312,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 295,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 314,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 316,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "2001:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 319,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 288,
																			"src": "2031:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2031:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 322,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 290,
																	"src": "2055:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 323,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "2064:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 317,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 318,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 315,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1981:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 326,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:3"
											}
										]
									},
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1505:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 287,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 286,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1505:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1505:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1527:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1552:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:3"
									},
									"scope": 507,
									"src": "1475:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "2200:194:3",
										"statements": [
											{
												"assignments": [
													339
												],
												"declarations": [
													{
														"constant": false,
														"id": 339,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "2210:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 338,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 350,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 344,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 342,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 345,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 346,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 333,
																"src": "2264:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 340,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 331,
																"src": "2233:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$190",
																	"typeString": "contract IERC20"
																}
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 167,
															"src": "2233:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 347,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 348,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 335,
														"src": "2275:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 352,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 331,
															"src": "2310:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 355,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 331,
																			"src": "2340:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2340:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 358,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 333,
																	"src": "2364:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 359,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "2373:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 353,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 354,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 351,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "2290:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:3"
											}
										]
									},
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2124:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 329,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2124:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2124:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2146:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2171:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:3"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:3"
									},
									"scope": 507,
									"src": "2084:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "2516:370:3",
										"statements": [
											{
												"id": 410,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:3",
												"statements": [
													{
														"assignments": [
															375
														],
														"declarations": [
															{
																"constant": false,
																"id": 375,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2550:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 374,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 384,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 380,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 378,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 381,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 382,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 369,
																	"src": "2604:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 376,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2573:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 167,
																"src": "2573:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 388,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 386,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 375,
																		"src": "2634:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 387,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 371,
																		"src": "2650:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 385,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 391,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:3"
													},
													{
														"assignments": [
															393
														],
														"declarations": [
															{
																"constant": false,
																"id": 393,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2715:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 392,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 397,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 375,
																"src": "2738:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 395,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "2753:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 399,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2792:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 402,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 367,
																					"src": "2822:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 403,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 177,
																				"src": "2822:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 405,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 369,
																			"src": "2846:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 406,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 393,
																			"src": "2855:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 400,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 398,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "2772:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 409,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:3"
													}
												]
											}
										]
									},
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2440:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 366,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 365,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2440:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2440:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2462:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2487:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:3"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:3"
									},
									"scope": 507,
									"src": "2400:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 467,
										"nodeType": "Block",
										"src": "3107:257:3",
										"statements": [
											{
												"assignments": [
													433
												],
												"declarations": [
													{
														"constant": false,
														"id": 433,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3117:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 432,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 438,
												"initialValue": {
													"arguments": [
														{
															"id": 436,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3152:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 434,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3139:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3139:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3181:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 419,
															"src": "3188:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "3197:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 445,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 423,
															"src": "3204:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 446,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "3214:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 447,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "3217:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 448,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "3220:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 439,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3168:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 441,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 211,
														"src": "3168:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:3"
											},
											{
												"assignments": [
													452
												],
												"declarations": [
													{
														"constant": false,
														"id": 452,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3232:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 451,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 457,
												"initialValue": {
													"arguments": [
														{
															"id": 455,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 453,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3253:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3253:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 459,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "3290:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 460,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 433,
																	"src": "3304:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 458,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 466,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:3"
											}
										]
									},
									"id": 468,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2921:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$226",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 414,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 413,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 226,
														"src": "2921:12:3"
													},
													"referencedDeclaration": 226,
													"src": "2921:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$226",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2949:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2972:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2997:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3020:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3046:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 424,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3063:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 426,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3082:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 428,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:3"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:3"
									},
									"scope": 507,
									"src": "2892:472:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 505,
										"nodeType": "Block",
										"src": "3817:636:3",
										"statements": [
											{
												"assignments": [
													478
												],
												"declarations": [
													{
														"constant": false,
														"id": 478,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 505,
														"src": "4166:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 477,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 487,
												"initialValue": {
													"arguments": [
														{
															"id": 484,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "4220:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 481,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 472,
																	"src": "4200:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 479,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 762,
														"src": "4192:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 488,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "4275:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 490,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 504,
												"nodeType": "IfStatement",
												"src": "4271:176:3",
												"trueBody": {
													"id": 503,
													"nodeType": "Block",
													"src": "4298:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 495,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 478,
																				"src": "4370:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 497,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 496,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 498,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 493,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 494,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 492,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 502,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 469,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3776:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 471,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 470,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "3776:6:3"
													},
													"referencedDeclaration": 190,
													"src": "3776:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3790:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 473,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:3"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:3"
									},
									"scope": 507,
									"src": "3747:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 508,
							"src": "707:3748:3",
							"usedErrors": []
						}
					],
					"src": "115:4341:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							1036
						],
						"IERC721": [
							623
						]
					},
					"id": 624,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 509,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 510,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 624,
							"sourceUnit": 1037,
							"src": "133:47:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 512,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1036,
										"src": "271:7:4"
									},
									"id": 513,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:4"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 511,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 623,
							"linearizedBaseContracts": [
								623,
								1036
							],
							"name": "IERC721",
							"nameLocation": "260:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 522,
									"name": "Transfer",
									"nameLocation": "384:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "393:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "415:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "435:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:4"
									},
									"src": "378:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 531,
									"name": "Approval",
									"nameLocation": "571:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "580:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "603:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "629:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:4"
									},
									"src": "565:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 540,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "803:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "826:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 538,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "852:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 537,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:4"
									},
									"src": "782:85:4"
								},
								{
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 548,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "973:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:4"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "1011:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:4"
									},
									"scope": 623,
									"src": "954:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 556,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1187:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:4"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1227:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:4"
									},
									"scope": 623,
									"src": "1170:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 557,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 568,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1844:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1866:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1886:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1911:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 564,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:4"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:4"
									},
									"scope": 623,
									"src": "1809:137:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 569,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 578,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2679:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2701:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2721:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:4"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:4"
									},
									"scope": 623,
									"src": "2644:108:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 579,
										"nodeType": "StructuredDocumentation",
										"src": "2758:732:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 588,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3504:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3534:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3526:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3526:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3556:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3548:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3576:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3568:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3516:73:4"
									},
									"returnParameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3598:0:4"
									},
									"scope": 623,
									"src": "3495:104:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "3605:452:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 596,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4071:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4087:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4079:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4079:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4099:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4091:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4091:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4078:29:4"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4116:0:4"
									},
									"scope": 623,
									"src": "4062:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 597,
										"nodeType": "StructuredDocumentation",
										"src": "4123:309:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 604,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4446:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4472:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4464:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4464:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4487:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4482:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 600,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4482:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4463:34:4"
									},
									"returnParameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4506:0:4"
									},
									"scope": 623,
									"src": "4437:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 605,
										"nodeType": "StructuredDocumentation",
										"src": "4513:139:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4666:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4686:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4678:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4678:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4677:17:4"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4726:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4718:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4718:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4717:18:4"
									},
									"scope": 623,
									"src": "4657:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "4742:138:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4894:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4919:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4911:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4911:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4934:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4926:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 616,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4926:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4910:33:4"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4967:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 619,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4967:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4966:6:4"
									},
									"scope": 623,
									"src": "4885:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 624,
							"src": "250:4725:4",
							"usedErrors": []
						}
					],
					"src": "108:4868:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							641
						]
					},
					"id": 642,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 625,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 626,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:5",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 641,
							"linearizedBaseContracts": [
								641
							],
							"name": "IERC721Receiver",
							"nameLocation": "304:15:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 627,
										"nodeType": "StructuredDocumentation",
										"src": "326:493:5",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 640,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "833:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "867:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "859:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 628,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 631,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "885:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "915:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "907:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "947:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "932:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 634,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "932:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:108:5"
									},
									"returnParameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "976:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 637,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:8:5"
									},
									"scope": 641,
									"src": "824:160:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 642,
							"src": "294:692:5",
							"usedErrors": []
						}
					],
					"src": "116:871:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							1036
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							672
						]
					},
					"id": 673,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 643,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "129:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 644,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 673,
							"sourceUnit": 624,
							"src": "154:24:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 646,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 623,
										"src": "348:7:6"
									},
									"id": 647,
									"nodeType": "InheritanceSpecifier",
									"src": "348:7:6"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 645,
								"nodeType": "StructuredDocumentation",
								"src": "180:136:6",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 672,
							"linearizedBaseContracts": [
								672,
								623,
								1036
							],
							"name": "IERC721Enumerable",
							"nameLocation": "327:17:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "362:82:6",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "458:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "469:2:6"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "495:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:9:6"
									},
									"scope": 672,
									"src": "449:55:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "510:171:6",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 663,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "695:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "723:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "715:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "738:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "730:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:30:6"
									},
									"returnParameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "768:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:9:6"
									},
									"scope": 672,
									"src": "686:91:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "783:164:6",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 671,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "961:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "982:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "974:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 665,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:6"
									},
									"returnParameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "1012:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:9:6"
									},
									"scope": 672,
									"src": "952:69:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 673,
							"src": "317:706:6",
							"usedErrors": []
						}
					],
					"src": "129:895:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							1002
						]
					},
					"id": 1003,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 674,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 675,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:7",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1002,
							"linearizedBaseContracts": [
								1002
							],
							"name": "Address",
							"nameLocation": "202:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "1241:254:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 683,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "1465:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 684,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 685,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 686,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 682,
												"id": 688,
												"nodeType": "Return",
												"src": "1458:30:7"
											}
										]
									},
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:7",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "1195:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:7"
									},
									"returnParameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "1235:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 680,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:7"
									},
									"scope": 1002,
									"src": "1175:320:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 723,
										"nodeType": "Block",
										"src": "2483:241:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 701,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1002",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1002",
																				"typeString": "library Address"
																			}
																		],
																		"id": 700,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 699,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 702,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 703,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 704,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 695,
																"src": "2526:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 698,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 708,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:7"
											},
											{
												"assignments": [
													710,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 710,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 723,
														"src": "2578:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 709,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 717,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 715,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 711,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "2596:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 712,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 714,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 713,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 695,
																"src": "2618:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 719,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "2647:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 718,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 722,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:7"
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:7",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "2431:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:7",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "2458:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:7"
									},
									"returnParameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:7"
									},
									"scope": 1002,
									"src": "2412:312:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 741,
										"nodeType": "Block",
										"src": "3555:96:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 735,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3594:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 736,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "3602:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 737,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 734,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															782,
															826
														],
														"referencedDeclaration": 826,
														"src": "3572:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 733,
												"id": 740,
												"nodeType": "Return",
												"src": "3565:79:7"
											}
										]
									},
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:7",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 742,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "3488:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "3504:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 728,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:7"
									},
									"returnParameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "3541:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 731,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:7"
									},
									"scope": 1002,
									"src": "3466:185:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 761,
										"nodeType": "Block",
										"src": "4020:76:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 755,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 745,
															"src": "4059:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 756,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 747,
															"src": "4067:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 757,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 758,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "4076:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 754,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															782,
															826
														],
														"referencedDeclaration": 826,
														"src": "4037:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 753,
												"id": 760,
												"nodeType": "Return",
												"src": "4030:59:7"
											}
										]
									},
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "3904:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 744,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "3928:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 746,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "3955:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 748,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:7"
									},
									"returnParameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "4006:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 751,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:7"
									},
									"scope": 1002,
									"src": "3873:223:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 781,
										"nodeType": "Block",
										"src": "4601:111:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 775,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 765,
															"src": "4640:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 776,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "4648:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 777,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 769,
															"src": "4654:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 774,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															782,
															826
														],
														"referencedDeclaration": 826,
														"src": "4618:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 773,
												"id": 780,
												"nodeType": "Return",
												"src": "4611:94:7"
											}
										]
									},
									"documentation": {
										"id": 763,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 782,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "4498:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 764,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "4522:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 766,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "4549:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:7"
									},
									"returnParameters": {
										"id": 773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "4587:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 771,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:7"
									},
									"scope": 1002,
									"src": "4458:254:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 825,
										"nodeType": "Block",
										"src": "5139:267:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 799,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1002",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1002",
																				"typeString": "library Address"
																			}
																		],
																		"id": 798,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 797,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 802,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 789,
																"src": "5182:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 796,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 806,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:7"
											},
											{
												"assignments": [
													808,
													810
												],
												"declarations": [
													{
														"constant": false,
														"id": 808,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 825,
														"src": "5241:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 807,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 810,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 825,
														"src": "5255:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 809,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 817,
												"initialValue": {
													"arguments": [
														{
															"id": 815,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "5308:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 811,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 785,
																"src": "5282:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 812,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 814,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 813,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 789,
																"src": "5301:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 819,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "5357:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 820,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "5365:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 821,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 810,
															"src": "5374:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 822,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "5386:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 818,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 957,
														"src": "5330:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 795,
												"id": 824,
												"nodeType": "Return",
												"src": "5323:76:7"
											}
										]
									},
									"documentation": {
										"id": 783,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:7",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 826,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5000:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5024:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 786,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5051:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5074:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 790,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:7"
									},
									"returnParameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5125:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 793,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:7"
									},
									"scope": 1002,
									"src": "4960:446:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 842,
										"nodeType": "Block",
										"src": "5683:97:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 837,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 829,
															"src": "5719:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 838,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "5727:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 839,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 836,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															843,
															872
														],
														"referencedDeclaration": 872,
														"src": "5700:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 835,
												"id": 841,
												"nodeType": "Return",
												"src": "5693:80:7"
											}
										]
									},
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 843,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "5611:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "5627:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 830,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:7"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "5669:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 833,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:7"
									},
									"scope": 1002,
									"src": "5583:197:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 871,
										"nodeType": "Block",
										"src": "6122:168:7",
										"statements": [
											{
												"assignments": [
													856,
													858
												],
												"declarations": [
													{
														"constant": false,
														"id": 856,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 871,
														"src": "6133:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 855,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 858,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 871,
														"src": "6147:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 857,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 863,
												"initialValue": {
													"arguments": [
														{
															"id": 861,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 848,
															"src": "6192:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 859,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "6174:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 860,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 865,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "6241:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 866,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 856,
															"src": "6249:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 867,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "6258:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 868,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "6270:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 864,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 957,
														"src": "6214:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 854,
												"id": 870,
												"nodeType": "Return",
												"src": "6207:76:7"
											}
										]
									},
									"documentation": {
										"id": 844,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "6001:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 845,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "6025:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 847,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "6052:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 849,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:7"
									},
									"returnParameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "6108:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 852,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:7"
									},
									"scope": 1002,
									"src": "5964:326:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 888,
										"nodeType": "Block",
										"src": "6566:101:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 883,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "6604:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 884,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 877,
															"src": "6612:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 885,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 882,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															889,
															918
														],
														"referencedDeclaration": 918,
														"src": "6583:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 881,
												"id": 887,
												"nodeType": "Return",
												"src": "6576:84:7"
											}
										]
									},
									"documentation": {
										"id": 873,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "6499:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 874,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "6515:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 876,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:7"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "6552:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 879,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:7"
									},
									"scope": 1002,
									"src": "6469:198:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 917,
										"nodeType": "Block",
										"src": "7008:170:7",
										"statements": [
											{
												"assignments": [
													902,
													904
												],
												"declarations": [
													{
														"constant": false,
														"id": 902,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 917,
														"src": "7019:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 901,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 904,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 917,
														"src": "7033:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 903,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 909,
												"initialValue": {
													"arguments": [
														{
															"id": 907,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 894,
															"src": "7080:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 905,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 892,
															"src": "7060:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 906,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 911,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 892,
															"src": "7129:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 912,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "7137:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 913,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 904,
															"src": "7146:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 914,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 896,
															"src": "7158:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 910,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 957,
														"src": "7102:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 900,
												"id": 916,
												"nodeType": "Return",
												"src": "7095:76:7"
											}
										]
									},
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 918,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "6892:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "6916:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 893,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "6943:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 895,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:7"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "6994:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 898,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:7"
									},
									"scope": 1002,
									"src": "6853:325:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 956,
										"nodeType": "Block",
										"src": "7660:434:7",
										"statements": [
											{
												"condition": {
													"id": 932,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 923,
													"src": "7674:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 954,
													"nodeType": "Block",
													"src": "8030:58:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 950,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 925,
																		"src": "8052:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 951,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 927,
																		"src": "8064:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 949,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1001,
																	"src": "8044:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 952,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 953,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:7"
														}
													]
												},
												"id": 955,
												"nodeType": "IfStatement",
												"src": "7670:418:7",
												"trueBody": {
													"id": 948,
													"nodeType": "Block",
													"src": "7683:341:7",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 933,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 925,
																		"src": "7701:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 934,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 945,
															"nodeType": "IfStatement",
															"src": "7697:286:7",
															"trueBody": {
																"id": 944,
																"nodeType": "Block",
																"src": "7725:258:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 939,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 921,
																							"src": "7927:6:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 938,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 690,
																						"src": "7916:10:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 940,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:7",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 941,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 937,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 942,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 943,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:7"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 946,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 925,
																"src": "8003:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 931,
															"id": 947,
															"nodeType": "Return",
															"src": "7996:17:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 919,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:7",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 957,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7511:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 920,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7535:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 922,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7557:23:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 924,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7590:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 926,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:7"
									},
									"returnParameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7646:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 929,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:7"
									},
									"scope": 1002,
									"src": "7466:628:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 980,
										"nodeType": "Block",
										"src": "8475:135:7",
										"statements": [
											{
												"condition": {
													"id": 969,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 960,
													"src": "8489:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 978,
													"nodeType": "Block",
													"src": "8546:58:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 974,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 962,
																		"src": "8568:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 975,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 964,
																		"src": "8580:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 973,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1001,
																	"src": "8560:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 976,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 977,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:7"
														}
													]
												},
												"id": 979,
												"nodeType": "IfStatement",
												"src": "8485:119:7",
												"trueBody": {
													"id": 972,
													"nodeType": "Block",
													"src": "8498:42:7",
													"statements": [
														{
															"expression": {
																"id": 970,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 962,
																"src": "8519:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 968,
															"id": 971,
															"nodeType": "Return",
															"src": "8512:17:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 958,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:7",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 981,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "8350:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 959,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "8372:23:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 961,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "8405:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 963,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:7"
									},
									"returnParameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "8461:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 966,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:7"
									},
									"scope": 1002,
									"src": "8315:295:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1000,
										"nodeType": "Block",
										"src": "8699:457:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 988,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 983,
															"src": "8775:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 989,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 990,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 998,
													"nodeType": "Block",
													"src": "9105:45:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 995,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 985,
																		"src": "9126:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 994,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 996,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 997,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:7"
														}
													]
												},
												"id": 999,
												"nodeType": "IfStatement",
												"src": "8771:379:7",
												"trueBody": {
													"id": 993,
													"nodeType": "Block",
													"src": "8798:301:7",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:7",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:7"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:7"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:7",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:7"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:7"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:7"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 983,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:7",
																	"valueSize": 1
																},
																{
																	"declaration": 983,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:7",
																	"valueSize": 1
																}
															],
															"id": 992,
															"nodeType": "InlineAssembly",
															"src": "8947:142:7"
														}
													]
												}
											}
										]
									},
									"id": 1001,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1001,
												"src": "8633:23:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 982,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1001,
												"src": "8658:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 984,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:7"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:7"
									},
									"scope": 1002,
									"src": "8616:540:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1003,
							"src": "194:8964:7",
							"usedErrors": []
						}
					],
					"src": "101:9058:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1024
						]
					},
					"id": 1025,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1004,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1005,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:8",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1024,
							"linearizedBaseContracts": [
								1024
							],
							"name": "Context",
							"nameLocation": "626:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1013,
										"nodeType": "Block",
										"src": "702:34:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1010,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1009,
												"id": 1012,
												"nodeType": "Return",
												"src": "712:17:8"
											}
										]
									},
									"id": 1014,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:8"
									},
									"returnParameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "693:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:8"
									},
									"scope": 1024,
									"src": "640:96:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1022,
										"nodeType": "Block",
										"src": "809:32:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1019,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1018,
												"id": 1021,
												"nodeType": "Return",
												"src": "819:15:8"
											}
										]
									},
									"id": 1023,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:8"
									},
									"returnParameters": {
										"id": 1018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "793:14:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1016,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:8"
									},
									"scope": 1024,
									"src": "742:99:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1025,
							"src": "608:235:8",
							"usedErrors": []
						}
					],
					"src": "86:758:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1036
						]
					},
					"id": 1037,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1026,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1027,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:9",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1036,
							"linearizedBaseContracts": [
								1036
							],
							"name": "IERC165",
							"nameLocation": "415:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1028,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1035,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "801:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1029,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:9"
									},
									"returnParameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "844:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1032,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:9"
									},
									"scope": 1036,
									"src": "774:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1037,
							"src": "405:447:9",
							"usedErrors": []
						}
					],
					"src": "100:753:9"
				},
				"id": 9
			},
			"contracts/Token&NFTStaking/Contract.sol": {
				"ast": {
					"absolutePath": "contracts/Token&NFTStaking/Contract.sol",
					"exportedSymbols": {
						"Address": [
							1002
						],
						"Context": [
							1024
						],
						"ERC20Stakeable": [
							1688
						],
						"IERC165": [
							1036
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							672
						],
						"IERC721Receiver": [
							641
						],
						"Ownable": [
							112
						],
						"SafeERC20": [
							507
						]
					},
					"id": 1689,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1038,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "56:23:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1039,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1689,
							"sourceUnit": 113,
							"src": "81:52:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1040,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1689,
							"sourceUnit": 508,
							"src": "134:65:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"id": 1041,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1689,
							"sourceUnit": 673,
							"src": "200:79:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 1042,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1689,
							"sourceUnit": 642,
							"src": "280:66:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1043,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "375:7:10"
									},
									"id": 1044,
									"nodeType": "InheritanceSpecifier",
									"src": "375:7:10"
								},
								{
									"baseName": {
										"id": 1045,
										"name": "IERC721Receiver",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 641,
										"src": "383:15:10"
									},
									"id": 1046,
									"nodeType": "InheritanceSpecifier",
									"src": "383:15:10"
								}
							],
							"canonicalName": "ERC20Stakeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1688,
							"linearizedBaseContracts": [
								1688,
								641,
								112,
								1024
							],
							"name": "ERC20Stakeable",
							"nameLocation": "357:14:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1050,
									"libraryName": {
										"id": 1047,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 507,
										"src": "410:9:10"
									},
									"nodeType": "UsingForDirective",
									"src": "404:27:10",
									"typeName": {
										"id": 1049,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1048,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 190,
											"src": "424:6:10"
										},
										"referencedDeclaration": 190,
										"src": "424:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$190",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "b7171a2e",
									"id": 1052,
									"mutability": "mutable",
									"name": "ERC721address",
									"nameLocation": "451:13:10",
									"nodeType": "VariableDeclaration",
									"scope": 1688,
									"src": "436:28:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1051,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "436:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "10fd4fba",
									"id": 1054,
									"mutability": "mutable",
									"name": "owenerERC20",
									"nameLocation": "485:11:10",
									"nodeType": "VariableDeclaration",
									"scope": 1688,
									"src": "470:26:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1053,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "470:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a6021ace",
									"id": 1056,
									"mutability": "mutable",
									"name": "ERC20Address",
									"nameLocation": "517:12:10",
									"nodeType": "VariableDeclaration",
									"scope": 1688,
									"src": "502:27:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1055,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "502:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0ccff6e9",
									"id": 1058,
									"mutability": "mutable",
									"name": "totalOwnerToken",
									"nameLocation": "547:15:10",
									"nodeType": "VariableDeclaration",
									"scope": 1688,
									"src": "535:27:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1057,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "535:4:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1060,
									"mutability": "mutable",
									"name": "rate",
									"nameLocation": "573:4:10",
									"nodeType": "VariableDeclaration",
									"scope": 1688,
									"src": "568:9:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1059,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "568:4:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "ERC20Stakeable.Staker",
									"id": 1067,
									"members": [
										{
											"constant": false,
											"id": 1062,
											"mutability": "mutable",
											"name": "deposited",
											"nameLocation": "615:9:10",
											"nodeType": "VariableDeclaration",
											"scope": 1067,
											"src": "607:17:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1061,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "607:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1064,
											"mutability": "mutable",
											"name": "timestake",
											"nameLocation": "642:9:10",
											"nodeType": "VariableDeclaration",
											"scope": 1067,
											"src": "634:17:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1063,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "634:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1066,
											"mutability": "mutable",
											"name": "check",
											"nameLocation": "666:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1067,
											"src": "661:10:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1065,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "661:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Staker",
									"nameLocation": "590:6:10",
									"nodeType": "StructDefinition",
									"scope": 1688,
									"src": "583:96:10",
									"visibility": "public"
								},
								{
									"canonicalName": "ERC20Stakeable.StakerNFT",
									"id": 1074,
									"members": [
										{
											"constant": false,
											"id": 1069,
											"mutability": "mutable",
											"name": "userRate",
											"nameLocation": "719:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 1074,
											"src": "711:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1068,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "711:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1071,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "745:7:10",
											"nodeType": "VariableDeclaration",
											"scope": 1074,
											"src": "737:15:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1070,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "737:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1073,
											"mutability": "mutable",
											"name": "check",
											"nameLocation": "767:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1074,
											"src": "762:10:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1072,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "762:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakerNFT",
									"nameLocation": "691:9:10",
									"nodeType": "StructDefinition",
									"scope": 1688,
									"src": "684:96:10",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e88cc2be",
									"id": 1079,
									"mutability": "mutable",
									"name": "Details",
									"nameLocation": "820:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1688,
									"src": "785:42:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
										"typeString": "mapping(address => struct ERC20Stakeable.Staker)"
									},
									"typeName": {
										"id": 1078,
										"keyType": {
											"id": 1075,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "794:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "785:27:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
											"typeString": "mapping(address => struct ERC20Stakeable.Staker)"
										},
										"valueType": {
											"id": 1077,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1076,
												"name": "Staker",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1067,
												"src": "805:6:10"
											},
											"referencedDeclaration": 1067,
											"src": "805:6:10",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Staker_$1067_storage_ptr",
												"typeString": "struct ERC20Stakeable.Staker"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "57488064",
									"id": 1083,
									"mutability": "mutable",
									"name": "Reward",
									"nameLocation": "866:6:10",
									"nodeType": "VariableDeclaration",
									"scope": 1688,
									"src": "833:39:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1082,
										"keyType": {
											"id": 1080,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "842:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "833:25:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1081,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "853:4:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2ffce210",
									"id": 1087,
									"mutability": "mutable",
									"name": "OwnerTokens",
									"nameLocation": "912:11:10",
									"nodeType": "VariableDeclaration",
									"scope": 1688,
									"src": "878:45:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1086,
										"keyType": {
											"id": 1084,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "887:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "878:26:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1085,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "898:4:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e4458b30",
									"id": 1092,
									"mutability": "mutable",
									"name": "UserRate",
									"nameLocation": "968:8:10",
									"nodeType": "VariableDeclaration",
									"scope": 1688,
									"src": "929:47:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
										"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT)"
									},
									"typeName": {
										"id": 1091,
										"keyType": {
											"id": 1088,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "938:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "929:31:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
											"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT)"
										},
										"valueType": {
											"id": 1090,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1089,
												"name": "StakerNFT",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1074,
												"src": "949:9:10"
											},
											"referencedDeclaration": 1074,
											"src": "949:9:10",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_StakerNFT_$1074_storage_ptr",
												"typeString": "struct ERC20Stakeable.StakerNFT"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1118,
										"nodeType": "Block",
										"src": "1441:151:10",
										"statements": [
											{
												"expression": {
													"id": 1103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1101,
														"name": "ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1052,
														"src": "1451:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1102,
														"name": "_ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1094,
														"src": "1467:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1451:30:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1104,
												"nodeType": "ExpressionStatement",
												"src": "1451:30:10"
											},
											{
												"expression": {
													"id": 1107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1105,
														"name": "rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "1491:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1106,
														"name": "_ratePersentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1096,
														"src": "1498:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1491:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1108,
												"nodeType": "ExpressionStatement",
												"src": "1491:22:10"
											},
											{
												"expression": {
													"id": 1111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1109,
														"name": "ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1056,
														"src": "1523:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1110,
														"name": "_ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1098,
														"src": "1538:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1523:28:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1112,
												"nodeType": "ExpressionStatement",
												"src": "1523:28:10"
											},
											{
												"expression": {
													"id": 1116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1113,
														"name": "owenerERC20",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1054,
														"src": "1561:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1114,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1575:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1115,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1575:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1561:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1117,
												"nodeType": "ExpressionStatement",
												"src": "1561:24:10"
											}
										]
									},
									"id": 1119,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "_ERC721address",
												"nameLocation": "1377:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "1369:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1093,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1369:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "_ratePersentage",
												"nameLocation": "1401:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "1393:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1095,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1393:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "_ERC20Address",
												"nameLocation": "1426:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "1418:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1097,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1418:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1368:72:10"
									},
									"returnParameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1441:0:10"
									},
									"scope": 1688,
									"src": "1357:235:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1158,
										"nodeType": "Block",
										"src": "1871:237:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1127,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1889:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1128,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1889:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1129,
																"name": "owenerERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1054,
																"src": "1901:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1889:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79204f776e65722063616e207472616e73666572",
															"id": 1131,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1913:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80",
																"typeString": "literal_string \"Only Owner can transfer\""
															},
															"value": "Only Owner can transfer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80",
																"typeString": "literal_string \"Only Owner can transfer\""
															}
														],
														"id": 1126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1881:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1881:58:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1133,
												"nodeType": "ExpressionStatement",
												"src": "1881:58:10"
											},
											{
												"expression": {
													"id": 1139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1134,
															"name": "OwnerTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1087,
															"src": "1949:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1137,
														"indexExpression": {
															"expression": {
																"id": 1135,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1961:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1961:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1949:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1138,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "1975:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1949:33:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1140,
												"nodeType": "ExpressionStatement",
												"src": "1949:33:10"
											},
											{
												"expression": {
													"id": 1143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1141,
														"name": "totalOwnerToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "1992:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1142,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "2011:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1992:26:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1144,
												"nodeType": "ExpressionStatement",
												"src": "1992:26:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1149,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2066:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2066:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1153,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2086:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1152,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2078:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1151,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2078:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1154,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2078:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1155,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1121,
															"src": "2093:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1146,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1056,
																	"src": "2035:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1145,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "2028:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2028:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1148,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 284,
														"src": "2028:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2028:73:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1157,
												"nodeType": "ExpressionStatement",
												"src": "2028:73:10"
											}
										]
									},
									"functionSelector": "c0cd40ee",
									"id": 1159,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1124,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1123,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1862:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1862:9:10"
										}
									],
									"name": "AdminAddToken",
									"nameLocation": "1827:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1846:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1159,
												"src": "1841:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1120,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1841:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1840:14:10"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1871:0:10"
									},
									"scope": 1688,
									"src": "1818:290:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1186,
										"nodeType": "Block",
										"src": "2357:148:10",
										"statements": [
											{
												"expression": {
													"id": 1171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1166,
															"name": "OwnerTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1087,
															"src": "2367:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1169,
														"indexExpression": {
															"expression": {
																"id": 1167,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2379:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1168,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2379:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2367:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1170,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1161,
														"src": "2394:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2367:33:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1172,
												"nodeType": "ExpressionStatement",
												"src": "2367:33:10"
											},
											{
												"expression": {
													"id": 1175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1173,
														"name": "totalOwnerToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "2410:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1174,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1161,
														"src": "2429:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2410:25:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1176,
												"nodeType": "ExpressionStatement",
												"src": "2410:25:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1181,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2479:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1182,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2479:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1183,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1161,
															"src": "2491:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1178,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1056,
																	"src": "2452:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1177,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "2445:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2445:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1180,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 258,
														"src": "2445:33:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2445:53:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1185,
												"nodeType": "ExpressionStatement",
												"src": "2445:53:10"
											}
										]
									},
									"functionSelector": "a88e132f",
									"id": 1187,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1164,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1163,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2348:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "2348:9:10"
										}
									],
									"name": "AdminWithDrawToken",
									"nameLocation": "2309:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2333:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "2328:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1160,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2328:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2327:13:10"
									},
									"returnParameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2357:0:10"
									},
									"scope": 1688,
									"src": "2300:205:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1205,
										"nodeType": "Block",
										"src": "2765:110:10",
										"statements": [
											{
												"assignments": [
													1193
												],
												"declarations": [
													{
														"constant": false,
														"id": 1193,
														"mutability": "mutable",
														"name": "Persentage",
														"nameLocation": "2780:10:10",
														"nodeType": "VariableDeclaration",
														"scope": 1205,
														"src": "2775:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1192,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "2775:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1202,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1198,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 1194,
																		"name": "OwnerTokens",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1087,
																		"src": "2794:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1196,
																	"indexExpression": {
																		"id": 1195,
																		"name": "owenerERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1054,
																		"src": "2806:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2794:24:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1197,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2821:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "2794:30:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1199,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2793:32:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1200,
														"name": "totalOwnerToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "2826:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2793:48:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2775:66:10"
											},
											{
												"expression": {
													"id": 1203,
													"name": "Persentage",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1193,
													"src": "2858:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1191,
												"id": 1204,
												"nodeType": "Return",
												"src": "2851:17:10"
											}
										]
									},
									"functionSelector": "7b2f247f",
									"id": 1206,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Utilization",
									"nameLocation": "2722:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1188,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2733:2:10"
									},
									"returnParameters": {
										"id": 1191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1206,
												"src": "2756:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2756:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2755:9:10"
									},
									"scope": 1688,
									"src": "2713:162:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1246,
										"nodeType": "Block",
										"src": "3209:228:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "3227:26:10",
															"subExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1212,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1079,
																		"src": "3228:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1215,
																	"indexExpression": {
																		"expression": {
																			"id": 1213,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3236:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1214,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3236:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3228:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1067_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"id": 1216,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "check",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1066,
																"src": "3228:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c65617365204669727374205769746844726177",
															"id": 1218,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3254:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d",
																"typeString": "literal_string \"Please First WithDraw\""
															},
															"value": "Please First WithDraw"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d",
																"typeString": "literal_string \"Please First WithDraw\""
															}
														],
														"id": 1211,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3219:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3219:59:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1220,
												"nodeType": "ExpressionStatement",
												"src": "3219:59:10"
											},
											{
												"expression": {
													"id": 1231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1221,
															"name": "Details",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1079,
															"src": "3288:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
															}
														},
														"id": 1224,
														"indexExpression": {
															"expression": {
																"id": 1222,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3296:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1223,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3296:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3288:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1067_storage",
															"typeString": "struct ERC20Stakeable.Staker storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1226,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1208,
																"src": "3317:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 1227,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "3325:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1228,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "3325:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "74727565",
																"id": 1229,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3341:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 1225,
															"name": "Staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1067,
															"src": "3310:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Staker_$1067_storage_ptr_$",
																"typeString": "type(struct ERC20Stakeable.Staker storage pointer)"
															}
														},
														"id": 1230,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3310:36:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1067_memory_ptr",
															"typeString": "struct ERC20Stakeable.Staker memory"
														}
													},
													"src": "3288:58:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Staker_$1067_storage",
														"typeString": "struct ERC20Stakeable.Staker storage ref"
													}
												},
												"id": 1232,
												"nodeType": "ExpressionStatement",
												"src": "3288:58:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1237,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3394:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1238,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3394:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1241,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3414:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1240,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3406:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1239,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3406:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1242,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3406:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1243,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1208,
															"src": "3422:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1234,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1056,
																	"src": "3363:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1233,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "3356:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1235,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3356:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1236,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 284,
														"src": "3356:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3356:74:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1245,
												"nodeType": "ExpressionStatement",
												"src": "3356:74:10"
											}
										]
									},
									"functionSelector": "4d6ce1e5",
									"id": 1247,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Deposit",
									"nameLocation": "3177:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3193:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1247,
												"src": "3185:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3185:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3184:17:10"
									},
									"returnParameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3209:0:10"
									},
									"scope": 1688,
									"src": "3168:269:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1367,
										"nodeType": "Block",
										"src": "3659:850:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1251,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1079,
																	"src": "3677:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																		"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																	}
																},
																"id": 1254,
																"indexExpression": {
																	"expression": {
																		"id": 1252,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3685:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1253,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3685:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3677:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1067_storage",
																	"typeString": "struct ERC20Stakeable.Staker storage ref"
																}
															},
															"id": 1255,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1066,
															"src": "3677:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c65617365204669727374205374616b65",
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3703:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd",
																"typeString": "literal_string \"Please First Stake\""
															},
															"value": "Please First Stake"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd",
																"typeString": "literal_string \"Please First Stake\""
															}
														],
														"id": 1250,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3669:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3669:55:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1258,
												"nodeType": "ExpressionStatement",
												"src": "3669:55:10"
											},
											{
												"condition": {
													"expression": {
														"baseExpression": {
															"id": 1259,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1092,
															"src": "3738:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1262,
														"indexExpression": {
															"expression": {
																"id": 1260,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3747:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1261,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3747:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3738:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"id": 1263,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "check",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1073,
													"src": "3738:26:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1365,
													"nodeType": "Block",
													"src": "4215:284:10",
													"statements": [
														{
															"assignments": [
																1328
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1328,
																	"mutability": "mutable",
																	"name": "amount",
																	"nameLocation": "4234:6:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1365,
																	"src": "4229:11:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1327,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "4229:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1334,
															"initialValue": {
																"expression": {
																	"baseExpression": {
																		"id": 1329,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1079,
																		"src": "4243:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1332,
																	"indexExpression": {
																		"expression": {
																			"id": 1330,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4251:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1331,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4251:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4243:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1067_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"id": 1333,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "deposited",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1062,
																"src": "4243:29:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4229:43:10"
														},
														{
															"assignments": [
																1336
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1336,
																	"mutability": "mutable",
																	"name": "newval",
																	"nameLocation": "4291:6:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1365,
																	"src": "4286:11:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1335,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "4286:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1341,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1338,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4317:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1339,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4317:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1337,
																	"name": "calculateIntrest",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1546,
																	"src": "4300:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 1340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4300:28:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4286:42:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1346,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4372:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1347,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4372:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1350,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1348,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1328,
																			"src": "4384:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1349,
																			"name": "newval",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1336,
																			"src": "4393:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4384:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1343,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1056,
																				"src": "4349:12:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1342,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "4342:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1344,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4342:20:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1345,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 157,
																	"src": "4342:29:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1351,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4342:58:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1352,
															"nodeType": "ExpressionStatement",
															"src": "4342:58:10"
														},
														{
															"expression": {
																"id": 1357,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1353,
																		"name": "OwnerTokens",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1087,
																		"src": "4414:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1355,
																	"indexExpression": {
																		"id": 1354,
																		"name": "owenerERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1054,
																		"src": "4426:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4414:24:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"id": 1356,
																	"name": "newval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1336,
																	"src": "4442:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4414:34:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1358,
															"nodeType": "ExpressionStatement",
															"src": "4414:34:10"
														},
														{
															"expression": {
																"id": 1363,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4462:26:10",
																"subExpression": {
																	"baseExpression": {
																		"id": 1359,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1079,
																		"src": "4469:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1362,
																	"indexExpression": {
																		"expression": {
																			"id": 1360,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4477:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1361,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4477:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4469:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1067_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1364,
															"nodeType": "ExpressionStatement",
															"src": "4462:26:10"
														}
													]
												},
												"id": 1366,
												"nodeType": "IfStatement",
												"src": "3734:765:10",
												"trueBody": {
													"id": 1326,
													"nodeType": "Block",
													"src": "3765:437:10",
													"statements": [
														{
															"assignments": [
																1265
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1265,
																	"mutability": "mutable",
																	"name": "amount",
																	"nameLocation": "3784:6:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1326,
																	"src": "3779:11:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1264,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "3779:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1271,
															"initialValue": {
																"expression": {
																	"baseExpression": {
																		"id": 1266,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1079,
																		"src": "3793:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1269,
																	"indexExpression": {
																		"expression": {
																			"id": 1267,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3801:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1268,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3801:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3793:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1067_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"id": 1270,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "deposited",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1062,
																"src": "3793:29:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3779:43:10"
														},
														{
															"assignments": [
																1273
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1273,
																	"mutability": "mutable",
																	"name": "newval",
																	"nameLocation": "3841:6:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1326,
																	"src": "3836:11:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1272,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "3836:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1278,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1275,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3867:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3867:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1274,
																	"name": "calculateIntrest",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1546,
																	"src": "3850:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 1277,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3850:28:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3836:42:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1285,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3940:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																					"typeString": "contract ERC20Stakeable"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																					"typeString": "contract ERC20Stakeable"
																				}
																			],
																			"id": 1284,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3932:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1283,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3932:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1286,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3932:13:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1287,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3947:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1288,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3947:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"baseExpression": {
																				"id": 1289,
																				"name": "UserRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1092,
																				"src": "3958:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																					"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																				}
																			},
																			"id": 1292,
																			"indexExpression": {
																				"expression": {
																					"id": 1290,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "3967:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1291,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "3967:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3958:20:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
																				"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																			}
																		},
																		"id": 1293,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "tokenId",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1071,
																		"src": "3958:28:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"hexValue": "",
																		"id": 1294,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3987:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1280,
																				"name": "ERC721address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1052,
																				"src": "3900:13:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1279,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 623,
																			"src": "3892:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$623_$",
																				"typeString": "type(contract IERC721)"
																			}
																		},
																		"id": 1281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3892:22:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721_$623",
																			"typeString": "contract IERC721"
																		}
																	},
																	"id": 1282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 568,
																	"src": "3892:39:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (address,address,uint256,bytes memory) external"
																	}
																},
																"id": 1295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3892:98:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1296,
															"nodeType": "ExpressionStatement",
															"src": "3892:98:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1301,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4034:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1302,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4034:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1305,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1303,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1265,
																			"src": "4046:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1304,
																			"name": "newval",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1273,
																			"src": "4055:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4046:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1298,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1056,
																				"src": "4011:12:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1297,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "4004:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4004:20:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 157,
																	"src": "4004:29:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1306,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4004:58:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1307,
															"nodeType": "ExpressionStatement",
															"src": "4004:58:10"
														},
														{
															"expression": {
																"id": 1312,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1308,
																		"name": "OwnerTokens",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1087,
																		"src": "4076:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1310,
																	"indexExpression": {
																		"id": 1309,
																		"name": "owenerERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1054,
																		"src": "4088:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4076:24:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"id": 1311,
																	"name": "newval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1273,
																	"src": "4104:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4076:34:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1313,
															"nodeType": "ExpressionStatement",
															"src": "4076:34:10"
														},
														{
															"expression": {
																"id": 1318,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4124:27:10",
																"subExpression": {
																	"baseExpression": {
																		"id": 1314,
																		"name": "UserRate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1092,
																		"src": "4131:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																		}
																	},
																	"id": 1317,
																	"indexExpression": {
																		"expression": {
																			"id": 1315,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4140:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1316,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4140:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4131:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
																		"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1319,
															"nodeType": "ExpressionStatement",
															"src": "4124:27:10"
														},
														{
															"expression": {
																"id": 1324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4165:26:10",
																"subExpression": {
																	"baseExpression": {
																		"id": 1320,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1079,
																		"src": "4172:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1323,
																	"indexExpression": {
																		"expression": {
																			"id": 1321,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4180:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1322,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4180:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4172:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1067_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1325,
															"nodeType": "ExpressionStatement",
															"src": "4165:26:10"
														}
													]
												}
											}
										]
									},
									"functionSelector": "57ea89b6",
									"id": 1368,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Withdraw",
									"nameLocation": "3641:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3649:2:10"
									},
									"returnParameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3659:0:10"
									},
									"scope": 1688,
									"src": "3632:877:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1467,
										"nodeType": "Block",
										"src": "4772:653:10",
										"statements": [
											{
												"condition": {
													"expression": {
														"baseExpression": {
															"id": 1375,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1092,
															"src": "4786:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1377,
														"indexExpression": {
															"id": 1376,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "4795:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4786:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"id": 1378,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "check",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1073,
													"src": "4786:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1465,
													"nodeType": "Block",
													"src": "5133:277:10",
													"statements": [
														{
															"assignments": [
																1425
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1425,
																	"mutability": "mutable",
																	"name": "RewardEst",
																	"nameLocation": "5152:9:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1465,
																	"src": "5147:14:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1424,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "5147:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1445,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1444,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1431,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1426,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1079,
																						"src": "5165:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																						}
																					},
																					"id": 1428,
																					"indexExpression": {
																						"id": 1427,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1370,
																						"src": "5173:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "5165:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1067_storage",
																						"typeString": "struct ERC20Stakeable.Staker storage ref"
																					}
																				},
																				"id": 1429,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "deposited",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1062,
																				"src": "5165:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1430,
																				"name": "rate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1060,
																				"src": "5190:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5165:29:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1432,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5164:31:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1442,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1439,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1433,
																								"name": "block",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967292,
																								"src": "5200:5:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_block",
																									"typeString": "block"
																								}
																							},
																							"id": 1434,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestamp",
																							"nodeType": "MemberAccess",
																							"src": "5200:15:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1435,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1079,
																									"src": "5218:7:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																										"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																									}
																								},
																								"id": 1437,
																								"indexExpression": {
																									"id": 1436,
																									"name": "_to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1370,
																									"src": "5226:3:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "5218:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1067_storage",
																									"typeString": "struct ERC20Stakeable.Staker storage ref"
																								}
																							},
																							"id": 1438,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestake",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1064,
																							"src": "5218:22:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "5200:40:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1440,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5199:42:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1441,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5242:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "5199:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1443,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5198:47:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5164:81:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5147:98:10"
														},
														{
															"assignments": [
																1447
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1447,
																	"mutability": "mutable",
																	"name": "TotalReward",
																	"nameLocation": "5264:11:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1465,
																	"src": "5259:16:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1446,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "5259:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1451,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1450,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1448,
																	"name": "RewardEst",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1425,
																	"src": "5278:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1449,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5290:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "5278:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5259:34:10"
														},
														{
															"expression": {
																"id": 1459,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1452,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1373,
																	"src": "5307:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1458,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1453,
																		"name": "TotalReward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1447,
																		"src": "5316:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1454,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1079,
																				"src": "5330:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																					"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																				}
																			},
																			"id": 1456,
																			"indexExpression": {
																				"id": 1455,
																				"name": "_to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1370,
																				"src": "5338:3:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5330:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1067_storage",
																				"typeString": "struct ERC20Stakeable.Staker storage ref"
																			}
																		},
																		"id": 1457,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "deposited",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1062,
																		"src": "5330:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5316:36:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5307:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1460,
															"nodeType": "ExpressionStatement",
															"src": "5307:45:10"
														},
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1463,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1461,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1373,
																	"src": "5373:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030303030303030303030303030303030",
																	"id": 1462,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5380:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1000000000000000000"
																},
																"src": "5373:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1374,
															"id": 1464,
															"nodeType": "Return",
															"src": "5366:33:10"
														}
													]
												},
												"id": 1466,
												"nodeType": "IfStatement",
												"src": "4782:628:10",
												"trueBody": {
													"id": 1423,
													"nodeType": "Block",
													"src": "4815:296:10",
													"statements": [
														{
															"assignments": [
																1380
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1380,
																	"mutability": "mutable",
																	"name": "RewardEst",
																	"nameLocation": "4834:9:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1423,
																	"src": "4829:14:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1379,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "4829:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1403,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1402,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1389,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1381,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1079,
																						"src": "4847:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																						}
																					},
																					"id": 1383,
																					"indexExpression": {
																						"id": 1382,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1370,
																						"src": "4855:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4847:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1067_storage",
																						"typeString": "struct ERC20Stakeable.Staker storage ref"
																					}
																				},
																				"id": 1384,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "deposited",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1062,
																				"src": "4847:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1385,
																						"name": "UserRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1092,
																						"src": "4872:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																						}
																					},
																					"id": 1387,
																					"indexExpression": {
																						"id": 1386,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1370,
																						"src": "4881:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4872:13:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
																						"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																					}
																				},
																				"id": 1388,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "userRate",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1069,
																				"src": "4872:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4847:47:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1390,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4846:49:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1400,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1397,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1391,
																								"name": "block",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967292,
																								"src": "4900:5:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_block",
																									"typeString": "block"
																								}
																							},
																							"id": 1392,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestamp",
																							"nodeType": "MemberAccess",
																							"src": "4900:15:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1393,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1079,
																									"src": "4918:7:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																										"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																									}
																								},
																								"id": 1395,
																								"indexExpression": {
																									"id": 1394,
																									"name": "_to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1370,
																									"src": "4926:3:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "4918:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1067_storage",
																									"typeString": "struct ERC20Stakeable.Staker storage ref"
																								}
																							},
																							"id": 1396,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestake",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1064,
																							"src": "4918:22:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "4900:40:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1398,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4899:42:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1399,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4942:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "4899:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1401,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4898:47:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4846:99:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4829:116:10"
														},
														{
															"assignments": [
																1405
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1405,
																	"mutability": "mutable",
																	"name": "TotalReward",
																	"nameLocation": "4964:11:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1423,
																	"src": "4959:16:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1404,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "4959:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1409,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1406,
																	"name": "RewardEst",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1380,
																	"src": "4978:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4990:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "4978:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4959:34:10"
														},
														{
															"expression": {
																"id": 1417,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1410,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1373,
																	"src": "5007:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1416,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1411,
																		"name": "TotalReward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1405,
																		"src": "5016:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1412,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1079,
																				"src": "5030:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																					"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																				}
																			},
																			"id": 1414,
																			"indexExpression": {
																				"id": 1413,
																				"name": "_to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1370,
																				"src": "5038:3:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5030:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1067_storage",
																				"typeString": "struct ERC20Stakeable.Staker storage ref"
																			}
																		},
																		"id": 1415,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "deposited",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1062,
																		"src": "5030:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5016:36:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5007:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1418,
															"nodeType": "ExpressionStatement",
															"src": "5007:45:10"
														},
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1421,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1419,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1373,
																	"src": "5073:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030303030303030303030303030303030",
																	"id": 1420,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5080:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1000000000000000000"
																},
																"src": "5073:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1374,
															"id": 1422,
															"nodeType": "Return",
															"src": "5066:33:10"
														}
													]
												}
											}
										]
									},
									"functionSelector": "c45af5d8",
									"id": 1468,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "showReward",
									"nameLocation": "4711:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "4730:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1468,
												"src": "4722:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4722:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4721:13:10"
									},
									"returnParameters": {
										"id": 1374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "4760:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1468,
												"src": "4755:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1372,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4755:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4754:13:10"
									},
									"scope": 1688,
									"src": "4702:723:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1545,
										"nodeType": "Block",
										"src": "5756:495:10",
										"statements": [
											{
												"condition": {
													"expression": {
														"baseExpression": {
															"id": 1475,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1092,
															"src": "5770:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1477,
														"indexExpression": {
															"id": 1476,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1470,
															"src": "5779:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5770:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"id": 1478,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "check",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1073,
													"src": "5770:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1543,
													"nodeType": "Block",
													"src": "6042:203:10",
													"statements": [
														{
															"assignments": [
																1514
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1514,
																	"mutability": "mutable",
																	"name": "RewardEst",
																	"nameLocation": "6061:9:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1543,
																	"src": "6056:14:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1513,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "6056:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1534,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1533,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1520,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1515,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1079,
																						"src": "6074:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																						}
																					},
																					"id": 1517,
																					"indexExpression": {
																						"id": 1516,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1470,
																						"src": "6082:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "6074:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1067_storage",
																						"typeString": "struct ERC20Stakeable.Staker storage ref"
																					}
																				},
																				"id": 1518,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "deposited",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1062,
																				"src": "6074:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1519,
																				"name": "rate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1060,
																				"src": "6099:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6074:29:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1521,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6073:31:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1531,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1528,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1522,
																								"name": "block",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967292,
																								"src": "6109:5:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_block",
																									"typeString": "block"
																								}
																							},
																							"id": 1523,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestamp",
																							"nodeType": "MemberAccess",
																							"src": "6109:15:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1524,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1079,
																									"src": "6127:7:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																										"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																									}
																								},
																								"id": 1526,
																								"indexExpression": {
																									"id": 1525,
																									"name": "_to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1470,
																									"src": "6135:3:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "6127:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1067_storage",
																									"typeString": "struct ERC20Stakeable.Staker storage ref"
																								}
																							},
																							"id": 1527,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestake",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1064,
																							"src": "6127:22:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "6109:40:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1529,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "6108:42:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1530,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6151:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "6108:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1532,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6107:47:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6073:81:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6056:98:10"
														},
														{
															"assignments": [
																1536
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1536,
																	"mutability": "mutable",
																	"name": "TotalReward",
																	"nameLocation": "6173:11:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1543,
																	"src": "6168:16:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1535,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "6168:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1540,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1539,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1537,
																	"name": "RewardEst",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1514,
																	"src": "6187:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6199:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "6187:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6168:34:10"
														},
														{
															"expression": {
																"id": 1541,
																"name": "TotalReward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1536,
																"src": "6223:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1474,
															"id": 1542,
															"nodeType": "Return",
															"src": "6216:18:10"
														}
													]
												},
												"id": 1544,
												"nodeType": "IfStatement",
												"src": "5766:479:10",
												"trueBody": {
													"id": 1512,
													"nodeType": "Block",
													"src": "5799:221:10",
													"statements": [
														{
															"assignments": [
																1480
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1480,
																	"mutability": "mutable",
																	"name": "RewardEst",
																	"nameLocation": "5818:9:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1512,
																	"src": "5813:14:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1479,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "5813:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1503,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1489,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1481,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1079,
																						"src": "5831:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																						}
																					},
																					"id": 1483,
																					"indexExpression": {
																						"id": 1482,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1470,
																						"src": "5839:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "5831:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1067_storage",
																						"typeString": "struct ERC20Stakeable.Staker storage ref"
																					}
																				},
																				"id": 1484,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "deposited",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1062,
																				"src": "5831:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1485,
																						"name": "UserRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1092,
																						"src": "5856:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																						}
																					},
																					"id": 1487,
																					"indexExpression": {
																						"id": 1486,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1470,
																						"src": "5865:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "5856:13:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
																						"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																					}
																				},
																				"id": 1488,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "userRate",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1069,
																				"src": "5856:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5831:47:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1490,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5830:49:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1497,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1491,
																								"name": "block",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967292,
																								"src": "5884:5:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_block",
																									"typeString": "block"
																								}
																							},
																							"id": 1492,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestamp",
																							"nodeType": "MemberAccess",
																							"src": "5884:15:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1493,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1079,
																									"src": "5902:7:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																										"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																									}
																								},
																								"id": 1495,
																								"indexExpression": {
																									"id": 1494,
																									"name": "_to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1470,
																									"src": "5910:3:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "5902:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1067_storage",
																									"typeString": "struct ERC20Stakeable.Staker storage ref"
																								}
																							},
																							"id": 1496,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestake",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1064,
																							"src": "5902:22:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "5884:40:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1498,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5883:42:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1499,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5926:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "5883:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1501,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5882:47:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5830:99:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5813:116:10"
														},
														{
															"assignments": [
																1505
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1505,
																	"mutability": "mutable",
																	"name": "TotalReward",
																	"nameLocation": "5948:11:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1512,
																	"src": "5943:16:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1504,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "5943:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1509,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1508,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1506,
																	"name": "RewardEst",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1480,
																	"src": "5962:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1507,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5974:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "5962:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5943:34:10"
														},
														{
															"expression": {
																"id": 1510,
																"name": "TotalReward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1505,
																"src": "5998:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1474,
															"id": 1511,
															"nodeType": "Return",
															"src": "5991:18:10"
														}
													]
												}
											}
										]
									},
									"functionSelector": "8b73e331",
									"id": 1546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateIntrest",
									"nameLocation": "5698:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "5723:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1546,
												"src": "5715:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1469,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5715:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5714:13:10"
									},
									"returnParameters": {
										"id": 1474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1473,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1546,
												"src": "5748:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5748:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5747:9:10"
									},
									"scope": 1688,
									"src": "5689:562:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1557,
										"nodeType": "Block",
										"src": "6495:47:10",
										"statements": [
											{
												"expression": {
													"id": 1555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1553,
														"name": "ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1052,
														"src": "6505:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1554,
														"name": "_ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1548,
														"src": "6521:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6505:30:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1556,
												"nodeType": "ExpressionStatement",
												"src": "6505:30:10"
											}
										]
									},
									"functionSelector": "ee0106d2",
									"id": 1558,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1551,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1550,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "6486:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "6486:9:10"
										}
									],
									"name": "UpdateERC721",
									"nameLocation": "6442:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1548,
												"mutability": "mutable",
												"name": "_ERC721address",
												"nameLocation": "6463:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1558,
												"src": "6455:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1547,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6455:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6454:24:10"
									},
									"returnParameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6495:0:10"
									},
									"scope": 1688,
									"src": "6433:109:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1569,
										"nodeType": "Block",
										"src": "6781:45:10",
										"statements": [
											{
												"expression": {
													"id": 1567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1565,
														"name": "ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1056,
														"src": "6791:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1566,
														"name": "_ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1560,
														"src": "6806:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6791:28:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1568,
												"nodeType": "ExpressionStatement",
												"src": "6791:28:10"
											}
										]
									},
									"functionSelector": "275bd33f",
									"id": 1570,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1563,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1562,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "6772:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "6772:9:10"
										}
									],
									"name": "UpdateERC20",
									"nameLocation": "6728:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1560,
												"mutability": "mutable",
												"name": "_ERC20Address",
												"nameLocation": "6750:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1570,
												"src": "6742:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1559,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6742:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6740:24:10"
									},
									"returnParameters": {
										"id": 1564,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6781:0:10"
									},
									"scope": 1688,
									"src": "6719:107:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1581,
										"nodeType": "Block",
										"src": "7079:39:10",
										"statements": [
											{
												"expression": {
													"id": 1579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1577,
														"name": "rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "7089:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1578,
														"name": "_ratePersentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1572,
														"src": "7096:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7089:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1580,
												"nodeType": "ExpressionStatement",
												"src": "7089:22:10"
											}
										]
									},
									"functionSelector": "f89d832f",
									"id": 1582,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1575,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1574,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "7070:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "7070:9:10"
										}
									],
									"name": "UpdateRatePersentage",
									"nameLocation": "7017:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1572,
												"mutability": "mutable",
												"name": "_ratePersentage",
												"nameLocation": "7046:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "7038:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1571,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7038:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7037:25:10"
									},
									"returnParameters": {
										"id": 1576,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7079:0:10"
									},
									"scope": 1688,
									"src": "7008:110:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1632,
										"nodeType": "Block",
										"src": "7417:306:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1590,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1079,
																	"src": "7435:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1067_storage_$",
																		"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																	}
																},
																"id": 1593,
																"indexExpression": {
																	"expression": {
																		"id": 1591,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7443:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7443:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7435:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1067_storage",
																	"typeString": "struct ERC20Stakeable.Staker storage ref"
																}
															},
															"id": 1594,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1066,
															"src": "7435:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4669727374204465706f73697420546f6b656e73",
															"id": 1595,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7461:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937",
																"typeString": "literal_string \"First Deposit Tokens\""
															},
															"value": "First Deposit Tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937",
																"typeString": "literal_string \"First Deposit Tokens\""
															}
														],
														"id": 1589,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7427:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7427:57:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1597,
												"nodeType": "ExpressionStatement",
												"src": "7427:57:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1599,
																	"name": "UserRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1092,
																	"src": "7502:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																		"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																	}
																},
																"id": 1602,
																"indexExpression": {
																	"expression": {
																		"id": 1600,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7511:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1601,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7511:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7502:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
																	"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																}
															},
															"id": 1603,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1073,
															"src": "7502:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c6561736520556e7374616b6520796f7572206465706f7369746564204e4654",
															"id": 1604,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7529:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab",
																"typeString": "literal_string \"Please Unstake your deposited NFT\""
															},
															"value": "Please Unstake your deposited NFT"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab",
																"typeString": "literal_string \"Please Unstake your deposited NFT\""
															}
														],
														"id": 1598,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7494:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7494:71:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1606,
												"nodeType": "ExpressionStatement",
												"src": "7494:71:10"
											},
											{
												"expression": {
													"id": 1616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1607,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1092,
															"src": "7575:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1610,
														"indexExpression": {
															"expression": {
																"id": 1608,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7584:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1609,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7584:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7575:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1612,
																"name": "_rate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1586,
																"src": "7608:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1613,
																"name": "tokenIds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1584,
																"src": "7614:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "74727565",
																"id": 1614,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7623:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 1611,
															"name": "StakerNFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1074,
															"src": "7598:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_StakerNFT_$1074_storage_ptr_$",
																"typeString": "type(struct ERC20Stakeable.StakerNFT storage pointer)"
															}
														},
														"id": 1615,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7598:30:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1074_memory_ptr",
															"typeString": "struct ERC20Stakeable.StakerNFT memory"
														}
													},
													"src": "7575:53:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
														"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
													}
												},
												"id": 1617,
												"nodeType": "ExpressionStatement",
												"src": "7575:53:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1622,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7679:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1623,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7679:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1626,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "7698:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1625,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7690:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1624,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7690:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7690:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1628,
															"name": "tokenIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1584,
															"src": "7704:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1629,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7713:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1619,
																	"name": "ERC721address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1052,
																	"src": "7647:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1618,
																"name": "IERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "7639:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721_$623_$",
																	"typeString": "type(contract IERC721)"
																}
															},
															"id": 1620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7639:22:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$623",
																"typeString": "contract IERC721"
															}
														},
														"id": 1621,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 568,
														"src": "7639:39:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory) external"
														}
													},
													"id": 1630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7639:77:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1631,
												"nodeType": "ExpressionStatement",
												"src": "7639:77:10"
											}
										]
									},
									"functionSelector": "934ed772",
									"id": 1633,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DepositNFT",
									"nameLocation": "7370:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1584,
												"mutability": "mutable",
												"name": "tokenIds",
												"nameLocation": "7389:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "7381:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7381:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1586,
												"mutability": "mutable",
												"name": "_rate",
												"nameLocation": "7403:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "7398:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1585,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7398:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7380:29:10"
									},
									"returnParameters": {
										"id": 1588,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7417:0:10"
									},
									"scope": 1688,
									"src": "7361:362:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1667,
										"nodeType": "Block",
										"src": "7981:203:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1639,
																	"name": "UserRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1092,
																	"src": "7999:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																		"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																	}
																},
																"id": 1642,
																"indexExpression": {
																	"expression": {
																		"id": 1640,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "8008:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1641,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "8008:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7999:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
																	"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																}
															},
															"id": 1643,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1073,
															"src": "7999:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c65617365204669727374205374616b65204e465473",
															"id": 1644,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8026:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9",
																"typeString": "literal_string \"Please First Stake NFTs\""
															},
															"value": "Please First Stake NFTs"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9",
																"typeString": "literal_string \"Please First Stake NFTs\""
															}
														],
														"id": 1638,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7991:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7991:61:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1646,
												"nodeType": "ExpressionStatement",
												"src": "7991:61:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1653,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "8110:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1688",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1652,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8102:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1651,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8102:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1654,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8102:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1655,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8117:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1656,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8117:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1657,
															"name": "tokenIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1635,
															"src": "8128:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8137:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1648,
																	"name": "ERC721address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1052,
																	"src": "8070:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1647,
																"name": "IERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "8062:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721_$623_$",
																	"typeString": "type(contract IERC721)"
																}
															},
															"id": 1649,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8062:22:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$623",
																"typeString": "contract IERC721"
															}
														},
														"id": 1650,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 568,
														"src": "8062:39:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory) external"
														}
													},
													"id": 1659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8062:78:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1660,
												"nodeType": "ExpressionStatement",
												"src": "8062:78:10"
											},
											{
												"expression": {
													"id": 1665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "8150:27:10",
													"subExpression": {
														"baseExpression": {
															"id": 1661,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1092,
															"src": "8157:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1074_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1664,
														"indexExpression": {
															"expression": {
																"id": 1662,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8166:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8166:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8157:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1074_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1666,
												"nodeType": "ExpressionStatement",
												"src": "8150:27:10"
											}
										]
									},
									"functionSelector": "023245d7",
									"id": 1668,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawNFT",
									"nameLocation": "7944:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "tokenIds",
												"nameLocation": "7964:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "7956:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1634,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7956:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7955:18:10"
									},
									"returnParameters": {
										"id": 1637,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7981:0:10"
									},
									"scope": 1688,
									"src": "7935:249:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										640
									],
									"body": {
										"id": 1686,
										"nodeType": "Block",
										"src": "8295:65:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 1682,
															"name": "IERC721Receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 641,
															"src": "8312:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$641_$",
																"typeString": "type(contract IERC721Receiver)"
															}
														},
														"id": 1683,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 640,
														"src": "8312:32:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
															"typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
														}
													},
													"id": 1684,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberName": "selector",
													"nodeType": "MemberAccess",
													"src": "8312:41:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"functionReturnParameters": 1681,
												"id": 1685,
												"nodeType": "Return",
												"src": "8305:48:10"
											}
										]
									},
									"functionSelector": "150b7a02",
									"id": 1687,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "8198:16:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1678,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8269:8:10"
									},
									"parameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1670,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1687,
												"src": "8215:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1669,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8215:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1687,
												"src": "8223:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8223:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1674,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1687,
												"src": "8231:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8231:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1687,
												"src": "8239:14:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1675,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8239:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8214:40:10"
									},
									"returnParameters": {
										"id": 1681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1687,
												"src": "8287:6:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1679,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "8287:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8286:8:10"
									},
									"scope": 1688,
									"src": "8189:171:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1689,
							"src": "348:8014:10",
							"usedErrors": []
						}
					],
					"src": "56:8306:10"
				},
				"id": 10
			}
		}
	}
}